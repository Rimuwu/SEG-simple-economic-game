import asyncio
import logging
from aiogram import types
from aiogram.filters import Command

from global_modules.logs import Logger

from modules.db import db
from modules.ws_client import ws_client
from modules.utils import go_to_page
from bot_instance import bot, dp

import handlers
from oms import register_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot_logger = Logger.get_logger("bot")
logging.basicConfig(level=logging.INFO)

@dp.message(Command("sessions"))
async def sessions_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sessions"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π
        response = await ws_client.send_message(
            "get-sessions",
            stage='FreeUserConnect',
            wait_for_response=True,
            )
        for session in response:
            await message.answer(
                f"ID: {session['session_id']}, Stage: {session['stage']}, Created At: {session['created_at']}"
                )
        else:
            if not response:
                await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /sessions: {str(e)}")

# http://localhost:8000/ws/status - —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ–±—Å–æ–∫–µ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ send_message
@dp.message(Command("ping"))
async def ping_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
        response = await ws_client.send_message(
            "ping", {'from': message.from_user.id})
        print(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping: {str(e)}")

@ws_client.on_message('pong')
async def on_pong(message: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"–ü–æ–ª—É—á–µ–Ω pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {message}")

    from_id = message.get('content', {}).get('from')

    await bot.send_message(from_id, "Pong! üèì")

@ws_client.on_event("connect")
async def on_connect():
    print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É")

@ws_client.on_message('api-update_session_stage')
async def on_update_session_stage(message: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏ —Å–µ—Å—Å–∏–∏"""
    print(message)
    data = message.get('data', {})
    session_id = data.get('session_id')
    new_stage = data.get('new_stage')
    print("=====================", session_id, new_stage)
    if new_stage == "CellSelect":
        await go_to_page(session_id, "wait-start-page", "select-cell-page")


@ws_client.on_event("disconnect")
async def on_disconnect():
    print("‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞")

    for _ in range(15, 0, -1):
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        await ws_client.connect(max_attempts=10)
        if ws_client.is_connected():
            print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            return

        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
        await asyncio.sleep(1)

    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 15 –ø–æ–ø—ã—Ç–æ–∫, –≤—ã—Ö–æ–¥.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot_logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    try:
        db.create_table('messages')
        db.create_table('scenes')

        register_handlers(dp)

        await ws_client.connect() # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
        await dp.start_polling(bot)
    finally:
        await ws_client.disconnect() # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())