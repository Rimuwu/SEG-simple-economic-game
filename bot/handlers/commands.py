from aiogram import F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import os
import asyncio

from modules.ws_client import *
from modules.utils import go_to_page, update_page
from modules.db import db
from filters.admins import *
from app.states import *

from bot_instance import dp, bot


# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
UPDATE_PASSWORD = os.getenv("UPDATE_PASSWORD", "default_password")


@dp.message(AdminFilter(), Command("sg"))
async def start_game(message: Message, state: FSMContext):
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –µ—ë —Å—Ç–∞—Ä—Ç–∞:")
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(StartGameStates.waiting_for_session_id)

@dp.message(StartGameStates.waiting_for_session_id)
async def process_start_session_id(message: Message, state: FSMContext):
    session_id = message.text
    data = await state.get_data()
    msg_id = data['msg_id']
    response = await update_session_stage(
        session_id=session_id,
        stage='CellSelect',
    )
    
    await message.delete()
    if "error" in response.keys():
        await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏: {response['error']}"
        )
        await state.clear()
        return
    
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚úÖ –°–µ—Å—Å–∏—è —Å ID `{session_id}` —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!",
        parse_mode="Markdown"
    )
    db.drop_all()
    await state.clear()
    

@dp.message(AdminFilter(), Command("cg"))
async def create_game(message: Message, state: FSMContext):
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏–ª–∏ '-' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID:")
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(CreateGameStates.waiting_for_session_id)


@dp.message(CreateGameStates.waiting_for_session_id)
async def process_session_id(message: Message, state: FSMContext):
    session_id = message.text
    data = await state.get_data()
    msg_id = data['msg_id']
    session_id_i = None if session_id == "-" else session_id
    response = await create_session(
        session_id=session_id_i
    )
    await message.delete()
    if response is None:
        await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –û—Ç–≤–µ—Ç–∞ –Ω–µ—Ç."
        )
        await state.clear()
        return
    
    elif "error" in response.keys():
        await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {response['error']}"
        )
        await state.clear()
        return
    
    await update_session_stage(
        session_id=response["session"]['session_id'],
        stage='FreeUserConnect',
    )
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è!\nüÜî –ö–æ–¥ —Å–µ—Å—Å–∏–∏: `{response['session']['session_id']}`",
        parse_mode="Markdown"
    )
    await state.clear()

@dp.message(AdminFilter(), Command("ds"))
async def delete_session_command(message: Message, state: FSMContext):
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(DeleteSessionStates.waiting_for_session_id)


@dp.message(DeleteSessionStates.waiting_for_session_id)
async def process_delete_session_id(message: Message, state: FSMContext):
    session_id = message.text
    data = await state.get_data()
    msg_id = data['msg_id']
    response = await delete_session(
        session_id=session_id,
        really=True
    )
    
    await message.delete()
    if response is not None and "error" in response.keys():
        await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {response['error']}"
        )
        await state.clear()
        return
    
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚úÖ –°–µ—Å—Å–∏—è —Å ID `{session_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        parse_mode="Markdown"
    )
    db.drop_all()
    await state.clear()

    
# http://localhost:8000/ws/status - —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ–±—Å–æ–∫–µ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ send_message
@dp.message(Command("ping"))
async def ping_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
        response = await ws_client.send_message(
            "ping", {'from': message.from_user.id})
        print(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping: {str(e)}")

@ws_client.on_message('pong')
async def on_pong(message: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"–ü–æ–ª—É—á–µ–Ω pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {message}")

    from_id = message.get('content', {}).get('from')

    await bot.send_message(from_id, "Pong! üèì")

@ws_client.on_event("connect")
async def on_connect():
    print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É")


@ws_client.on_message('api-update_session_stage')
async def on_update_session_stage(message: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏ —Å–µ—Å—Å–∏–∏"""
    print(message)
    data = message.get('data', {})
    session_id = data.get('session_id')
    new_stage = data.get('new_stage')
    print("=====================", session_id, new_stage)
    if new_stage == "CellSelect":
        await go_to_page(session_id, "wait-start-page", "select-cell-page")
    elif new_stage == "Game":
        await go_to_page(session_id, "wait-game-stage-page", "main-page")


@ws_client.on_event("disconnect")
async def on_disconnect():
    print("‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞")

    for _ in range(15, 0, -1):
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        await ws_client.connect(max_attempts=10)
        if ws_client.is_connected():
            print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            return

        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
        await asyncio.sleep(1)

    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 15 –ø–æ–ø—ã—Ç–æ–∫, –≤—ã—Ö–æ–¥.")