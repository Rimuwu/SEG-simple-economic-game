from pprint import pprint
from aiogram import F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import os
import asyncio

from modules.ws_client import *
from modules.utils import go_to_page, update_page
from modules.db import db
from modules.load_scenes import load_scenes_from_db
from filters.admins import *
from modules.states import *

from oms import scene_manager

from bot_instance import dp, bot


# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
UPDATE_PASSWORD = os.getenv("UPDATE_PASSWORD", "default_password")


@dp.message(AdminFilter(), Command("sg"))
async def start_game(message: Message, state: FSMContext):
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –µ—ë —Å—Ç–∞—Ä—Ç–∞:")
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(StartGameStates.waiting_for_session_id)

@dp.message(StartGameStates.waiting_for_session_id)
async def process_start_session_id(message: Message, state: FSMContext):
    session_id = message.text
    data = await state.get_data()
    msg_id = data['msg_id']
    response = await update_session_stage(
        session_id=session_id,
        stage='CellSelect',
    )
    
    await message.delete()
    if response is not None and "error" in response.keys():
        await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏: {response['error']}"
        )
        await state.clear()
        return
    
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚úÖ –°–µ—Å—Å–∏—è —Å ID `{session_id}` —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!",
        parse_mode="Markdown"
    )
    db.drop_all()
    await state.clear()
    

@dp.message(AdminFilter(), Command("cg"))
async def create_game(message: Message, state: FSMContext):
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏–ª–∏ '-' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID:")
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(CreateGameStates.waiting_for_session_id)


@dp.message(CreateGameStates.waiting_for_session_id)
async def process_session_id(message: Message, state: FSMContext):
    session_id = message.text
    data = await state.get_data()
    msg_id = data['msg_id']
    session_id_i = None if session_id == "-" else session_id
    response = await create_session(
        session_id=session_id_i
    )
    await message.delete()
    if response is None:
        await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –û—Ç–≤–µ—Ç–∞ –Ω–µ—Ç."
        )
        await state.clear()
        return
    
    elif "error" in response.keys():
        await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {response['error']}"
        )
        await state.clear()
        return
    
    await update_session_stage(
        session_id=response["session"]['id'],
        stage='FreeUserConnect',
    )
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è!\nüÜî –ö–æ–¥ —Å–µ—Å—Å–∏–∏: `{response['session']['id']}`",
        parse_mode="Markdown"
    )
    await state.clear()

@dp.message(AdminFilter(), Command("ds"))
async def delete_session_command(message: Message, state: FSMContext):
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(DeleteSessionStates.waiting_for_session_id)


@dp.message(DeleteSessionStates.waiting_for_session_id)
async def process_delete_session_id(message: Message, state: FSMContext):
    session_id = message.text
    data = await state.get_data()
    msg_id = data['msg_id']
    
    users = await get_users(session_id=session_id)
    reposnse2 = await get_session(session_id=session_id)
    response = await delete_session(
        session_id=session_id,
        really=True
    )
    print("==========================")
    print(users)
    print(reposnse2)
    print(response)
    print(message.text)
    print("==========================")
    for user in users:
        scene = scene_manager.get_scene(user['id'])
        if scene:
            await scene.end()
    
    await message.delete()
    if response is not None and "error" in response.keys():
        await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {response['error']}"
        )
        await state.clear()
        return
    
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚úÖ –°–µ—Å—Å–∏—è —Å ID `{session_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        parse_mode="Markdown"
    )
    await state.clear()


@dp.message(AdminFilter(), Command("step"))
async def change_session_stage(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞ —Å–µ—Å—Å–∏–∏
    –§–æ—Ä–º–∞—Ç: /step <–∫–æ–¥_—Å–µ—Å—Å–∏–∏> <—ç—Ç–∞–ø>
    –≠—Ç–∞–ø—ã: FreeUserConnect, CellSelect, Game, End
    """
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=2)
    
    if len(args) < 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/step <–∫–æ–¥_—Å–µ—Å—Å–∏–∏> <—ç—Ç–∞–ø>`\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã:\n"
            "‚Ä¢ `FreeUserConnect` - —Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
            "‚Ä¢ `CellSelect` - –≤—ã–±–æ—Ä –∫–ª–µ—Ç–∫–∏\n"
            "‚Ä¢ `Game` - –∏–≥—Ä–∞\n"
            "‚Ä¢ `End` - –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã",
            parse_mode="Markdown"
        )
        return
    
    session_id = args[1].strip()
    stage = args[2].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —ç—Ç–∞–ø–∞
    valid_stages = ['FreeUserConnect', 'CellSelect', 'Game', 'End']
    if stage not in valid_stages:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø: `{stage}`\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã: {', '.join([f'`{s}`' for s in valid_stages])}",
            parse_mode="Markdown"
        )
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    try:
        response = await update_session_stage(
            session_id=session_id,
            stage=stage
        )
        
        if response is None:
            await message.answer(
                f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: —Å–µ—Å—Å–∏—è `{session_id}` ‚Üí —ç—Ç–∞–ø `{stage}`",
                parse_mode="Markdown"
            )
        elif isinstance(response, dict) and "error" in response:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: {response['error']}",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                f"‚úÖ –≠—Ç–∞–ø —Å–µ—Å—Å–∏–∏ `{session_id}` –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ `{stage}`",
                parse_mode="Markdown"
            )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}",
            parse_mode="Markdown"
        )


@dp.message(Command("leave"))
async def leave_session(message: Message, state: FSMContext):
    msg = await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(ConfirmLeaveStates.waiting_for_confirmation)


@dp.message(ConfirmLeaveStates.waiting_for_confirmation)
async def confirm_leave(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    msg_id = data['msg_id']
    if message.text.lower() != "–¥–∞":
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=msg_id,
            text="–í—ã—Ö–æ–¥ –∏–∑ —Å–µ—Å—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω."
        )
        await state.clear()
        return
    user_id = message.from_user.id
    await delete_user(user_id=user_id)
    scene = scene_manager.get_scene(user_id)
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text="–í–∞—à–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏—Ä–∞–≤–Ω–µ–Ω–æ –∫ 0, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É."
    )
    await scene.end()
    await state.clear()

    
# http://localhost:8000/ws/status - —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ–±—Å–æ–∫–µ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ send_message
@dp.message(Command("ping"))
async def ping_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
        response = await ws_client.send_message(
            "ping", {'from': message.from_user.id})
        print(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping: {str(e)}")

@ws_client.on_message('pong')
async def on_pong(message: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"–ü–æ–ª—É—á–µ–Ω pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {message}")

    from_id = message.get('content', {}).get('from')

    await bot.send_message(from_id, "Pong! üèì")

@ws_client.on_event("connect")
async def on_connect():
    load_scenes_from_db(scene_manager)
    print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É")


@ws_client.on_message('api-update_session_stage')
async def on_update_session_stage(message: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏ —Å–µ—Å—Å–∏–∏"""
    print(message)
    data = message.get('data', {})
    session_id = data.get('session_id')
    new_stage = data.get('new_stage')
    print("=====================", session_id, new_stage)
    
    if new_stage == "CellSelect":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Å–µ—Å—Å–∏–∏
        companies = await get_companies(session_id=session_id)
        
        for company in companies:
            company_id = company.get('id')
            owner_id = company.get('owner')
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
            users = await get_users(session_id=session_id, company_id=company_id)
            
            for user in users:
                user_id = user.get('id')
                
                if user_id and scene_manager.has_scene(user_id):
                    scene = scene_manager.get_scene(user_id)
                    if scene:
                        # –í–ª–∞–¥–µ–ª–µ—Ü –∏–¥—ë—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –∫–ª–µ—Ç–∫–∏
                        if user_id == owner_id:
                            await scene.update_page("select-cell-page")
                        else:
                            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∂–¥—É—Ç –≤—ã–±–æ—Ä–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                            await scene.update_page("wait-select-cell-page")
    
    elif new_stage == "Game":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ç—é—Ä—å–º–µ
        companies = await get_companies(session_id=session_id)
        
        for company in companies:
            company_id = company.get('id')
            in_prison = company.get('in_prison', False)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
            users = await get_users(session_id=session_id, company_id=company_id)
            
            for user in users:
                user_id = user.get('id')
                
                if user_id and scene_manager.has_scene(user_id):
                    scene = scene_manager.get_scene(user_id)
                    if scene:
                        current_page = scene.page
                        
                        # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –≤ —Ç—é—Ä—å–º–µ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—é—Ä—å–º—ã
                        if in_prison:
                            await scene.update_page("prison-page")
                        else:
                            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å wait-game-stage-page –∏–ª–∏ change-turn-page –Ω–∞ main-page
                            if current_page not in ["start", "name-enter", "company-create", "company-join", "wait-start-page"]:
                                await scene.update_page("main-page")
    
    elif new_stage == "ChangeTurn":
        await go_to_page(session_id, None, "change-turn-page")
    
    elif new_stage == "End":
        await go_to_page(session_id, None, "end-game-page")


@ws_client.on_event("disconnect")
async def on_disconnect():
    print("‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞")

    for _ in range(15, 0, -1):
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        await ws_client.connect(max_attempts=10)
        if ws_client.is_connected():
            print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            return

        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
        await asyncio.sleep(1)

    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 15 –ø–æ–ø—ã—Ç–æ–∫, –≤—ã—Ö–æ–¥.")


@ws_client.on_message("api-company_to_prison")
async def on_company_to_prison(message: dict):
    data = message.get('data', {})
    company_id = data.get('company_id')
    await go_to_page(company_id, None, "prison-page")


@ws_client.on_message("api-company_set_position")
async def on_company_set_position(message: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    data = message.get('data', {})
    company_id = data.get('company_id')
    new_position = data.get('new_position')
    
    print(f"[api-company_set_position] Company {company_id} set position to {new_position}")
    
    if not company_id:
        return
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    users = await get_users(company_id=company_id)
    
    print(f"[api-company_set_position] Found {len(users) if users else 0} users in company {company_id}")
    
    for user in users:
        user_id = user.get('id')
        
        if user_id and scene_manager.has_scene(user_id):
            scene = scene_manager.get_scene(user_id)
            if scene:
                current_page = scene.page
                
                print(f"[api-company_set_position] User {user_id} current page: {current_page}")
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                if current_page in ["select-cell-page", "wait-select-cell-page"]:
                    print(f"[api-company_set_position] Moving user {user_id} to wait-game-stage-page")
                    await scene.update_page("wait-game-stage-page")
    
    
@dp.message(Command("docs"), AdminFilter())
async def docs(message: Message):
    
    result = await get_sessions()
    pprint(result)
    
    result = await get_users()
    pprint(result)
    
    result = await get_companies()
    pprint(result)
    
    result = await get_factories()
    pprint(result)