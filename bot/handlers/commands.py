from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import os

from modules.keyboards import *
from modules.ws_client import *
from filters.admins import *
from app.states import *

from bot_instance import dp, bot


# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
UPDATE_PASSWORD = os.getenv("UPDATE_PASSWORD", "default_password")

@dp.message(Command("connect"))
async def connect(message: Message, state: FSMContext):
    session = await get_sessions()
    for s in session:
        s_id = s['session_id']
        user = await get_user(id=message.from_user.id, session_id=s_id)
        if user is not None:
            await message.delete()
            await message.answer("‚ùå –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Å—Å–∏–∏.")
            return
    await state.update_data(msg_id=message.message_id + 1, chat_id=message.chat.id)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ: ", reply_markup=cancel_kb)
    await state.set_state(CreateUserStates.waiting_for_username)


@dp.message(CreateUserStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    username = message.text.strip()
    data = await state.get_data()
    msg_id = data.get("msg_id")
    chat_id = data.get("chat_id")
    if not username:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:")
        return
    await message.delete()
    await message.bot.edit_message_text(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ id —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, {username}:", message_id=msg_id, chat_id=chat_id, reply_markup=cancel_kb)
    await state.update_data(username=username)
    await state.set_state(CreateUserStates.waiting_for_session_id)


@dp.message(CreateUserStates.waiting_for_session_id)
async def process_session_id(message: Message, state: FSMContext):
    session_id = message.text
    data = await state.get_data()
    username = data.get("username")
    msg_id = data['msg_id']
    chat_id = data['chat_id']
    if len(session_id.split()) != 1:
        await message.bot.edit_message_text("‚ùå ID —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ—Å—Å–∏–∏:", message_id=msg_id, chat_id=chat_id, reply_markup=cancel_kb)
        return
    response = await get_sessions(stage='FreeUserConnect')
    for session in response:
        if session['session_id'] == session_id:
            break
    else:
        await message.bot.edit_message_text("‚ùå ID —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ—Å—Å–∏–∏:", message_id=msg_id, chat_id=chat_id, reply_markup=cancel_kb)
        return

    await create_user(
        user_id=message.from_user.id,
        username=username,
        session_id=session_id,
        password=UPDATE_PASSWORD
    )
    await message.delete()
    await message.bot.edit_message_text(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∏–≥—Ä–µ —Å ID —Å–µ—Å—Å–∏–∏: {session_id}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_company_keyboard,
        message_id=msg_id,
        chat_id=chat_id
    )
    await state.clear()


@dp.message(AdminFilter(), Command("create_game"))
async def create_game(message: Message, state: FSMContext):
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏–ª–∏ '-' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID:")
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(CreateGameStates.waiting_for_session_id)


@dp.message(CreateGameStates.waiting_for_session_id)
async def process_session_id(message: Message, state: FSMContext):
    session_id = message.text
    data = await state.get_data()
    msg_id = data['msg_id']
    session_id_i = None if session_id == "-" else session_id
    response = await create_session(
        session_id=session_id_i
    )
    
    if response is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –û—Ç–≤–µ—Ç–∞ –Ω–µ—Ç.")
        await state.clear()
        return
    
    elif "error" in response.keys():
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {response['error']}")
        await state.clear()
        return
    
    await update_session_stage(
        session_id=response["session"]['session_id'],
        stage='FreeUserConnect',
    )
    await message.delete()
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text=f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è!\nüÜî –ö–æ–¥ —Å–µ—Å—Å–∏–∏: `{response['session']['session_id']}`",
        parse_mode="Markdown"
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–µ–π
@dp.callback_query(F.data == "create_company")
async def create_company_start(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ chat_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        original_message_id=callback.message.message_id,
        chat_id=callback.message.chat.id
    )
    
    await callback.message.edit_text(
        "üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=cancel_kb
    )
    await state.set_state(CreateCompanyStates.waiting_for_company_name)
    await callback.answer()


@dp.message(CreateCompanyStates.waiting_for_company_name)
async def process_company_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –µ—ë
    """
    company_name = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    original_message_id = data.get('original_message_id')
    chat_id = data.get('chat_id')
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
    response = await create_company(
        name=company_name,
        who_create=message.from_user.id,
        password=UPDATE_PASSWORD
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    await message.delete()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
    company_info = (
        f"üè¢ **{company_name}**\n\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 1\n"
        f"üîë –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: {response['company']['secret_code']}"
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot –∏–∑ message –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.bot.edit_message_text(
        chat_id=chat_id,
        message_id=original_message_id,
        text=company_info,
        parse_mode="Markdown"
    )
    
    await state.clear()


@dp.callback_query(F.data == "join_company")
async def join_company_start(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ chat_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        original_message_id=callback.message.message_id,
        chat_id=callback.message.chat.id
    )
    
    await callback.message.edit_text(
        "ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–ø–∞–Ω–∏–∏\n\n–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=cancel_kb
    )
    await state.set_state(JoinCompanyStates.waiting_for_secret_code)
    await callback.answer()


@dp.message(JoinCompanyStates.waiting_for_secret_code)
async def process_secret_code(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    secret_code = message.text.strip()
    
    if not secret_code:
        await message.answer("‚ùå –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    original_message_id = data.get('original_message_id')
    chat_id = data.get('chat_id')
    
    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    response = await update_company_add_user(
        user_id=message.from_user.id,
        secret_code=int(secret_code),
        password=UPDATE_PASSWORD
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º –∫–æ–¥–∞
    await message.delete()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
    company_info = (
        f"üè¢ **–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏**\n\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 5\n"
        f"üîë –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: {secret_code}"
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot –∏–∑ message –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.bot.edit_message_text(
        chat_id=chat_id,
        message_id=original_message_id,
        text=company_info,
        parse_mode="Markdown"
    )
    
    await state.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
@dp.callback_query(F.data == "cancel_ac")
async def cancel_creation(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
    """
    current_state = await state.get_state()
    if current_state is None:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", show_alert=True)
        return
    
    await state.clear()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await callback.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    await callback.message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await callback.answer()

