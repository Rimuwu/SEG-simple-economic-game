from oms import Page
from aiogram.types import CallbackQuery
from oms.utils import callback_generator
from modules.ws_client import factory_set_produce, get_factories
from modules.resources import get_resource


class FactoryStartGroups(Page):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–æ–¥–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    __page_name__ = "factory-start-groups"
    
    def get_resource_name(self, resource_key):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–µ—Å—É—Ä—Å–∞"""
        if resource_key is None:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å"
        
        resource = get_resource(resource_key)
        if resource:
            emoji = getattr(resource, 'emoji', '')
            label = getattr(resource, 'label', resource_key)
            return f"{emoji} {label}" if emoji else label
        return resource_key
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–æ–¥—ã –∫–æ–º–ø–∞–Ω–∏–∏
        factories = await get_factories(company_id)
        
        if not factories or not isinstance(factories, list):
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–æ–¥–æ–≤"
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–æ–¥—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –∑–∞–ø—É—Å–∫—É:
        # - complectation != None (—Å–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–Ω—ã–µ)
        # - complectation_stages == 0 (–Ω–µ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç—É—é—Ç—Å—è)
        # - is_auto = False (–Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ, —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
        # - produce = False (–Ω–µ –∑–∞–ø—É—â–µ–Ω—ã –≤—Ä—É—á–Ω—É—é)
        startable_factories = [
            f for f in factories 
            if f.get('complectation') is not None 
            and f.get('complectation_stages', 0) == 0
            and not f.get('is_auto', False)
            and not f.get('produce', False)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ produce, –∞ –Ω–µ is_working
        ]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
        groups = {}
        for factory in startable_factories:
            complectation = factory.get('complectation')
            if complectation not in groups:
                groups[complectation] = []
            groups[complectation].append(factory)
        
        # –†–∞–±–æ—Ç–∞—é—â–∏–µ –ù–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–æ–¥—ã (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
        working_manual = [
            f for f in factories 
            if f.get('is_working', False)
            and not f.get('is_auto', False)
            and f.get('complectation') is not None
        ]
        
        content = "üè≠ **–ó–∞–ø—É—Å–∫ –∑–∞–≤–æ–¥–æ–≤**\n\n"
        content += f"‚è∏Ô∏è –ó–∞–≤–æ–¥–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –∑–∞–ø—É—Å–∫—É: {len(startable_factories)}\n"
        content += f"‚ñ∂Ô∏è –ù–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(working_manual)}\n\n"
        
        if not startable_factories:
            content += "‚ùå –ù–µ—Ç –∑–∞–≤–æ–¥–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –∫ –∑–∞–ø—É—Å–∫—É.\n\n"
        else:
            content += "üì¶ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:**\n"
            for resource_key, factories_list in groups.items():
                resource_display = self.get_resource_name(resource_key)
                content += f"  {resource_display}: **{len(factories_list)}** —à—Ç. ‚è∏Ô∏è\n"
            content += "\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Å–µ:"
        
        return content
    
    async def buttons_worker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        buttons = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–æ–¥—ã
        factories = await get_factories(company_id)
        
        if factories and isinstance(factories, list):
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–æ–¥—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –∑–∞–ø—É—Å–∫—É:
            # - complectation != None (—Å–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–Ω—ã–µ)
            # - complectation_stages == 0 (–Ω–µ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç—É—é—Ç—Å—è)
            # - is_auto = False (–Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)
            # - produce = False (–Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
            startable_factories = [
                f for f in factories 
                if f.get('complectation') is not None 
                and f.get('complectation_stages', 0) == 0
                and not f.get('is_auto', False)
                and not f.get('produce', False)
            ]
            
            if startable_factories:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
                groups = {}
                for factory in startable_factories:
                    complectation = factory.get('complectation')
                    if complectation not in groups:
                        groups[complectation] = []
                    groups[complectation].append(factory)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                for resource_key, factories_list in groups.items():
                    resource_display = self.get_resource_name(resource_key)
                    buttons.append({
                        'text': f'{resource_display} ({len(factories_list)} —à—Ç.)',
                        'callback_data': callback_generator(
                            self.scene.__scene_name__,
                            'start_group',
                            resource_key
                        ),
                        'next_line': True
                    })
                
                # –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ"
                buttons.append({
                    'text': f'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ ({len(startable_factories)} —à—Ç.)',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'start_all'
                    ),
                    'next_line': True,
                    'ignore_row': True
                })
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.append({
            'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(
                self.scene.__scene_name__,
                'back_to_menu'
            ),
            'next_line': True
        })
        
        self.row_width = 1
        return buttons
    
    @Page.on_callback('start_group')
    async def start_group_handler(self, callback: CallbackQuery, args: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥—Ä—É–ø–ø—ã –∑–∞–≤–æ–¥–æ–≤"""
        # args[0] = 'start_group', args[1] = resource_key
        if not args or len(args) < 2:
            await callback.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞", show_alert=True)
            return
        
        resource_key = args[1]  # –ö–ª—é—á —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ args[1], –∞ –Ω–µ args[0]!
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–æ–¥—ã
        factories = await get_factories(company_id)
        
        if not factories:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–æ–¥–æ–≤", show_alert=True)
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"=== START GROUP DEBUG for resource: {resource_key} ===")
        for f in factories:
            if f.get('complectation') == resource_key:
                print(f"Factory {f.get('id')}: complectation={f.get('complectation')}, "
                      f"stages={f.get('complectation_stages', 0)}, "
                      f"is_auto={f.get('is_auto', False)}, "
                      f"produce={f.get('produce', False)}, "
                      f"is_working={f.get('is_working', False)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–æ–¥—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ –∑–∞–ø—É—Å–∫—É
        target_factories = [
            f['id'] for f in factories 
            if f.get('complectation') == resource_key
            and f.get('complectation_stages', 0) == 0
            and not f.get('is_auto', False)
            and not f.get('produce', False)
        ]
        
        print(f"Target factories to start: {target_factories}")
        
        if not target_factories:
            await callback.answer("‚ùå –ù–µ—Ç –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ", show_alert=True)
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≤–æ–¥—ã –≥—Ä—É–ø–ø—ã
        success_count = 0
        for factory_id in target_factories:
            result = await factory_set_produce(factory_id, True)
            if result:
                success_count += 1
        
        if success_count > 0:
            resource_display = self.get_resource_name(resource_key)
            await callback.answer(
                f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {resource_display}: {success_count} —à—Ç.",
                show_alert=True
            )
            await self.scene.update_page('factory-menu')
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", show_alert=True)
    
    @Page.on_callback('start_all')
    async def start_all_handler(self, callback: CallbackQuery, args: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–æ–¥–æ–≤"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–æ–¥—ã
        factories = await get_factories(company_id)
        
        if not factories:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–æ–¥–æ–≤", show_alert=True)
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–æ–¥—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –∑–∞–ø—É—Å–∫—É:
        # - complectation != None (—Å–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–Ω—ã–µ)
        # - complectation_stages == 0 (–Ω–µ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç—É—é—Ç—Å—è)
        # - is_auto = False (–Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)
        # - produce = False (–Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
        target_factories = [
            f['id'] for f in factories 
            if f.get('complectation') is not None 
            and f.get('complectation_stages', 0) == 0
            and not f.get('is_auto', False)
            and not f.get('produce', False)
        ]
        
        if not target_factories:
            await callback.answer("‚ùå –ù–µ—Ç –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞", show_alert=True)
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º produce=True –¥–ª—è –∫–∞–∂–¥–æ–≥–æ)
        success_count = 0
        for factory_id in target_factories:
            result = await factory_set_produce(factory_id, True)
            if result:
                success_count += 1
        
        if success_count > 0:
            await callback.answer(
                f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∑–∞–≤–æ–¥–æ–≤: {success_count}",
                show_alert=True
            )
            await self.scene.update_page('factory-menu')
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", show_alert=True)
    
    @Page.on_callback('back_to_menu')
    async def back_to_menu_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–≤–æ–¥–æ–≤"""
        await self.scene.update_page('factory-menu')
