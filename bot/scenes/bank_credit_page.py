from oms import Page
from aiogram.types import CallbackQuery, Message
from modules.ws_client import get_company, company_take_credit, company_pay_credit
from oms.utils import callback_generator
from global_modules.bank import get_credit_conditions, calc_credit
from pprint import pprint

class BankCreditPage(Page):
    
    __page_name__ = "bank-credit-page"
    
    async def content_worker(self):
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        if not company_id:
            return "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        company_data = await get_company(id=company_id)
        
        if isinstance(company_data, str):
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {company_data}"
        
        reputation = company_data.get('reputation', 0)
        credits = company_data.get('credits', [])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        credit_state = scene_data.get('credit_state', 'main')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
        if credit_state == 'main':
            return await self._main_screen(credits, reputation)
        
        # –≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞
        elif credit_state == 'input_period':
            return await self._input_period_screen(company_data)
        
        # –≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞
        elif credit_state == 'input_amount':
            return await self._input_amount_screen(scene_data)
        
        # –≠–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
        elif credit_state == 'confirm':
            return await self._confirm_screen(scene_data, reputation)
        
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    
    async def _main_screen(self, credits, reputation):
        """–û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö"""
        text = "üí≥ *–ö—Ä–µ–¥–∏—Ç—ã*\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è
        try:
            conditions = get_credit_conditions(reputation)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª–æ–≤–∏—è—Ö
            percent = conditions.percent * 100
            without_interest = conditions.without_interest
            
            text += f"*–í–∞—à–∏ —É—Å–ª–æ–≤–∏—è:*\n"
            text += f"–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {percent}%\n"
            text += f"–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {without_interest} —Ö–æ–¥(–æ–≤)\n"
            text += f"–†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation} ‚≠ê\n\n"
        except ValueError:
            text += "‚ùå *–ö—Ä–µ–¥–∏—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã*\n"
            text += f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –¥–ª—è –∫—Ä–µ–¥–∏—Ç–∞: 11\n"
            text += f"–í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {reputation} ‚≠ê\n\n"
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        if credits and len(credits) > 0:
            text += "*–ê–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã:*\n\n"
            for i, credit in enumerate(credits, 1):
                total = credit.get("total_to_pay", 0)
                paid = credit.get("paid", 0)
                need_pay = credit.get("need_pay", 0)
                steps_total = credit.get("steps_total", 0)
                steps_now = credit.get("steps_now", 0)
                
                remaining = total - paid
                steps_left = steps_total - steps_now
                
                text += f"*–ö—Ä–µ–¥–∏—Ç #{i}*\n"
                text += f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {remaining:,} üí∞ (–∏–∑ {total:,})\n".replace(",", " ")
                text += f"–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: {need_pay:,} üí∞\n".replace(",", " ")
                text += f"–•–æ–¥–æ–≤ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {steps_left}/{steps_total}\n"
                
                if need_pay > 0:
                    text += "‚ö†Ô∏è *–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞!*\n"
                
                text += "\n"
        else:
            text += "_–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤_\n"
        
        return text
    
    async def _input_period_screen(self, company_data):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ–¥ –∏ –º–∞–∫—Å–∏–º—É–º
        current_step = company_data.get('step', 0)
        max_step = company_data.get('max_step', 15)
        max_period = max_step - current_step
        
        text = f"""‚è± *–í–∑—è—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞*

*–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞*

–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç?
–ú–∏–Ω–∏–º—É–º: 1 —Ö–æ–¥
–ú–∞–∫—Å–∏–º—É–º: {max_period} —Ö–æ–¥(–æ–≤)
(–¢–µ–∫—É—â–∏–π —Ö–æ–¥: {current_step}, –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã: {max_period})"""
        
        return text
    
    async def _input_amount_screen(self, scene_data):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞"""
        credit_period = scene_data.get('credit_period', 0)
        
        text = f"""üí∞ *–í–∑—è—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞*

‚úÖ –°—Ä–æ–∫: {credit_period} —Ö–æ–¥(–æ–≤)

*–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞*

–ö–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç?
–ú–∏–Ω–∏–º—É–º: 1 000 üí∞"""
        
        return text
    
    async def _confirm_screen(self, scene_data, reputation):
        """–≠–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
        credit_period = scene_data.get('credit_period', 0)
        credit_amount = scene_data.get('credit_amount', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è
        conditions = get_credit_conditions(reputation)
        
        # –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞
        total, pay_per_turn, extra = calc_credit(
            S=credit_amount,
            free=conditions.without_interest,
            r_percent=conditions.percent,
            T=credit_period
        )
        
        percent = conditions.percent * 100
        
        text = f"""üí≥ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞*

*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞:*
–°—É–º–º–∞: {credit_amount:,} üí∞
–°—Ä–æ–∫: {credit_period} —Ö–æ–¥(–æ–≤)

*–£—Å–ª–æ–≤–∏—è:*
–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {percent}%
–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {conditions.without_interest} —Ö–æ–¥(–æ–≤)
–•–æ–¥–æ–≤ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏: {extra}

*–ö –æ–ø–ª–∞—Ç–µ:*
–í—Å–µ–≥–æ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: {total:,} üí∞
–ü–ª–∞—Ç–µ–∂ –∑–∞ —Ö–æ–¥: {pay_per_turn:,} üí∞

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∑—è—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞:""".replace(",", " ")
        
        return text
    
    async def buttons_worker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        credit_state = scene_data.get('credit_state', 'main')
        
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        if credit_state == 'main':
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            company_data = await get_company(id=company_id)
            
            if isinstance(company_data, dict):
                reputation = company_data.get('reputation', 0)
                credits = company_data.get('credits', [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç
                try:
                    get_credit_conditions(reputation)
                    buttons.append({
                        'text': 'üí∞ –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç',
                        'callback_data': callback_generator(
                            self.scene.__scene_name__,
                            'take_credit'
                        )
                    })
                except ValueError:
                    pass
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤
                if credits and len(credits) > 0:
                    for i, credit in enumerate(credits):
                        need_pay = credit.get("need_pay", 0)
                        if need_pay > 0:
                            buttons.append({
                                'text': f'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç #{i+1} ({need_pay:,} üí∞)'.replace(",", " "),
                                'callback_data': callback_generator(
                                    self.scene.__scene_name__,
                                    'pay_credit',
                                    str(i)
                                )
                            })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤ –≤–≤–æ–¥–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        elif credit_state in ['input_period', 'input_amount']:
            buttons = [
                {
                    'text': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'cancel_credit'
                    )
                }
            ]
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        elif credit_state == 'confirm':
            buttons = [
                {
                    'text': '‚úÖ –î–∞, –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'confirm_credit'
                    )
                },
                {
                    'text': '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'cancel_credit'
                    )
                }
            ]
        
        self.row_width = 1
        return buttons
    
    @Page.on_callback('take_credit')
    async def take_credit_handler(self, callback: CallbackQuery, args: list):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞ - –∑–∞–ø—Ä–æ—Å —Å—Ä–æ–∫–∞"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞
        scene_data = self.scene.get_data('scene')
        scene_data['credit_state'] = 'input_period'
        self.scene.set_data('scene', scene_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await self.scene.update_message()
        await callback.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
    
    @Page.on_callback('pay_credit')
    async def pay_credit_handler(self, callback: CallbackQuery, args: list):
        """–û–ø–ª–∞—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É args - –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç 'pay_credit', –±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π
        if args and args[0] == 'pay_credit':
            if len(args) < 2:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∏–Ω–¥–µ–∫—Å –∫—Ä–µ–¥–∏—Ç–∞", show_alert=True)
                return
            credit_index = int(args[1])
        elif args and len(args) > 0:
            credit_index = int(args[0])
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∏–Ω–¥–µ–∫—Å –∫—Ä–µ–¥–∏—Ç–∞", show_alert=True)
            return
        
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        if not company_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        company_data = await get_company(id=company_id)
        if isinstance(company_data, str):
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {company_data}", show_alert=True)
            return
        
        credits = company_data.get('credits', [])
        balance = company_data.get('balance', 0)
        
        if credit_index < 0 or credit_index >= len(credits):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        credit = credits[credit_index]
        need_pay = credit.get("need_pay", 0)
        
        if need_pay <= 0:
            await callback.answer("‚úÖ –ü–æ —ç—Ç–æ–º—É –∫—Ä–µ–¥–∏—Ç—É –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", show_alert=True)
            return
        
        if balance < need_pay:
            await callback.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {need_pay:,} üí∞\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance:,} üí∞".replace(",", " "),
                show_alert=True
            )
            return
        
        # –û–ø–ª–∞—á–∏–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç
        result = await company_pay_credit(
            company_id=str(company_id),
            credit_index=credit_index,
            amount=need_pay
        )
        
        if isinstance(result, str):
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result}", show_alert=True)
        else:
            await callback.answer(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω: {need_pay:,} üí∞".replace(",", " "), show_alert=True)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            scene_data = self.scene.get_data('scene')
            scene_data['credit_state'] = 'main'
            self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
    
    @Page.on_callback('confirm_credit')
    async def confirm_credit_handler(self, callback: CallbackQuery, args: list):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        credit_amount = scene_data.get('credit_amount', 0)
        credit_period = scene_data.get('credit_period', 0)
        
        if not company_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ë–µ—Ä–µ–º –∫—Ä–µ–¥–∏—Ç
        result = await company_take_credit(
            company_id=str(company_id),
            amount=credit_amount,
            period=credit_period
        )
        print("=========================================================")
        pprint(result)
        print("=========================================================")
        if isinstance(result, str):
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result}", show_alert=True)
        else:
            await callback.answer(
                f"‚úÖ –ö—Ä–µ–¥–∏—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                f"–°—É–º–º–∞: {credit_amount:,} üí∞\n"
                f"–°—Ä–æ–∫: {credit_period} —Ö–æ–¥(–æ–≤)".replace(",", " "),
                show_alert=True
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
            scene_data['credit_state'] = 'main'
            scene_data['credit_amount'] = 0
            scene_data['credit_period'] = 0
            self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
    
    @Page.on_callback('cancel_credit')
    async def cancel_credit_handler(self, callback: CallbackQuery, args: list):
        """–û—Ç–º–µ–Ω–∞ –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
        scene_data = self.scene.get_data('scene')
        scene_data['credit_state'] = 'main'
        scene_data['credit_amount'] = 0
        scene_data['credit_period'] = 0
        self.scene.set_data('scene', scene_data)
        
        await callback.answer("‚ùå –í–∑—è—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await self.scene.update_message()
    
    @Page.on_text('int')
    async def handle_input(self, message: Message, value: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª (—Å—Ä–æ–∫ –∏–ª–∏ —Å—É–º–º–∞)"""
        scene_data = self.scene.get_data('scene')
        credit_state = scene_data.get('credit_state', 'main')
        company_id = scene_data.get('company_id')
        
        # –í–≤–æ–¥ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞
        if credit_state == 'input_period':
            if value < 1:
                await message.answer("‚ùå –°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 —Ö–æ–¥–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞
            company_data = await get_company(id=company_id)
            if isinstance(company_data, str):
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {company_data}")
                return
            
            current_step = company_data.get('step', 0)
            max_step = company_data.get('max_step', 15)
            max_period = max_step - current_step
            
            if value > max_period:
                await message.answer(
                    f"‚ùå –°—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {max_period} —Ö–æ–¥(–æ–≤)!\n"
                    f"(–¢–µ–∫—É—â–∏–π —Ö–æ–¥: {current_step}, –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã: {max_period})"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
            scene_data['credit_period'] = value
            scene_data['credit_state'] = 'input_amount'
            self.scene.set_data('scene', scene_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            await self.scene.update_message()
        
        # –í–≤–æ–¥ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞
        elif credit_state == 'input_amount':
            if value < 1000:
                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: 1 000 üí∞")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            scene_data['credit_amount'] = value
            scene_data['credit_state'] = 'confirm'
            self.scene.set_data('scene', scene_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await self.scene.update_message()
