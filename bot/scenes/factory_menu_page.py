from oms import Page
from aiogram.types import Message, CallbackQuery
from modules.ws_client import get_factories
from oms.utils import callback_generator
from global_modules.logs import Logger
from modules.resources import get_resource_name
from .oneuser_page import OneUserPage

bot_logger = Logger.get_logger("bot")


class FactoryMenu(OneUserPage):
    __page_name__ = "factory-menu"
    
    def get_resource_name(self, resource_key: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞"""
        return get_resource_name(resource_key)
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∑–∞–≤–æ–¥–æ–≤"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        if not company_id:
            return "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–æ–¥—ã
            factories = await get_factories(company_id=company_id)
            bot_logger.info(f"get_factories response: {factories}")
            
            # get_factories –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
            if not factories or not isinstance(factories, list):
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–æ–¥–æ–≤"
            
            total = len(factories)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–æ–¥–æ–≤
            idle_factories = []  # –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ (complectation is None)
            auto_factories = {}  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ (is_auto = True) –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
            manual_factories = {}  # –ù–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ (is_auto = False, complectation not None) –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
            recomplecting_factories = {}  # –ó–∞–≤–æ–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ (complectation_stages > 0)
            
            for factory in factories:
                complectation = factory.get('complectation')
                is_auto = factory.get('is_auto', False)
                complectation_stages = factory.get('complectation_stages', 0)
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
                if complectation_stages > 0:
                    # –ó–∞–≤–æ–¥ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç—É–µ—Ç—Å—è
                    if complectation not in recomplecting_factories:
                        recomplecting_factories[complectation] = []
                    recomplecting_factories[complectation].append(factory)
                elif complectation is None:
                    idle_factories.append(factory)
                elif is_auto:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥
                    if complectation not in auto_factories:
                        auto_factories[complectation] = []
                    auto_factories[complectation].append(factory)
                else:
                    # –ù–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥
                    if complectation not in manual_factories:
                        manual_factories[complectation] = []
                    manual_factories[complectation].append(factory)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            content = "üè≠ **–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–æ–¥–∞–º–∏**\n\n"
            content += f"üìä **–í—Å–µ–≥–æ –∑–∞–≤–æ–¥–æ–≤:** {total}\n\n"
            
            # –ó–∞–≤–æ–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
            if recomplecting_factories:
                content += "‚è≥ **–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç—É—é—Ç—Å—è:**\n"
                for resource_key, factories_list in recomplecting_factories.items():
                    resource_display = self.get_resource_name(resource_key)
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ö–æ–¥–æ–≤
                    max_stages = max(f.get('complectation_stages', 0) for f in factories_list)
                    content += f"  {resource_display}: **{len(factories_list)}** —à—Ç. (–æ—Å—Ç–∞–ª–æ—Å—å {max_stages} —Ö–æ–¥(-–æ–≤))\n"
                content += "\n"
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–æ–¥—ã
            if auto_factories:
                content += "üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–æ–¥—ã** (–ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –∫–∞–∂–¥—ã–π —Ö–æ–¥):\n"
                for resource_key, factories_list in auto_factories.items():
                    resource_display = self.get_resource_name(resource_key)
                    content += f"  {resource_display}: **{len(factories_list)}** —à—Ç.\n"
                content += "\n"
            
            # –ù–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–æ–¥—ã
            if manual_factories:
                content += "‚ö° **–ù–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–æ–¥—ã:**\n"
                for resource_key, factories_list in manual_factories.items():
                    resource_display = self.get_resource_name(resource_key)
                    # –°—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
                    working = sum(1 for f in factories_list if f.get('is_working', False))
                    stopped = len(factories_list) - working
                    
                    status_text = ""
                    if working > 0 and stopped > 0:
                        status_text = f" (‚ñ∂Ô∏è {working} —Ä–∞–±–æ—Ç–∞–µ—Ç, ‚è∏Ô∏è {stopped} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)"
                    elif working > 0:
                        status_text = f" (‚ñ∂Ô∏è –≤—Å–µ —Ä–∞–±–æ—Ç–∞—é—Ç)"
                    elif stopped > 0:
                        status_text = f" (‚è∏Ô∏è –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)"
                    
                    content += f"  {resource_display}: **{len(factories_list)}** —à—Ç.{status_text}\n"
                content += "\n"
            
            # –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ –∑–∞–≤–æ–¥—ã
            if idle_factories:
                content += f"‚ö™Ô∏è **–ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—Ç:** {len(idle_factories)} —à—Ç.\n\n"
            else:
                content += "‚ö™Ô∏è **–ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—Ç:** 0 —à—Ç.\n\n"
            
            if not auto_factories and not manual_factories and not idle_factories:
                content += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≤–æ–¥–æ–≤."
            
            return content
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–æ–¥–æ–≤: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
    
    async def buttons_worker(self):
        """–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–æ–¥–∞–º–∏"""
        buttons = [
            {
                'text': '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–≤–æ–¥—ã',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'start_factories'
                )
            },
            {
                'text': 'üõí –ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥—ã',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'buy_factories'
                )
            },
            {
                'text': 'üîÑ –ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞—Ç—å',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'rekit'
                )
            }
        ]
        
        self.row_width = 2
        return buttons
    
    @Page.on_callback('start_factories')
    async def show_start_menu(self, callback: CallbackQuery, args: list):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–æ–¥–æ–≤"""
        await self.scene.update_page('factory-start-groups')
        await callback.answer()
    
    @Page.on_callback('buy_factories')
    async def show_buy_menu(self, callback: CallbackQuery, args: list):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∫—É–ø–∫–∏ –∑–∞–≤–æ–¥–æ–≤"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∫—É–ø–∫–∏ –∑–∞–≤–æ–¥–æ–≤
        await callback.answer("üöß –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞–≤–æ–¥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        # await self.scene.update_page('factory-buy')
    
    @Page.on_callback('rekit')
    async def show_rekit_menu(self, callback: CallbackQuery, args: list):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        await self.scene.update_page('factory-rekit-groups')
        await callback.answer()
