from oms import Page
from aiogram.types import Message, CallbackQuery
from modules.ws_client import get_factories, get_company_status
from oms.utils import callback_generator


class FactoryMenu(Page):
    __page_name__ = "factory-menu"
    
    async def content_worker(self):
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        if not company_id:
            return "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–±—Ä–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏
        factories_response = await get_factories(company_id=company_id)
        
        if not factories_response or "factories" not in factories_response:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–æ–¥–æ–≤"
        
        factories = factories_response["factories"]
        
        if not factories:
            return "üè≠ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–æ–¥–∞–º–∏**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–æ–¥–æ–≤.\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ª—É—á—à–µ–Ω–∏–π."
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–≤–æ–¥—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ —Ä–µ—Å—É—Ä—Å—É
        auto_factories = {}  # {resource: count}
        manual_factories = {}  # {resource: count}
        idle_factories = 0
        
        for factory in factories:
            complectation = factory.get('complectation')
            is_auto = factory.get('is_auto', False)
            is_producing = factory.get('is_produce', False)
            
            if not complectation or complectation == 'None':
                idle_factories += 1
            elif is_producing and is_auto:
                auto_factories[complectation] = auto_factories.get(complectation, 0) + 1
            elif is_producing and not is_auto:
                manual_factories[complectation] = manual_factories.get(complectation, 0) + 1
            else:
                idle_factories += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        content = f"üè≠ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–æ–¥–∞–º–∏**\n\n"
        content += f"üìä **–í—Å–µ–≥–æ –∑–∞–≤–æ–¥–æ–≤:** {len(factories)}\n\n"
        
        if auto_factories:
            content += "üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:**\n"
            for resource, count in auto_factories.items():
                content += f"  ‚Ä¢ {resource}: {count} —à—Ç.\n"
            content += "\n"
        
        if manual_factories:
            content += "‚è∏Ô∏è **–†–∞–∑–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:**\n"
            for resource, count in manual_factories.items():
                content += f"  ‚Ä¢ {resource}: {count} —à—Ç.\n"
            content += "\n"
        
        if idle_factories > 0:
            content += f"‚ö™Ô∏è **–ü—Ä–æ—Å—Ç–∞–∏–≤–∞–µ—Ç:** {idle_factories} —à—Ç.\n\n"
        
        content += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        return content
    
    async def buttons_worker(self):
        buttons = [
            {
                'text': 'üîÑ –ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞—Ç—å',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'rekit_menu'
                )
            },
            {
                'text': 'üõí –ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥—ã',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'buy_factories'
                )
            }
        ]
        
        self.row_width = 1
        return buttons
    
    @Page.on_callback('rekit_menu')
    async def show_rekit_menu(self, callback: CallbackQuery, args: list):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏ –∑–∞–≤–æ–¥–æ–≤"""
        await self.scene.update_page('factory-rekit-groups-page')
        await callback.answer()
    
    @Page.on_callback('buy_factories')
    async def show_buy_menu(self, callback: CallbackQuery, args: list):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–∞–≤–æ–¥–æ–≤"""
        await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)



