from oms import Page
from aiogram.types import Message, CallbackQuery
from modules.ws_client import company_complete_free_factories
from oms.utils import callback_generator


class FactoryRekitResource(Page):
    __page_name__ = "factory-rekit-resource-page"
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å —ç–º–æ–¥–∑–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ, –±–µ–∑ —Å—ã—Ä—å—è)
    AVAILABLE_RESOURCES = {
        # –£—Ä–æ–≤–µ–Ω—å 1
        "oil_p": {"name": "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã", "emoji": "‚õΩ"},
        "nails": {"name": "–ì–≤–æ–∑–¥–∏", "emoji": "üî©"},
        "planks": {"name": "–î–æ—Å–∫–∏", "emoji": "ü™µ"},
        "fabric": {"name": "–¢–∫–∞–Ω—å", "emoji": "üßµ"},
        # –£—Ä–æ–≤–µ–Ω—å 2
        "med_eq": {"name": "–ú–µ–¥–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "emoji": "üíâ"},
        "machine": {"name": "–°—Ç–∞–Ω–æ–∫", "emoji": "‚öôÔ∏è"},
        "furniture": {"name": "–ú–µ–±–µ–ª—å", "emoji": "ü™ë"},
        "tent": {"name": "–ü–∞–ª–∞—Ç–∫–∞", "emoji": "‚õ∫"},
        # –£—Ä–æ–≤–µ–Ω—å 3
        "barrel": {"name": "–ë–æ—á–∫–∞", "emoji": "üõ¢Ô∏è"},
        "tarp": {"name": "–ë—Ä–µ–∑–µ–Ω—Ç", "emoji": "üé™"},
        "insulation": {"name": "–ò–∑–æ–ª—è—Ü–∏—è", "emoji": "üß±"},
        "sail": {"name": "–ü–∞—Ä—É—Å", "emoji": "‚õµ"},
        # –£—Ä–æ–≤–µ–Ω—å 4
        "generator": {"name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "emoji": "‚ö°"},
        "armor": {"name": "–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç", "emoji": "ü¶∫"},
        "fridge": {"name": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", "emoji": "üßä"},
        "yacht": {"name": "–Ø—Ö—Ç–∞", "emoji": "üõ•Ô∏è"}
    }
    
    async def content_worker(self):
        """–í—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        count_data = self.scene.get_data('factory-rekit-count-page')
        rekit_count = count_data.get('rekit_count', 0)
        
        content = f"üéØ **–í—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞**\n\n"
        content += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–æ–¥–æ–≤: **{rekit_count}** —à—Ç.\n\n"
        content += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞—Ç—å –∑–∞–≤–æ–¥—ã:"
        
        return content
    
    async def buttons_worker(self):
        """–ö–Ω–æ–ø–∫–∏ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏"""
        buttons = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ —É—Ä–æ–≤–Ω—è–º (—É–±—Ä–∞–ª–∏ –±–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã)
        level1_resources = ["oil_p", "nails", "planks", "fabric"]
        level2_resources = ["med_eq", "machine", "furniture", "tent"]
        level3_resources = ["barrel", "tarp", "insulation", "sail"]
        level4_resources = ["generator", "armor", "fridge", "yacht"]
        
        # –£—Ä–æ–≤–µ–Ω—å 1
        for res_id in level1_resources:
            res_data = self.AVAILABLE_RESOURCES[res_id]
            buttons.append({
                'text': f"{res_data['emoji']} {res_data['name']}",
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'sel_res',
                    res_id
                )
            })
        
        # –£—Ä–æ–≤–µ–Ω—å 2
        for res_id in level2_resources:
            res_data = self.AVAILABLE_RESOURCES[res_id]
            buttons.append({
                'text': f"{res_data['emoji']} {res_data['name']}",
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'sel_res',
                    res_id
                )
            })
        
        # –£—Ä–æ–≤–µ–Ω—å 3
        for res_id in level3_resources:
            res_data = self.AVAILABLE_RESOURCES[res_id]
            buttons.append({
                'text': f"{res_data['emoji']} {res_data['name']}",
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'sel_res',
                    res_id
                )
            })
        
        # –£—Ä–æ–≤–µ–Ω—å 4
        for res_id in level4_resources:
            res_data = self.AVAILABLE_RESOURCES[res_id]
            buttons.append({
                'text': f"{res_data['emoji']} {res_data['name']}",
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'sel_res',
                    res_id
                )
            })
        
        buttons.append({
            'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(
                self.scene.__scene_name__,
                'back'
            )
        })
        
        self.row_width = 2
        return buttons
    
    @Page.on_callback('sel_res')
    async def select_resource(self, callback: CallbackQuery, args: list):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ—Å—É—Ä—Å –Ω–µ —É–∫–∞–∑–∞–Ω", show_alert=True)
            return
        
        resource_id = args[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—É—Ä—Å–µ
        resource_data = self.AVAILABLE_RESOURCES.get(resource_id)
        if not resource_data:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å", show_alert=True)
            return
        
        new_resource = resource_data['name']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        count_data = self.scene.get_data('factory-rekit-count-page')
        rekit_count = count_data.get('rekit_count', 0)
        factory_ids = count_data.get('factory_ids', [])
        selected_group = count_data.get('selected_group', '')
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ä—ã–π —Ä–µ—Å—É—Ä—Å –∏–∑ –≥—Ä—É–ø–ø—ã
        parts = selected_group.split('_')
        if len(parts) == 3:
            old_resource = parts[0] if parts[0] != '–ü—Ä–æ—Å—Ç–æ–π' else None
        else:
            old_resource = None
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
        try:
            response = await company_complete_free_factories(
                company_id=company_id,
                find_resource=old_resource,
                new_resource=new_resource,
                count=rekit_count,
                produce_status=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç: –º–æ–∂–µ—Ç –±—ã—Ç—å None, dict —Å result, –∏–ª–∏ dict —Å error
            if response is None:
                # API –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç, –Ω–æ –∑–∞–ø—Ä–æ—Å –º–æ–≥ –ø—Ä–æ–π—Ç–∏
                await callback.answer(
                    f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {rekit_count} –∑–∞–≤–æ–¥–æ–≤ ‚Üí {new_resource}",
                    show_alert=True
                )
                await self.scene.update_page('factory-menu')
            elif isinstance(response, dict):
                if response.get('result') == True or response.get('success') == True:
                    await callback.answer(
                        f"‚úÖ –ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–æ {rekit_count} –∑–∞–≤–æ–¥–æ–≤ –Ω–∞ {new_resource}",
                        show_alert=True
                    )
                    await self.scene.update_page('factory-menu')
                elif 'error' in response:
                    await callback.answer(f"‚ùå {response['error']}", show_alert=True)
                else:
                    # –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
                    await callback.answer(
                        f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: {rekit_count} –∑–∞–≤–æ–¥–æ–≤ ‚Üí {new_resource}",
                        show_alert=True
                    )
                    await self.scene.update_page('factory-menu')
            else:
                # –°—Ç—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
                await callback.answer(
                    f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {rekit_count} –∑–∞–≤–æ–¥–æ–≤ ‚Üí {new_resource}",
                    show_alert=True
                )
                await self.scene.update_page('factory-menu')
                
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    @Page.on_callback('back')
    async def back_to_count(self, callback: CallbackQuery, args: list):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        await self.scene.update_page('factory-rekit-count-page')
        await callback.answer()
