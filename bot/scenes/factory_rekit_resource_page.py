from oms import Page
from aiogram.types import Message, CallbackQuery
from modules.ws_client import company_complete_free_factories
from oms.utils import callback_generator


class FactoryRekitResource(Page):
    __page_name__ = "factory-rekit-resource-page"
    
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ ID
    AVAILABLE_RESOURCES = {
        "oil": "–ù–µ—Ñ—Ç—å",
        "metal": "–ú–µ—Ç–∞–ª–ª", 
        "wood": "–î–µ—Ä–µ–≤–æ",
        "cotton": "–•–ª–æ–ø–æ–∫",
        "oil_p": "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
        "nails": "–ì–≤–æ–∑–¥–∏",
        "planks": "–î–æ—Å–∫–∏",
        "fabric": "–¢–∫–∞–Ω—å",
        "med_eq": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
        "machine": "–°—Ç–∞–Ω–æ–∫",
        "furniture": "–ú–µ–±–µ–ª—å",
        "tent": "–ü–∞–ª–∞—Ç–∫–∞",
        "barrel": "–ë–æ—á–∫–∞",
        "tarp": "–ë—Ä–µ–∑–µ–Ω—Ç",
        "insulation": "–ò–∑–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª",
        "sail": "–ü–∞—Ä—É—Å",
        "generator": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
        "armor": "–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç",
        "fridge": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
        "yacht": "–ü–∞—Ä—É—Å–Ω–∞—è —è—Ö—Ç–∞"
    }
    
    async def content_worker(self):
        """–í—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        count_data = self.scene.get_data('factory-rekit-count-page')
        rekit_count = count_data.get('rekit_count', 0)
        
        content = f"üéØ **–í—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞**\n\n"
        content += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–æ–¥–æ–≤: **{rekit_count}** —à—Ç.\n\n"
        content += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞—Ç—å –∑–∞–≤–æ–¥—ã:"
        
        return content
    
    async def buttons_worker(self):
        """–ö–Ω–æ–ø–∫–∏ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏"""
        buttons = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
        basic_resources = [("oil", "–ù–µ—Ñ—Ç—å"), ("metal", "–ú–µ—Ç–∞–ª–ª"), ("wood", "–î–µ—Ä–µ–≤–æ"), ("cotton", "–•–ª–æ–ø–æ–∫")]
        level1_resources = [("oil_p", "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã"), ("nails", "–ì–≤–æ–∑–¥–∏"), ("planks", "–î–æ—Å–∫–∏"), ("fabric", "–¢–∫–∞–Ω—å")]
        level2_resources = [("med_eq", "–ú–µ–¥–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"), ("machine", "–°—Ç–∞–Ω–æ–∫"), ("furniture", "–ú–µ–±–µ–ª—å"), ("tent", "–ü–∞–ª–∞—Ç–∫–∞")]
        level3_resources = [("barrel", "–ë–æ—á–∫–∞"), ("tarp", "–ë—Ä–µ–∑–µ–Ω—Ç"), ("insulation", "–ò–∑–æ–ª—è—Ü–∏—è"), ("sail", "–ü–∞—Ä—É—Å")]
        level4_resources = [("generator", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä"), ("armor", "–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç"), ("fridge", "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"), ("yacht", "–Ø—Ö—Ç–∞")]
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        for res_id, res_name in basic_resources:
            buttons.append({
                'text': f"‚ö™Ô∏è {res_name}",
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'sel_res',
                    res_id
                )
            })
        
        # –£—Ä–æ–≤–µ–Ω—å 1
        for res_id, res_name in level1_resources:
            buttons.append({
                'text': f"üü¢ {res_name}",
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'sel_res',
                    res_id
                )
            })
        
        # –£—Ä–æ–≤–µ–Ω—å 2
        for res_id, res_name in level2_resources:
            buttons.append({
                'text': f"üü° {res_name}",
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'sel_res',
                    res_id
                )
            })
        
        # –£—Ä–æ–≤–µ–Ω—å 3
        for res_id, res_name in level3_resources:
            buttons.append({
                'text': f"üü† {res_name}",
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'sel_res',
                    res_id
                )
            })
        
        # –£—Ä–æ–≤–µ–Ω—å 4
        for res_id, res_name in level4_resources:
            buttons.append({
                'text': f"üî¥ {res_name}",
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'sel_res',
                    res_id
                )
            })
        
        buttons.append({
            'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(
                self.scene.__scene_name__,
                'back'
            )
        })
        
        self.row_width = 2
        return buttons
    
    @Page.on_callback('sel_res')
    async def select_resource(self, callback: CallbackQuery, args: list):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ—Å—É—Ä—Å –Ω–µ —É–∫–∞–∑–∞–Ω", show_alert=True)
            return
        
        resource_id = args[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
        new_resource = self.AVAILABLE_RESOURCES.get(resource_id, resource_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        count_data = self.scene.get_data('factory-rekit-count-page')
        rekit_count = count_data.get('rekit_count', 0)
        factory_ids = count_data.get('factory_ids', [])
        selected_group = count_data.get('selected_group', '')
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ä—ã–π —Ä–µ—Å—É—Ä—Å –∏–∑ –≥—Ä—É–ø–ø—ã
        parts = selected_group.split('_')
        if len(parts) == 3:
            old_resource = parts[0] if parts[0] != '–ü—Ä–æ—Å—Ç–æ–π' else None
        else:
            old_resource = None
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
        try:
            response = await company_complete_free_factories(
                company_id=company_id,
                find_resource=old_resource,
                new_resource=new_resource,
                count=rekit_count,
                produce_status=True  # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
            )
            
            if response and response.get('result'):
                await callback.answer(
                    f"‚úÖ –ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–æ {rekit_count} –∑–∞–≤–æ–¥–æ–≤ –Ω–∞ {new_resource}",
                    show_alert=True
                )
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞–≤–æ–¥–æ–≤
                await self.scene.update_page('factory-menu')
            else:
                error_msg = response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", show_alert=True)
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏: {str(e)}", show_alert=True)
    
    @Page.on_callback('back')
    async def back_to_count(self, callback: CallbackQuery, args: list):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        await self.scene.update_page('factory-rekit-count-page')
        await callback.answer()
