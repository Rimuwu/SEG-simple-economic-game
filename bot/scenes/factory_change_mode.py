from oms import Page
from aiogram.types import CallbackQuery
from oms.utils import callback_generator
from modules.ws_client import get_factories, factory_set_produce, factory_set_auto
from modules.resources import get_resource
from global_modules.logs import Logger

bot_logger = Logger.get_logger("bot")


class FactoryChangeMode(Page):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∑–∞–≤–æ–¥–æ–≤"""
    
    __page_name__ = "factory-change-mode"
    
    def get_resource_name(self, resource_key):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–µ—Å—É—Ä—Å–∞"""
        if resource_key is None:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å"
        
        resource = get_resource(resource_key)
        if resource:
            emoji = getattr(resource, 'emoji', '')
            label = getattr(resource, 'label', resource_key)
            return f"{emoji} {label}" if emoji else label
        return resource_key
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        change_mode_stage = scene_data.get('change_mode_stage', 'select_type')
        error_message = scene_data.get('change_mode_error')
        
        # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if error_message:
            scene_data.pop('change_mode_error', None)
            await self.scene.set_data('scene', scene_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–æ–¥—ã –∫–æ–º–ø–∞–Ω–∏–∏
        factories = await get_factories(company_id)
        
        if not factories or not isinstance(factories, list):
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–æ–¥–æ–≤"
        
        if change_mode_stage == 'select_type':
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–æ–¥—ã –ø–æ —Ç–∏–ø—É (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –Ω–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)
            # –¢–æ–ª—å–∫–æ —Å–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≤–æ–¥—ã (complectation != None) –∏ –Ω–µ –≤ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
            auto_factories = [
                f for f in factories 
                if f.get('is_auto', False) 
                and f.get('complectation') is not None
                and f.get('complectation_stages', 0) == 0
            ]
            manual_factories = [
                f for f in factories 
                if not f.get('is_auto', False) 
                and f.get('complectation') is not None
                and f.get('complectation_stages', 0) == 0
            ]
            
            content = "üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞**\n\n"
            content += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
            content += f"ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ:** {len(auto_factories)} —à—Ç.\n"
            content += f"   _–ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏_\n\n"
            content += f"üë§ **–ù–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ:** {len(manual_factories)} —à—Ç.\n"
            content += f"   _–ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏_\n"
            
            return content
            
        elif change_mode_stage == 'select_group':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            factory_type = scene_data.get('change_mode_type')
            
            if factory_type == 'auto':
                filtered_factories = [
                    f for f in factories 
                    if f.get('is_auto', False) 
                    and f.get('complectation') is not None
                    and f.get('complectation_stages', 0) == 0
                ]
                mode_text = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö"
                target_mode = "–Ω–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
            else:
                filtered_factories = [
                    f for f in factories 
                    if not f.get('is_auto', False) 
                    and f.get('complectation') is not None
                    and f.get('complectation_stages', 0) == 0
                ]
                mode_text = "–Ω–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö"
                target_mode = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
            groups = {}
            for factory in filtered_factories:
                complectation = factory.get('complectation')
                if complectation not in groups:
                    groups[complectation] = []
                groups[complectation].append(factory)
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            content = f"üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ {mode_text} –∑–∞–≤–æ–¥–æ–≤**\n\n"
            content += f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ {target_mode} —Ä–µ–∂–∏–º:\n\n"
            
            if not groups:
                content += f"‚ùå –ù–µ—Ç {mode_text} –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"
            else:
                content += "üì¶ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:**\n"
                for resource_key, factories_list in groups.items():
                    resource_name = self.get_resource_name(resource_key)
                    content += f"‚Ä¢ {resource_name}: **{len(factories_list)}** —à—Ç.\n"
            
            return content
            
        elif change_mode_stage == 'enter_count':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–æ–¥–æ–≤
            factory_type = scene_data.get('change_mode_type')
            resource_key = scene_data.get('change_mode_resource')
            
            if factory_type == 'auto':
                mode_text = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö"
                target_mode = "–Ω–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
            else:
                mode_text = "–Ω–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö"
                target_mode = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≤–æ–¥–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            if factory_type == 'auto':
                filtered_factories = [
                    f for f in factories 
                    if f.get('is_auto', False) 
                    and f.get('complectation') is not None
                    and f.get('complectation_stages', 0) == 0
                ]
            else:
                filtered_factories = [
                    f for f in factories 
                    if not f.get('is_auto', False) 
                    and f.get('complectation') is not None
                    and f.get('complectation_stages', 0) == 0
                ]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ—Å—É—Ä—Å—É
            if resource_key != 'all':
                available_count = sum(1 for f in filtered_factories if f.get('complectation') == resource_key)
                resource_name = self.get_resource_name(resource_key)
            else:
                available_count = len(filtered_factories)
                resource_name = "–í—Å–µ –∑–∞–≤–æ–¥—ã"
            
            content = f"üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ {mode_text} –∑–∞–≤–æ–¥–æ–≤**\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if error_message:
                content += f"‚ùå **{error_message}**\n\n"
            
            content += f"–ì—Ä—É–ø–ø–∞: {resource_name}\n"
            content += f"–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤–æ–¥–æ–≤: **{available_count}**\n\n"
            content += f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ {target_mode} —Ä–µ–∂–∏–º:"
            
            return content
    
    async def buttons_worker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        change_mode_stage = scene_data.get('change_mode_stage', 'select_type')
        
        buttons = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–æ–¥—ã
        factories = await get_factories(company_id)
        
        if not factories or not isinstance(factories, list):
            buttons.append({
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back_to_menu'
                ),
                'next_line': True
            })
            return buttons
        
        if change_mode_stage == 'select_type':
            # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–≤–æ–¥–æ–≤
            auto_factories = [
                f for f in factories 
                if f.get('is_auto', False) 
                and f.get('complectation') is not None
                and f.get('complectation_stages', 0) == 0
            ]
            manual_factories = [
                f for f in factories 
                if not f.get('is_auto', False) 
                and f.get('complectation') is not None
                and f.get('complectation_stages', 0) == 0
            ]
            
            if auto_factories:
                buttons.append({
                    'text': f'ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ ({len(auto_factories)})',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_type',
                        'auto'
                    ),
                    'ignore_row': True
                })
            
            if manual_factories:
                buttons.append({
                    'text': f'üë§ –ù–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ ({len(manual_factories)})',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_type',
                        'manual'
                    ),
                    'ignore_row': True
                })
            
        elif change_mode_stage == 'select_group':
            # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤
            factory_type = scene_data.get('change_mode_type')
            
            if factory_type == 'auto':
                filtered_factories = [
                    f for f in factories 
                    if f.get('is_auto', False) 
                    and f.get('complectation') is not None
                    and f.get('complectation_stages', 0) == 0
                ]
            else:
                filtered_factories = [
                    f for f in factories 
                    if not f.get('is_auto', False) 
                    and f.get('complectation') is not None
                    and f.get('complectation_stages', 0) == 0
                ]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
            groups = {}
            for factory in filtered_factories:
                complectation = factory.get('complectation')
                if complectation not in groups:
                    groups[complectation] = []
                groups[complectation].append(factory)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            for resource_key, factories_list in sorted(groups.items()):
                resource_name = self.get_resource_name(resource_key)
                buttons.append({
                    'text': f'{resource_name} ({len(factories_list)})',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_group',
                        resource_key
                    ),
                    'ignore_row': True
                })
            
            # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –∑–∞–≤–æ–¥—ã"
            if len(groups) > 1:
                total_count = sum(len(factories_list) for factories_list in groups.values())
                buttons.append({
                    'text': f'‚úÖ –í—Å–µ –∑–∞–≤–æ–¥—ã ({total_count})',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_group',
                        'all'
                    ),
                    'ignore_row': True
                })
        
        elif change_mode_stage == 'enter_count':
            # –ù–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            pass
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.append({
            'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(
                self.scene.__scene_name__,
                'back' if change_mode_stage in ['select_group', 'enter_count'] else 'back_to_menu'
            ),
            'next_line': True
        })
        
        self.row_width = 1
        return buttons
    
    @Page.on_callback('select_type')
    async def select_type_handler(self, callback: CallbackQuery, args: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–≤–æ–¥–æ–≤"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω", show_alert=True)
            return
        
        factory_type = args[1]  # 'auto' –∏–ª–∏ 'manual'
        scene_data = self.scene.get_data('scene')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø
        scene_data['change_mode_type'] = factory_type
        scene_data['change_mode_stage'] = 'select_group'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('select_group')
    async def select_group_handler(self, callback: CallbackQuery, args: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞", show_alert=True)
            return
        
        resource_key = args[1]  # –∫–ª—é—á —Ä–µ—Å—É—Ä—Å–∞ –∏–ª–∏ 'all'
        scene_data = self.scene.get_data('scene')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å
        scene_data['change_mode_resource'] = resource_key
        scene_data['change_mode_stage'] = 'enter_count'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_text('int')
    async def handle_text_input(self, message, value: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–æ–¥–æ–≤"""
        scene_data = self.scene.get_data('scene')
        
        if value <= 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            scene_data['change_mode_error'] = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        scene_data['change_mode_count'] = value
        await self.scene.set_data('scene', scene_data)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
        await self._perform_mode_change()
    
    async def _perform_mode_change(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–ª—è –∑–∞–≤–æ–¥–æ–≤"""
        scene_data = self.scene.get_data('scene')
        
        resource_key = scene_data.get('change_mode_resource')
        count = scene_data.get('change_mode_count')
        factory_type = scene_data.get('change_mode_type')
        company_id = scene_data.get('company_id')
        
        if not all([company_id, factory_type, resource_key, count]):
            await self._set_status("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", "error")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–æ–¥—ã
        factories = await get_factories(company_id)
        
        if not factories or not isinstance(factories, list):
            await self._set_status("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–≤–æ–¥—ã", "error")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–æ–¥—ã –ø–æ —Ç–∏–ø—É
        if factory_type == 'auto':
            filtered_factories = [
                f for f in factories 
                if f.get('is_auto', False) 
                and f.get('complectation') is not None
                and f.get('complectation_stages', 0) == 0
            ]
            target_auto = False  # –î–µ–ª–∞–µ–º –Ω–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏
            action_text = "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º"
        else:
            filtered_factories = [
                f for f in factories 
                if not f.get('is_auto', False) 
                and f.get('complectation') is not None
                and f.get('complectation_stages', 0) == 0
            ]
            target_auto = True  # –î–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏
            action_text = "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º"
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–µ
        if resource_key != 'all':
            target_factories = [
                f for f in filtered_factories 
                if f.get('complectation') == resource_key
            ]
        else:
            target_factories = filtered_factories
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if count > len(target_factories):
            scene_data['change_mode_error'] = f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {len(target_factories)} –∑–∞–≤–æ–¥–æ–≤"
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
            return
        
        # –ë–µ—Ä—ë–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–æ–¥–æ–≤
        target_factories = target_factories[:count]
        
        if not target_factories:
            await self._set_status("‚ùå –ù–µ—Ç –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", "error")
            await self.scene.update_page('factory-menu')
            return
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≤–æ–¥–∞
        success_count = 0
        failed_count = 0
        
        for factory in target_factories:
            factory_id = factory.get('id')
            if not factory_id:
                failed_count += 1
                continue
            
            try:
                if target_auto:
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
                    result = await factory_set_auto(factory_id=factory_id, is_auto=True)
                else:
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
                    # –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –Ω–µ-–∞–≤—Ç–æ, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                    result = await factory_set_auto(factory_id=factory_id, is_auto=False)
                
                if result and result.get('success'):
                    success_count += 1
                else:
                    failed_count += 1
                    bot_logger.error(f"Failed to change mode for factory {factory_id}: {result}")
            except Exception as e:
                failed_count += 1
                bot_logger.error(f"Error changing mode for factory {factory_id}: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if success_count > 0:
            message = f"‚úÖ –ó–∞–≤–æ–¥–æ–≤ {action_text}: {success_count}"
            if failed_count > 0:
                message += f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {failed_count}"
            await self._set_status(message, "success")
        else:
            await self._set_status(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–≤–æ–¥–∞", "error")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        scene_data['change_mode_stage'] = 'select_type'
        scene_data.pop('change_mode_type', None)
        scene_data.pop('change_mode_resource', None)
        scene_data.pop('change_mode_count', None)
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_page('factory-menu')
    
    def _set_status(self, message: str, level: str = "info"):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        scene_data = self.scene.get_data('scene')
        if not scene_data:
            scene_data = {}
        scene_data['status'] = message
        scene_data['status_level'] = level
        return self.scene.set_data('scene', scene_data)
    
    @Page.on_callback('change_group')
    async def change_group_handler(self, callback: CallbackQuery, args: list):
        """–£–°–¢–ê–†–ï–í–®–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è select_group + —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥"""
        # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω
        await callback.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", show_alert=True)
    
    @Page.on_callback('back')
    async def back_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç—Ç–∞–ø—É"""
        scene_data = self.scene.get_data('scene')
        current_stage = scene_data.get('change_mode_stage', 'select_type')
        
        if current_stage == 'enter_count':
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
            scene_data['change_mode_stage'] = 'select_group'
            scene_data.pop('change_mode_resource', None)
            scene_data.pop('change_mode_count', None)
            scene_data.pop('change_mode_error', None)
        elif current_stage == 'select_group':
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
            scene_data['change_mode_stage'] = 'select_type'
            scene_data.pop('change_mode_type', None)
        
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('back_to_menu')
    async def back_to_menu_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–≤–æ–¥–æ–≤"""
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        scene_data = self.scene.get_data('scene')
        scene_data.pop('change_mode_stage', None)
        scene_data.pop('change_mode_type', None)
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_page('factory-menu')
        await callback.answer()
