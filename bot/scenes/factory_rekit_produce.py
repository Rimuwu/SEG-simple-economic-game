from oms import Page
from aiogram.types import CallbackQuery
from oms.utils import callback_generator
from global_modules.logs import Logger
from global_modules.load_config import ALL_CONFIGS, Resources
from modules.ws_client import company_complete_free_factories, get_factories, factory_set_auto, factory_recomplectation

bot_logger = Logger.get_logger("bot")
RESOURCES: Resources = ALL_CONFIGS["resources"]


class FactoryRekitProduce(Page):
    __page_name__ = "factory-rekit-produce"
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å –∫—Ä–∞—Ñ—Ç–æ–º"""
        scene_data = self.scene.get_data('scene')
        
        group_type = scene_data.get('rekit_group')
        count = scene_data.get('rekit_count')
        resource_key = scene_data.get('rekit_resource')
        
        if not all([group_type, count, resource_key]):
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–µ
        resource = RESOURCES.get_resource(resource_key)
        if not resource:
            return "‚ùå –û—à–∏–±–∫–∞: —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        content = "üîÑ **–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–≤–æ–¥–æ–≤**\n\n"
        content += f"–ü—Ä–æ–¥—É–∫—Ç: {resource.emoji} {resource.label}\n"
        content += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–æ–¥–æ–≤: {count}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ñ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
        if hasattr(resource, 'production') and resource.production:
            content += "üìã **–ö—Ä–∞—Ñ—Ç:**\n"
            materials = resource.production.materials
            output = resource.production.output
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            materials_list = []
            for mat_key, mat_count in materials.items():
                mat_resource = RESOURCES.get_resource(mat_key)
                if mat_resource:
                    materials_list.append(f"{mat_count}√ó {mat_resource.emoji} {mat_resource.label}")
            
            if materials_list:
                content += "   " + " + ".join(materials_list) + f" ‚Üí {output}√ó {resource.emoji} {resource.label}\n\n"
        
        content += "‚è≥ _–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–π–º—ë—Ç 1 —Ö–æ–¥_\n\n"
        content += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:\n\n"
        content += "üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π** - –∑–∞–≤–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å –∫–∞–∂–¥—ã–π —Ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        content += "üéØ **–ù–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π** - –∑–∞–≤–æ–¥ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é"
        
        return content
    
    async def buttons_worker(self):
        """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
        buttons = [
            {
                'text': 'üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'produce_auto'
                ),
                'ignore_row': True
            },
            {
                'text': 'üéØ –ù–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'produce_manual'
                ),
                'ignore_row': True
            },
            {
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back'
                ),
                'next_line': True
            }
        ]
        
        return buttons
    
    @Page.on_callback('produce_auto')
    async def set_auto_produce(self, callback: CallbackQuery, args: list):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"""
        await self._complete_recomplectation(callback, is_auto=True)
    
    @Page.on_callback('produce_manual')
    async def set_manual_produce(self, callback: CallbackQuery, args: list):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"""
        await self._complete_recomplectation(callback, is_auto=False)
    
    async def _complete_recomplectation(self, callback: CallbackQuery, is_auto: bool):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
        scene_data = self.scene.get_data('scene')
        
        group_type = scene_data.get('rekit_group')
        count = int(scene_data.get('rekit_count'))
        resource_key = scene_data.get('rekit_resource')
        company_id = scene_data.get('company_id')
        
        if not company_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: ID –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
        bot_logger.info(f"Fetching factories for recomplectation: company_id={company_id}, group_type={group_type}")
        all_factories = await get_factories(company_id=company_id)
        
        if not all_factories or not isinstance(all_factories, list):
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–æ–¥–æ–≤", show_alert=True)
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–æ–¥—ã –ø–æ –≥—Ä—É–ø–ø–µ
        if group_type == 'idle':
            target_factories = [f for f in all_factories if f.get('complectation') is None]
        else:
            target_factories = [f for f in all_factories if f.get('complectation') == group_type]
        
        bot_logger.info(f"Found {len(target_factories)} factories to recomplete")
        
        if not target_factories:
            await callback.answer("‚ùå –ù–µ—Ç –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏", show_alert=True)
            return
        
        if len(target_factories) < count:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–≤–æ–¥–æ–≤! –î–æ—Å—Ç—É–ø–Ω–æ: {len(target_factories)}", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_auto –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≤–æ–¥–∞
        success_count = 0
        for i in range(min(count, len(target_factories))):
            factory = target_factories[i]
            factory_id = factory['id']
            
            # –ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è
            rekit_result = await factory_recomplectation(factory_id, resource_key)
            if rekit_result and isinstance(rekit_result, dict) and rekit_result.get('success'):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_auto
                auto_result = await factory_set_auto(factory_id, is_auto)
                if auto_result:
                    success_count += 1
                    bot_logger.info(f"Successfully recompleted and set is_auto={is_auto} for factory {factory_id}")
                else:
                    bot_logger.error(f"Failed to set is_auto for factory {factory_id}")
            else:
                bot_logger.error(f"Failed to recomplete factory {factory_id}: {rekit_result}")
        
        if success_count > 0:
            resource = RESOURCES.get_resource(resource_key)
            resource_name = f"{resource.emoji} {resource.label}" if resource else resource_key
            mode_text = "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if is_auto else "üéØ –ù–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –∏–∑ lvl (—É—Ä–æ–≤–µ–Ω—å —Ä–µ—Å—É—Ä—Å–∞)
            rekit_time = resource.lvl if resource else 1
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            scene_data.pop('rekit_group', None)
            scene_data.pop('rekit_count', None)
            scene_data.pop('rekit_resource', None)
            await self.scene.set_data('scene', scene_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
            if rekit_time > 0:
                await callback.message.edit_text(
                    f"‚úÖ –ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–æ {success_count} –∑–∞–≤–æ–¥–æ–≤ –Ω–∞ {resource_name}!\n"
                    f"–†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {mode_text}\n"
                    f"‚è≥ –ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–π–º—ë—Ç {rekit_time} —Ö–æ–¥(-–æ–≤)"
                )
            else:
                await callback.message.edit_text(
                    f"‚úÖ –ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–æ {success_count} –∑–∞–≤–æ–¥–æ–≤ –Ω–∞ {resource_name}!\n"
                    f"–†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {mode_text}\n"
                    f"‚ú® –ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!"
                )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞–≤–æ–¥–æ–≤
            await self.scene.update_page('factory-menu')
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞—Ç—å –∑–∞–≤–æ–¥—ã", show_alert=True)
        
        await callback.answer()
    
    @Page.on_callback('back')
    async def back_to_resource(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ—Å—É—Ä—Å–∞"""
        await self.scene.update_page('factory-rekit-resource')
        await callback.answer()
