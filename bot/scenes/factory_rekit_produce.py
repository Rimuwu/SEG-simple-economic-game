from oms import Page
from aiogram.types import CallbackQuery
from oms.utils import callback_generator
from global_modules.logs import Logger
from modules.ws_client import company_complete_free_factories, get_factories, factory_set_auto
from modules.resources import RESOURCES

bot_logger = Logger.get_logger("bot")


class FactoryRekitProduce(Page):
    __page_name__ = "factory-rekit-produce"
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
        scene_data = self.scene.get_data('scene')
        
        group_type = scene_data.get('rekit_group')
        count = scene_data.get('rekit_count')
        resource = scene_data.get('rekit_resource')
        
        if not all([group_type, count, resource]):
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        resource_info = RESOURCES.get(resource, {"name": resource, "emoji": "üì¶"})
        
        content = "üîÑ **–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–≤–æ–¥–æ–≤**\n\n"
        content += f"–†–µ—Å—É—Ä—Å: {resource_info['emoji']} {resource_info['name']}\n"
        content += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n\n"
        content += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:\n\n"
        content += "üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ** - –∑–∞–≤–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å –∫–∞–∂–¥—ã–π —Ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        content += "üéØ **–†–∞–∑–æ–≤–æ–µ** - –∑–∞–≤–æ–¥ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
        
        return content
    
    async def buttons_worker(self):
        """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
        buttons = [
            {
                'text': 'üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'produce_auto'
                )
            },
            {
                'text': 'üéØ –†–∞–∑–æ–≤–æ–µ',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'produce_manual'
                )
            },
            {
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back'
                )
            }
        ]
        
        self.row_width = 1
        return buttons
    
    @Page.on_callback('produce_auto')
    async def set_auto_produce(self, callback: CallbackQuery, args: list):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"""
        await self._complete_recomplectation(callback, produce_status=True)
    
    @Page.on_callback('produce_manual')
    async def set_manual_produce(self, callback: CallbackQuery, args: list):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"""
        await self._complete_recomplectation(callback, produce_status=False)
    
    async def _complete_recomplectation(self, callback: CallbackQuery, produce_status: bool):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
        scene_data = self.scene.get_data('scene')
        
        group_type = scene_data.get('rekit_group')
        count = int(scene_data.get('rekit_count'))
        resource = scene_data.get('rekit_resource')
        company_id = scene_data.get('company_id')
        
        if not company_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: ID –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º find_resource
        find_resource = None if group_type == 'idle' else group_type
        
        bot_logger.info(f"Recomplecting factories: company_id={company_id}, find={find_resource}, new={resource}, count={count}, is_auto={produce_status}")
        
        # –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ (–í–°–ï–ì–î–ê —Å produce_status=False –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–≤–æ–¥–æ–≤)
        result = await company_complete_free_factories(
            company_id=company_id,
            new_resource=resource,
            count=count,
            find_resource=find_resource,
            produce_status=False  # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞–≤–æ–¥—ã (produce=False)
        )
        
        bot_logger.info(f"API response: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(result, dict) and result.get('success'):
            # –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_auto –Ω–∞ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≤–æ–¥—ã
            if produce_status:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                factories_response = await get_factories(company_id=company_id)
                if factories_response and isinstance(factories_response, dict) and "factories" in factories_response:
                    factories = factories_response["factories"]
                    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–æ–¥—ã —Å –Ω—É–∂–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–µ–π –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_auto
                    for factory in factories:
                        if factory.get('complectation') == resource and not factory.get('is_auto'):
                            await factory_set_auto(factory['id'], True)
                            bot_logger.info(f"Set auto=True for factory {factory['id']}")
            
            resource_info = RESOURCES.get(resource, {"name": resource, "emoji": "üì¶"})
            mode_text = "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ" if produce_status else "üéØ –†–∞–∑–æ–≤–æ–µ"
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            scene_data.pop('rekit_group', None)
            scene_data.pop('rekit_count', None)
            scene_data.pop('rekit_resource', None)
            await self.scene.set_data('scene', scene_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
            await callback.message.edit_text(
                f"‚úÖ –ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–æ {count} –∑–∞–≤–æ–¥–æ–≤ –Ω–∞ {resource_info['emoji']} {resource_info['name']}!\n"
                f"–†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {mode_text}"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞–≤–æ–¥–æ–≤
            await self.scene.update_page('factory-menu')
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if isinstance(result, dict) else '–û—à–∏–±–∫–∞ API'
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", show_alert=True)
        
        await callback.answer()
    
    @Page.on_callback('back')
    async def back_to_resource(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ—Å—É—Ä—Å–∞"""
        await self.scene.update_page('factory-rekit-resource')
        await callback.answer()
