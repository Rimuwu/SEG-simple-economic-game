from oms import Page
from aiogram.types import Message, CallbackQuery
from modules.ws_client import get_factories
from oms.utils import callback_generator


class FactoryRekitGroups(Page):
    __page_name__ = "factory-rekit-groups-page"
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã –∑–∞–≤–æ–¥–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        if not company_id:
            return "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–±—Ä–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏
        factories_response = await get_factories(company_id=company_id)
        
        if not factories_response or "factories" not in factories_response:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–æ–¥–æ–≤"
        
        factories = factories_response["factories"]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–≤–æ–¥—ã
        groups = {}  # {f"{resource}_{is_auto}_{is_producing}": [factory_ids]}
        
        for factory in factories:
            factory_id = factory.get('id')
            complectation = factory.get('complectation', 'None')
            is_auto = factory.get('is_auto', False)
            is_producing = factory.get('is_produce', False)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
            if not complectation or complectation == 'None':
                resource = '–ü—Ä–æ—Å—Ç–æ–π'
                status_key = f"{resource}_{False}_{False}"
            elif is_producing and is_auto:
                status_key = f"{complectation}_{True}_{True}"
            elif is_producing and not is_auto:
                status_key = f"{complectation}_{False}_{True}"
            else:
                status_key = f"{complectation}_{False}_{False}"
            
            if status_key not in groups:
                groups[status_key] = []
            groups[status_key].append(factory_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –≤ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await self.update_data('factory_groups', groups)
        
        content = "üîÑ **–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–≤–æ–¥–æ–≤**\n\n"
        content += "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏:\n\n"
        
        for status_key, factory_ids in groups.items():
            # –ü–∞—Ä—Å–∏–º –∫–ª—é—á –æ–±—Ä–∞—Ç–Ω–æ
            parts = status_key.split('_')
            if len(parts) == 3:
                resource = parts[0]
                is_auto = parts[1] == 'True'
                is_producing = parts[2] == 'True'
                
                count = len(factory_ids)
                if resource == '–ü—Ä–æ—Å—Ç–æ–π':
                    content += f"‚ö™Ô∏è **–ü—Ä–æ—Å—Ç–∞–∏–≤–∞–µ—Ç:** {count} —à—Ç.\n"
                elif is_auto:
                    content += f"üîÑ **{resource} (–∞–≤—Ç–æ):** {count} —à—Ç.\n"
                elif is_producing:
                    content += f"‚è∏Ô∏è **{resource} (—Ä–∞–∑–æ–≤–æ):** {count} —à—Ç.\n"
                else:
                    content += f"‚èπÔ∏è **{resource} (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω):** {count} —à—Ç.\n"
        
        return content
    
    async def buttons_worker(self):
        """–ö–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø –∑–∞–≤–æ–¥–æ–≤"""
        page_data = self.get_data()
        factory_groups = page_data.get('factory_groups', {})
        
        buttons = []
        
        for status_key, factory_ids in factory_groups.items():
            # –ü–∞—Ä—Å–∏–º –∫–ª—é—á
            parts = status_key.split('_')
            if len(parts) == 3:
                resource = parts[0]
                is_auto = parts[1] == 'True'
                is_producing = parts[2] == 'True'
                
                count = len(factory_ids)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç
                if resource == '–ü—Ä–æ—Å—Ç–æ–π':
                    emoji = "‚ö™Ô∏è"
                    text = f"{emoji} –ü—Ä–æ—Å—Ç–∞–∏–≤–∞–µ—Ç ({count})"
                elif is_auto:
                    emoji = "üîÑ"
                    text = f"{emoji} {resource} –∞–≤—Ç–æ ({count})"
                elif is_producing:
                    emoji = "‚è∏Ô∏è"
                    text = f"{emoji} {resource} —Ä–∞–∑–æ–≤–æ ({count})"
                else:
                    emoji = "‚èπÔ∏è"
                    text = f"{emoji} {resource} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({count})"
                
                buttons.append({
                    'text': text,
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_group',
                        status_key
                    )
                })
        
        buttons.append({
            'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(
                self.scene.__scene_name__,
                'back_to_factory'
            )
        })
        
        self.row_width = 1
        return buttons
    
    @Page.on_callback('select_group')
    async def select_group(self, callback: CallbackQuery, args: list):
        """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞", show_alert=True)
            return
        
        group_key = args[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        await self.update_data('selected_group', group_key)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await self.scene.update_page('factory-rekit-count-page')
        await callback.answer()
    
    @Page.on_callback('back_to_factory')
    async def back_to_factory(self, callback: CallbackQuery, args: list):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –∑–∞–≤–æ–¥–æ–≤"""
        await self.scene.update_page('factory-menu')
        await callback.answer()
