from oms import Page
from aiogram.types import Message, CallbackQuery
from oms.utils import callback_generator
from global_modules.logs import Logger
from modules.ws_client import get_factories
from modules.resources import RESOURCES, get_resource_name

bot_logger = Logger.get_logger("bot")


class FactoryRekitCount(Page):
    __page_name__ = "factory-rekit-count"
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–æ–¥–æ–≤"""
        scene_data = self.scene.get_data('scene')
        group_type = scene_data.get('rekit_group')
        error_message = scene_data.get('rekit_count_error')
        
        # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if error_message:
            scene_data.pop('rekit_count_error', None)
            await self.scene.set_data('scene', scene_data)
        
        if not group_type:
            return "‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –∑–∞–≤–æ–¥–æ–≤ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞
        company_id = scene_data.get('company_id')
        available_count = 0
        
        if company_id:
            factories = await get_factories(company_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (—Å–ø–∏—Å–æ–∫)
            if factories and isinstance(factories, list):
                # –°—á–∏—Ç–∞–µ–º –∑–∞–≤–æ–¥—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
                if group_type == 'idle':
                    available_count = sum(1 for f in factories if f.get('complectation') is None)
                else:
                    available_count = sum(1 for f in factories if f.get('complectation') == group_type)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        if group_type == 'idle':
            group_name = "‚ö™Ô∏è –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ –∑–∞–≤–æ–¥—ã"
        else:
            group_name = get_resource_name(group_type)
        
        content = "üîÑ **–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–≤–æ–¥–æ–≤**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if error_message:
            content += f"‚ùå **{error_message}**\n\n"
        
        content += f"–ì—Ä—É–ø–ø–∞: {group_name}\n"
        content += f"–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤–æ–¥–æ–≤: **{available_count}**\n\n"
        content += "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏:"
        
        return content
    
    async def buttons_worker(self):
        """–ö–Ω–æ–ø–∫–∏ —Å –±—ã—Å—Ç—Ä—ã–º –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        buttons = [
            {
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back'
                )
            }
        ]
        
        self.row_width = 1
        return buttons
    
    @Page.on_text('int')
    async def handle_text_input(self, message: Message, value: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        scene_data = self.scene.get_data('scene')
        
        if value <= 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            scene_data['rekit_count_error'] = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–æ–¥–∞—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        group_type = scene_data.get('rekit_group')
        company_id = scene_data.get('company_id')
        
        if not company_id or not group_type:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            scene_data['rekit_count_error'] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–æ–¥–æ–≤
        factories = await get_factories(company_id)
        # get_factories –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
        if factories and isinstance(factories, list):
            if group_type == 'idle':
                available_count = sum(1 for f in factories if f.get('complectation') is None)
            else:
                available_count = sum(1 for f in factories if f.get('complectation') == group_type)
            
            if value > available_count:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                scene_data['rekit_count_error'] = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–≤–æ–¥–æ–≤! –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {value}"
                await self.scene.set_data('scene', scene_data)
                await self.scene.update_message()
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        scene_data['rekit_count'] = str(value)
        await self.scene.set_data('scene', scene_data)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
        await self.scene.update_page('factory-rekit-resource')
    
    @Page.on_callback('back')
    async def back_to_groups(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã"""
        await self.scene.update_page('factory-rekit-groups')
        await callback.answer()
