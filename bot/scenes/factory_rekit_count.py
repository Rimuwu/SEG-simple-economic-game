from oms import Page
from aiogram.types import Message, CallbackQuery
from oms.utils import callback_generator
from global_modules.logs import Logger

bot_logger = Logger.get_logger("bot")


class FactoryRekitCount(Page):
    __page_name__ = "factory-rekit-count"
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
    RESOURCES = {
        "oil_products": {"name": "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã", "emoji": "‚õΩ"},
        "nails": {"name": "–ì–≤–æ–∑–¥–∏", "emoji": "üî©"},
        "boards": {"name": "–î–æ—Å–∫–∏", "emoji": "ü™µ"},
        "fabric": {"name": "–¢–∫–∞–Ω—å", "emoji": "üßµ"},
        "medical_equipment": {"name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "emoji": "üíâ"},
        "machine": {"name": "–°—Ç–∞–Ω–æ–∫", "emoji": "‚öôÔ∏è"},
        "furniture": {"name": "–ú–µ–±–µ–ª—å", "emoji": "ü™ë"},
        "tent": {"name": "–ü–∞–ª–∞—Ç–∫–∞", "emoji": "‚õ∫"},
        "barrel": {"name": "–ë–æ—á–∫–∞", "emoji": "üõ¢Ô∏è"},
        "tarpaulin": {"name": "–ë—Ä–µ–∑–µ–Ω—Ç", "emoji": "üé™"},
        "insulation_material": {"name": "–ò–∑–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", "emoji": "üß±"},
        "sail": {"name": "–ü–∞—Ä—É—Å", "emoji": "‚õµ"},
        "generator": {"name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "emoji": "‚ö°"},
        "body_armor": {"name": "–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç", "emoji": "ü¶∫"},
        "refrigerator": {"name": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", "emoji": "üßä"},
        "yacht": {"name": "–ü–∞—Ä—É—Å–Ω–∞—è —è—Ö—Ç–∞", "emoji": "üõ•Ô∏è"}
    }
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–æ–¥–æ–≤"""
        scene_data = self.scene.get_data('scene')
        group_type = scene_data.get('rekit_group')
        
        if not group_type:
            return "‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –∑–∞–≤–æ–¥–æ–≤ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        if group_type == 'idle':
            group_name = "‚ö™Ô∏è –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ –∑–∞–≤–æ–¥—ã"
        else:
            resource_info = self.RESOURCES.get(group_type, {"name": group_type, "emoji": "üì¶"})
            group_name = f"{resource_info['emoji']} {resource_info['name']}"
        
        content = "üîÑ **–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–≤–æ–¥–æ–≤**\n\n"
        content += f"–ì—Ä—É–ø–ø–∞: {group_name}\n\n"
        content += "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏:"
        
        return content
    
    async def buttons_worker(self):
        """–ö–Ω–æ–ø–∫–∏ —Å –±—ã—Å—Ç—Ä—ã–º –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        buttons = [
            {
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back'
                )
            }
        ]
        
        self.row_width = 1
        return buttons
    
    @Page.on_text('int')
    async def handle_text_input(self, message: Message, value: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        if value <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        scene_data = self.scene.get_data('scene')
        scene_data['rekit_count'] = str(value)
        await self.scene.set_data('scene', scene_data)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
        await self.scene.update_page('factory-rekit-resource')
    
    @Page.on_callback('back')
    async def back_to_groups(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã"""
        await self.scene.update_page('factory-rekit-groups')
        await callback.answer()
