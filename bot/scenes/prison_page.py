from oms import Page
from aiogram.types import CallbackQuery
from modules.ws_client import get_company, get_session
from oms.utils import callback_generator
from global_modules.logs import Logger

bot_logger = Logger.get_logger("bot")


class PrisonPage(Page):
    __page_name__ = "prison-page"
    
    async def content_worker(self) -> str:
        try:
            scene_data = self.scene.get_data('scene')
            if not scene_data:
                return "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
            
            company_id = scene_data.get('company_id')
            session_id = scene_data.get('session')
            
            if not company_id or not session_id:
                return "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            company_response = await get_company(id=company_id, session_id=session_id)
            if not company_response or "error" in company_response:
                return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏"

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session_response = await get_session(session_id=session_id)
            if not session_response or "error" in session_response:
                return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏"

            company_name = company_response.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è')
            prison_end_step = company_response.get('prison_end_step')
            current_step = session_response.get('step', 0)
            in_prison = company_response.get('in_prison', False)

            content = "üöî **–¢–Æ–†–¨–ú–ê** üöî\n\n"
            
            if not in_prison:
                content += "‚úÖ –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç—é—Ä—å–º–µ.\n"
                return content

            content += f"üè¢ **–ö–æ–º–ø–∞–Ω–∏—è**: {company_name}\n\n"
            content += "‚õìÔ∏è –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç—é—Ä—å–º–µ!.\n\n"
            
            if prison_end_step is not None:
                steps_remaining = prison_end_step - current_step
                if steps_remaining > 0:
                    content += f"‚è≥ **–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑**: {steps_remaining} —Ö–æ–¥(–∞/–æ–≤)\n"
                    content += f"üìÖ **–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –Ω–∞ —Ö–æ–¥—É**: {prison_end_step}\n\n"
                    content += "–í —ç—Ç–æ –≤—Ä–µ–º—è:\n"
                    content += "‚Ä¢ ‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–≤–æ–¥–∞–º–∏\n"
                    content += "‚Ä¢ ‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∞—Ç—å —Å–¥–µ–ª–∫–∏\n"
                    content += "‚Ä¢ ‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã\n\n"
                    content += "üí° *–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏, –≤–æ–≤—Ä–µ–º—è –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã!*"
                else:
                    content += "‚úÖ **–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —ç—Ç–æ–º —Ö–æ–¥—É!**\n"
                    content += "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞..."
            else:
                content += "‚ö†Ô∏è –°—Ä–æ–∫ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.\n"
                content += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

            return content
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ PrisonPage.content_worker: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
