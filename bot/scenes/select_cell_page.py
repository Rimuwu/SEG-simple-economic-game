from oms import Page
from aiogram.types import Message, CallbackQuery
from modules.utils import update_page, cell_into_xy, xy_into_cell
from modules.ws_client import get_sessions_free_cells, set_company_position
from oms.utils import callback_generator


class SelectCell(Page):
    
    __page_name__ = 'select-cell-page'
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 7 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
    row_width = 7
   
    async def buttons_worker(self):
        buttons = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        scene_data = self.scene.get_data('scene')
        session_id = scene_data.get('session')
        
        if not session_id:
            return buttons
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏
        free_cells = await get_sessions_free_cells(session_id=session_id)
        print(f"–°–≤–æ–±–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏: {free_cells}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        free_cells_set = set()
        if free_cells:
            for cell in free_cells:
                x, y = cell.get('x'), cell.get('y')
                if x is not None and y is not None:
                    cell_name = xy_into_cell(x, y)
                    free_cells_set.add(cell_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ 7x7
        for i in range(7):
            for j in range(7):
                cell_name = xy_into_cell(i, j)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ —è—á–µ–π–∫–∞
                if cell_name in free_cells_set:
                    # –°–≤–æ–±–æ–¥–Ω–∞—è —è—á–µ–π–∫–∞ - –∑–µ–ª–µ–Ω–∞—è
                    button_text = f"üü¢ {cell_name}"
                    callback_data = callback_generator(
                        self.scene.__scene_name__, 
                        'select_cell', 
                        cell_name
                    )
                else:
                    # –ó–∞–Ω—è—Ç–∞—è —è—á–µ–π–∫–∞ - –∫—Ä–∞—Å–Ω–∞—è
                    button_text = f"üî¥ {cell_name}"
                    callback_data = callback_generator(
                        self.scene.__scene_name__, 
                        'occupied_cell', 
                        cell_name
                    )
                
                buttons.append({
                    'text': button_text,
                    'callback_data': callback_data
                })
        
        return buttons
    
    @Page.on_callback('select_cell')
    async def on_select_cell(self, callback: CallbackQuery, args: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π —è—á–µ–π–∫–∏"""
        if len(args) < 4:  # scene:select_cell:scene_name:cell_name
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —è—á–µ–π–∫–∏")
            return
            
        cell_name = args[3]  # –ù–∞–∑–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, A1)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã
            scene_data = self.scene.get_data('scene')
            session_id = scene_data.get('session')
            company_id = scene_data.get('company_id')
            
            if not session_id or not company_id:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏")
                return

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            try:
                x, y = cell_into_xy(cell_name)
            except (ValueError, IndexError):
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è—á–µ–π–∫–∏")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
            response = await set_company_position(company_id, x, y)
            
            if response and response.get('error'):
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {response.get('error')}")
                return

            # –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é
            await callback.answer(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ —è—á–µ–π–∫–µ {cell_name}!")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã
            await self.scene.update_page('main-page')

        except Exception as e:
            await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    @Page.on_callback('occupied_cell')
    async def on_occupied_cell(self, callback: CallbackQuery, args: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–Ω—è—Ç—É—é —è—á–µ–π–∫—É"""
        if len(args) >= 4:
            cell_name = args[3]
            await callback.answer(f"‚ùå –Ø—á–µ–π–∫–∞ {cell_name} —É–∂–µ –∑–∞–Ω—è—Ç–∞")
        else:
            await callback.answer("‚ùå –≠—Ç–∞ —è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞")
    
