from oms import Page
from aiogram.types import Message, CallbackQuery
from modules.utils import update_page, cell_into_xy, xy_into_cell
from modules.ws_client import get_sessions_free_cells, set_company_position
from oms.utils import callback_generator


class SelectCell(Page):
    
    __page_name__ = 'select-cell-page'
    
    row_width = 7
   
    async def buttons_worker(self):
        buttons_o = []
        
        for i in range(7):
            for y in range(7):
                cell_position = xy_into_cell(i, y)
                buttons_o.append(
                    {
                        'text': cell_position,
                        'callback_data': callback_generator(
                    self.scene.__scene_name__, 
                    'cell_select',
                    cell_position
                )
                    }
                )
        
        self.row_width = 7
        buttons = []
        scene_data = self.scene.get_data('scene')
        session_id = scene_data.get('session')
        free_cells = await get_sessions_free_cells(session_id=session_id)
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        free_coords = set()
        if free_cells and "free_cells" in free_cells:
            for cell in free_cells["free_cells"]:
                free_coords.add((cell[0], cell[1]))
        
        for b in buttons_o:
            cell_text = b['text']
            x, y = cell_into_xy(cell_text)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ (–±–∞–Ω–∫ –∏ –≥–æ—Ä–æ–¥–∞)
            if cell_text == "D4":
                buttons.append({
                    'text': 'üè¶',
                    'callback_data': "bank"
                })
            elif cell_text in ("B2", "F2", "B6", "F6"):
                buttons.append({
                    'text': 'üè¢',
                    'callback_data': "city"
                })
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö
            elif (x, y) in free_coords:
                buttons.append({
                    'text': f"{cell_text}",
                    'callback_data': callback_generator(
                        self.scene.__scene_name__, 
                        'cell_select',
                        cell_text
                    )
                })
            else:
                # –ó–∞–Ω—è—Ç–∞—è —è—á–µ–π–∫–∞ - –∫—Ä–µ—Å—Ç–∏–∫
                buttons.append({
                    'text': f"‚ùå {cell_text}",
                    'callback_data': "occupied"
                })
        
        return buttons
    
    @Page.on_callback('cell_select')
    async def my_callback_handler(self, callback: CallbackQuery, args: list):
        # args[0] - —ç—Ç–æ callback_type ('cell_select')
        # args[1] - —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ callback_generator (cell_name)
        
        cell_name = args[1] if len(args) > 1 else None
        if cell_name:
            x, y = cell_into_xy(cell_name)
            response = await set_company_position(company_id=self.scene.get_data('company_id'), x=x, y=y)
            # if "data" in response:
            #     if "error" in response["data"]:
            #         self.content = self.content.replace("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:", 
            #                                             "–î–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é:")
            #         await self.scene.update_message()
            #         return
            # if "error" in response:
            #     self.content = "–î–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é:s"
            #     await self.scene.update_message()
            #     return
            await self.scene.update_page("wait-game-stage-page")

