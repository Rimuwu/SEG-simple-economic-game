from oms import Page
from aiogram.types import CallbackQuery, Message
from modules.ws_client import (
    get_company, get_company_contracts, create_contract, 
    accept_contract, decline_contract, execute_contract
)
from oms.utils import callback_generator
from global_modules.load_config import ALL_CONFIGS
from global_modules.logs import Logger

bot_logger = Logger.get_logger("bot")

class ContractPage(Page):
    
    __page_name__ = "contract-page"
    
    async def content_worker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        session_id = scene_data.get('session')
        
        if not company_id:
            return "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        company_response = await get_company(id=company_id)
        
        if company_response is None or isinstance(company_response, str):
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        contract_state = scene_data.get('contract_state', 'main')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        if contract_state == 'main':
            return await self._main_screen(company_id)
        
        # –í—ã–±–æ—Ä —Ä–æ–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        elif contract_state == 'select_role':
            return await self._select_role_screen()
        
        # –í—ã–±–æ—Ä –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        elif contract_state == 'select_partner':
            return await self._select_partner_screen(session_id, company_id)
        
        # –í—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞
        elif contract_state == 'select_resource':
            return await self._select_resource_screen(company_id, scene_data)
        
        # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞ —Ö–æ–¥
        elif contract_state == 'input_amount':
            return await self._input_amount_screen(scene_data)
        
        # –í–≤–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        elif contract_state == 'input_duration':
            return await self._input_duration_screen(scene_data)
        
        # –í–≤–æ–¥ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
        elif contract_state == 'input_payment':
            return await self._input_payment_screen(scene_data)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
        elif contract_state == 'confirm':
            return await self._confirm_screen(scene_data)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ö–æ–¥—è—â–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        elif contract_state == 'view_incoming':
            return await self._view_incoming_screen(company_id)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        elif contract_state == 'view_outgoing':
            return await self._view_outgoing_screen(company_id)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        elif contract_state == 'view_active':
            return await self._view_active_screen(company_id)
        
        # –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        elif contract_state == 'contract_details':
            return await self._contract_details_screen(scene_data)
        
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    
    async def _main_screen(self, company_id: int):
        """–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
        scene_data = self.scene.get_data('scene')
        success_message = scene_data.get('success_message', '')
        
        text = "üìã **–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã**\n\n"
        
        if success_message:
            text += f"‚úÖ {success_message}\n\n"
            await self.scene.update_key('scene', 'success_message', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏
        contracts_response = await get_company_contracts(
            company_id=company_id,
            as_supplier=True,
            as_customer=True
        )
        
        if contracts_response is None:
            text += "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤\n\n"
        else:
            contracts = contracts_response if isinstance(contracts_response, list) else []
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            incoming_count = len([c for c in contracts if c.get('customer_company_id') == company_id and not c.get('accepted')])
            outgoing_count = len([c for c in contracts if c.get('supplier_company_id') == company_id and not c.get('accepted')])
            active_count = len([c for c in contracts if c.get('accepted')])
            
            text += f"üì• –í—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {incoming_count}\n"
            text += f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {outgoing_count}\n"
            text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {active_count}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        return text
    
    async def _select_role_screen(self):
        """–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ"""
        text = "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞**\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã—Å—Ç—É–ø–∏—Ç—å:\n\n"
        text += "**üõí –Ø –ø–æ–∫—É–ø–∞—é —Ä–µ—Å—É—Ä—Å** - –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ —Ä–µ—Å—É—Ä—Å\n\n"
        text += "**üí∞ –Ø –ø—Ä–æ–¥–∞—é —Ä–µ—Å—É—Ä—Å** - –≤—ã –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Ä–µ—Å—É—Ä—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–µ–Ω—å–≥–∏"
        
        return text
    
    async def _select_partner_screen(self, session_id: str, company_id: int):
        """–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞"""
        from modules.ws_client import get_companies
        
        scene_data = self.scene.get_data('scene')
        role = scene_data.get('contract_role', '')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
        companies_response = await get_companies(session_id=session_id)
        
        if companies_response is None or not isinstance(companies_response, list):
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π"
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–æ—é –∫–æ–º–ø–∞–Ω–∏—é
        other_companies = [c for c in companies_response if c.get('id') != company_id]
        
        if not other_companies:
            return "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"
        
        role_text = "–ø–æ–∫—É–ø–∞–µ—Ç–µ —É" if role == 'customer' else "–ø—Ä–æ–¥–∞—ë—Ç–µ"
        
        text = f"üë• **–í—ã–±–æ—Ä –ø–∞—Ä—Ç–Ω—ë—Ä–∞**\n\n"
        text += f"–í—ã {role_text}:\n\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
        await self.scene.update_key('scene', 'available_companies', other_companies)
        
        return text
    
    async def _select_resource_screen(self, company_id: int, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞"""
        role = scene_data.get('contract_role', '')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        resources_config = ALL_CONFIGS.get('resources')
        
        if not resources_config or not hasattr(resources_config, 'resources'):
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"
        
        available_resources = []
        
        if role == 'supplier':
            # –ï—Å–ª–∏ —è –ø–æ—Å—Ç–∞–≤—â–∏–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å—ã —Å –º–æ–µ–≥–æ —Å–∫–ª–∞–¥–∞
            company_response = await get_company(id=company_id)
            
            if company_response is None:
                return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏"
            
            warehouse = company_response.get('warehouse', {})
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ
            for resource_key, resource_obj in resources_config.resources.items():
                quantity = warehouse.get(resource_key, 0)
                if quantity > 0:
                    available_resources.append({
                        'key': resource_key,
                        'name': resource_obj.label,
                        'emoji': resource_obj.emoji,
                        'quantity': quantity
                    })
            
            if not available_resources:
                return "‚ùå –ù–∞ –≤–∞—à–µ–º —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"
        else:
            # –ï—Å–ª–∏ —è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            for resource_key, resource_obj in resources_config.resources.items():
                available_resources.append({
                    'key': resource_key,
                    'name': resource_obj.label,
                    'emoji': resource_obj.emoji,
                    'quantity': None  # –î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –≤–∞–∂–Ω–æ
                })
        
        role_text = "–ø—Ä–æ–¥–∞—ë—Ç–µ" if role == 'supplier' else "–ø–æ–∫—É–ø–∞–µ—Ç–µ"
        
        text = f"üì¶ **–í—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞**\n\n"
        text += f"–í—ã {role_text}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        await self.scene.update_key('scene', 'available_resources', available_resources)
        
        return text
    
    async def _input_amount_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞ —Ö–æ–¥"""
        resource_key = scene_data.get('contract_resource', '')
        error = scene_data.get('error_message', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
        resources_config = ALL_CONFIGS.get('resources')
        resource_name = resource_key
        
        if resources_config and hasattr(resources_config, 'resources'):
            resource_obj = resources_config.resources.get(resource_key)
            if resource_obj:
                resource_name = resource_obj.label
        
        text = f"üìä **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ —Ö–æ–¥**\n\n"
        text += f"–†–µ—Å—É—Ä—Å: {resource_name}\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ö–æ–¥:\n\n"
        text += "–ú–∏–Ω–∏–º—É–º: 1 –µ–¥–∏–Ω–∏—Ü–∞"
        
        if error:
            text += f"\n\n‚ùå {error}"
        
        return text
    
    async def _input_duration_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        amount = scene_data.get('contract_amount', 0)
        error = scene_data.get('error_message', '')
        
        text = f"‚è± **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞**\n\n"
        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ —Ö–æ–¥: {amount}\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ —Ö–æ–¥–∞—Ö:\n\n"
        text += "–ú–∏–Ω–∏–º—É–º: 1 —Ö–æ–¥\n"
        text += "–ú–∞–∫—Å–∏–º—É–º: 10 —Ö–æ–¥–æ–≤"
        
        if error:
            text += f"\n\n‚ùå {error}"
        
        return text
    
    async def _input_payment_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã"""
        amount = scene_data.get('contract_amount', 0)
        duration = scene_data.get('contract_duration', 0)
        resource_key = scene_data.get('contract_resource', '')
        error = scene_data.get('error_message', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
        resources_config = ALL_CONFIGS.get('resources')
        resource_name = resource_key
        
        if resources_config and hasattr(resources_config, 'resources'):
            resource_obj = resources_config.resources.get(resource_key)
            if resource_obj:
                resource_name = resource_obj.label
        
        total_amount = amount * duration
        
        text = f"üí∞ **–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã**\n\n"
        text += f"–†–µ—Å—É—Ä—Å: {resource_name}\n"
        text += f"–ó–∞ —Ö–æ–¥: {amount} –µ–¥–∏–Ω–∏—Ü\n"
        text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Ö–æ–¥–æ–≤\n"
        text += f"–í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {total_amount}\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –∑–∞ –≤–µ—Å—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç:\n\n"
        text += "–ú–∏–Ω–∏–º—É–º: 1 üí∞"
        
        if error:
            text += f"\n\n‚ùå {error}"
        
        return text
    
    async def _confirm_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        role = scene_data.get('contract_role', '')
        partner_name = scene_data.get('contract_partner_name', '')
        resource_key = scene_data.get('contract_resource', '')
        amount = scene_data.get('contract_amount', 0)
        duration = scene_data.get('contract_duration', 0)
        payment = scene_data.get('contract_payment', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
        resources_config = ALL_CONFIGS.get('resources')
        resource_name = resource_key
        resource_emoji = "üì¶"
        
        if resources_config and hasattr(resources_config, 'resources'):
            resource_obj = resources_config.resources.get(resource_key)
            if resource_obj:
                resource_name = resource_obj.label
                resource_emoji = resource_obj.emoji
        
        total_amount = amount * duration
        price_per_unit = payment / total_amount if total_amount > 0 else 0
        
        text = f"‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞**\n\n"
        text += f"**–ü–∞—Ä—Ç–Ω—ë—Ä:** {partner_name}\n\n"
        
        if role == 'supplier':
            text += f"**–í—ã:** –ü–æ—Å—Ç–∞–≤—â–∏–∫ (–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Ä–µ—Å—É—Ä—Å)\n"
            text += f"**–ü–∞—Ä—Ç–Ω—ë—Ä:** –ó–∞–∫–∞–∑—á–∏–∫ (–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç)\n\n"
        else:
            text += f"**–í—ã:** –ó–∞–∫–∞–∑—á–∏–∫ (–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ)\n"
            text += f"**–ü–∞—Ä—Ç–Ω—ë—Ä:** –ü–æ—Å—Ç–∞–≤—â–∏–∫ (–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç)\n\n"
        
        text += f"**–£—Å–ª–æ–≤–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:**\n"
        text += f"   {resource_emoji} –†–µ—Å—É—Ä—Å: {resource_name}\n"
        text += f"   üì¶ –ó–∞ —Ö–æ–¥: {amount} –µ–¥–∏–Ω–∏—Ü\n"
        text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Ö–æ–¥–æ–≤\n"
        text += f"   üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {payment} üí∞\n"
        text += f"   üìä –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {total_amount} –µ–¥–∏–Ω–∏—Ü\n"
        text += f"   üíµ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {price_per_unit:.2f} üí∞\n\n"
        
        if role == 'customer':
            text += f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {payment} üí∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º."
        
        return text
    
    async def _view_incoming_screen(self, company_id: int):
        """–≠–∫—Ä–∞–Ω –≤—Ö–æ–¥—è—â–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
        contracts_response = await get_company_contracts(
            company_id=company_id,
            as_customer=True,
            as_supplier=False,
            accepted_only=False
        )
        
        if contracts_response is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
        
        contracts = [c for c in contracts_response if not c.get('accepted')]
        
        text = "üì• **–í—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è**\n\n"
        text += "_–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã, –≥–¥–µ –≤—ã - –∑–∞–∫–∞–∑—á–∏–∫ (–ø–æ–ª—É—á–∞–µ—Ç–µ —Ä–µ—Å—É—Ä—Å)_\n\n"
        
        if not contracts:
            text += "–£ –≤–∞—Å –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
            await self.scene.update_key('scene', 'viewed_contracts', contracts)
        
        return text
    
    async def _view_outgoing_screen(self, company_id: int):
        """–≠–∫—Ä–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
        contracts_response = await get_company_contracts(
            company_id=company_id,
            as_supplier=True,
            as_customer=False,
            accepted_only=False
        )
        
        if contracts_response is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
        
        contracts = [c for c in contracts_response if not c.get('accepted')]
        
        text = "üì§ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è**\n\n"
        text += "_–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã, –≥–¥–µ –≤—ã - –ø–æ—Å—Ç–∞–≤—â–∏–∫ (–æ—Ç–¥–∞—ë—Ç–µ —Ä–µ—Å—É—Ä—Å)_\n\n"
        
        if not contracts:
            text += "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
            await self.scene.update_key('scene', 'viewed_contracts', contracts)
        
        return text
    
    async def _view_active_screen(self, company_id: int):
        """–≠–∫—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
        contracts_response = await get_company_contracts(
            company_id=company_id,
            as_supplier=True,
            as_customer=True,
            accepted_only=True
        )
        
        if contracts_response is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
        
        contracts = contracts_response if isinstance(contracts_response, list) else []
        
        text = "‚úÖ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã**\n\n"
        
        if not contracts:
            text += "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤."
        else:
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≥–¥–µ –º—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∏ –≥–¥–µ –∑–∞–∫–∞–∑—á–∏–∫
            as_supplier = [c for c in contracts if c.get('supplier_company_id') == company_id]
            as_customer = [c for c in contracts if c.get('customer_company_id') == company_id]
            
            if as_supplier:
                text += "üì§ **–í—ã –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ:**\n"
                for contract in as_supplier:
                    resource = contract.get('resource', '?')
                    amount = contract.get('amount_per_turn', 0)
                    delivered = contract.get('successful_deliveries', 0)
                    duration = contract.get('duration_turns', 0)
                    text += f"   ‚Ä¢ {resource}: {amount}/—Ö–æ–¥ ({delivered}/{duration} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\n"
                text += "\n"
            
            if as_customer:
                text += "üì• **–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:**\n"
                for contract in as_customer:
                    resource = contract.get('resource', '?')
                    amount = contract.get('amount_per_turn', 0)
                    delivered = contract.get('successful_deliveries', 0)
                    duration = contract.get('duration_turns', 0)
                    text += f"   ‚Ä¢ {resource}: {amount}/—Ö–æ–¥ ({delivered}/{duration} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
            await self.scene.update_key('scene', 'viewed_contracts', contracts)
        
        return text
    
    async def _contract_details_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        contract_id = scene_data.get('viewing_contract_id', 0)
        company_id = scene_data.get('company_id')
        
        from modules.ws_client import get_contract
        contract_response = await get_contract(id=contract_id)
        
        if contract_response is None:
            return "‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
        is_supplier = contract_response.get('supplier_company_id') == company_id
        is_customer = contract_response.get('customer_company_id') == company_id
        
        supplier_id = contract_response.get('supplier_company_id')
        customer_id = contract_response.get('customer_company_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–π
        supplier_response = await get_company(id=supplier_id)
        customer_response = await get_company(id=customer_id)
        
        supplier_name = supplier_response.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if supplier_response else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        customer_name = customer_response.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if customer_response else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        resource = contract_response.get('resource', '?')
        amount = contract_response.get('amount_per_turn', 0)
        duration = contract_response.get('duration_turns', 0)
        payment = contract_response.get('payment_amount', 0)
        accepted = contract_response.get('accepted', False)
        delivered = contract_response.get('successful_deliveries', 0)
        delivered_this_turn = contract_response.get('delivered_this_turn', False)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
        resources_config = ALL_CONFIGS.get('resources')
        resource_name = resource
        resource_emoji = "üì¶"
        
        if resources_config and hasattr(resources_config, 'resources'):
            resource_obj = resources_config.resources.get(resource)
            if resource_obj:
                resource_name = resource_obj.label
                resource_emoji = resource_obj.emoji
        
        text = f"üìã **–î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ #{contract_id}**\n\n"
        text += f"**–ü–æ—Å—Ç–∞–≤—â–∏–∫:** {supplier_name}\n"
        text += f"**–ó–∞–∫–∞–∑—á–∏–∫:** {customer_name}\n\n"
        
        if is_supplier:
            text += f"**–í–∞—à–∞ —Ä–æ–ª—å:** –ü–æ—Å—Ç–∞–≤—â–∏–∫\n\n"
        elif is_customer:
            text += f"**–í–∞—à–∞ —Ä–æ–ª—å:** –ó–∞–∫–∞–∑—á–∏–∫\n\n"
        
        text += f"**–£—Å–ª–æ–≤–∏—è:**\n"
        text += f"   {resource_emoji} –†–µ—Å—É—Ä—Å: {resource_name}\n"
        text += f"   üì¶ –ó–∞ —Ö–æ–¥: {amount} –µ–¥–∏–Ω–∏—Ü\n"
        text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Ö–æ–¥–æ–≤\n"
        text += f"   üí∞ –°—É–º–º–∞: {payment} üí∞\n\n"
        
        if accepted:
            text += f"‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π\n"
            text += f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {delivered}/{duration} —Ö–æ–¥–æ–≤\n"
            
            if is_supplier and not delivered_this_turn:
                text += f"\n‚ö†Ô∏è –í —ç—Ç–æ–º —Ö–æ–¥—É –ø–æ—Å—Ç–∞–≤–∫–∞ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"
            elif is_supplier and delivered_this_turn:
                text += f"\n‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –≤ —ç—Ç–æ–º —Ö–æ–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        else:
            text += f"‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        await self.scene.update_key('scene', 'current_contract', contract_response)
        
        return text
    
    async def buttons_worker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫"""
        scene_data = self.scene.get_data('scene')
        contract_state = scene_data.get('contract_state', 'main')
        
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        if contract_state == 'main':
            buttons.append({
                'text': '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'start_create'
                )
            })
            buttons.append({
                'text': 'üì• –í—Ö–æ–¥—è—â–∏–µ',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'view_incoming'
                ),
                'next_line': True
            })
            buttons.append({
                'text': 'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'view_outgoing'
                )
            })
            buttons.append({
                'text': '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'view_active'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        elif contract_state == 'select_role':
            buttons.append({
                'text': 'üõí –Ø –ø–æ–∫—É–ø–∞—é —Ä–µ—Å—É—Ä—Å',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'set_role',
                    'customer'
                )
            })
            buttons.append({
                'text': 'üí∞ –Ø –ø—Ä–æ–¥–∞—é —Ä–µ—Å—É—Ä—Å',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'set_role',
                    'supplier'
                ),
                'next_line': True
            })
            buttons.append({
                'text': '‚ùå –û—Ç–º–µ–Ω–∞',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'cancel_create'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        elif contract_state == 'select_partner':
            companies = scene_data.get('available_companies', [])
            for company in companies:
                buttons.append({
                    'text': f"üè¢ {company.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_partner',
                        str(company.get('id', 0)),
                        company.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    ),
                    'next_line': True
                })
            buttons.append({
                'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back_to_role'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
        elif contract_state == 'select_resource':
            resources = scene_data.get('available_resources', [])
            for resource in resources:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ (–¥–ª—è supplier)
                quantity = resource.get('quantity')
                if quantity is not None:
                    text = f"{resource.get('emoji', 'üì¶')} {resource.get('name', '?')} ({quantity})"
                else:
                    text = f"{resource.get('emoji', 'üì¶')} {resource.get('name', '?')}"
                
                buttons.append({
                    'text': text,
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_resource',
                        resource.get('key', '')
                    ),
                    'next_line': True
                })
            buttons.append({
                'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back_to_partner'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ–ø–ª–∞—Ç—ã
        elif contract_state in ['input_amount', 'input_duration', 'input_payment']:
            buttons.append({
                'text': '‚ùå –û—Ç–º–µ–Ω–∞',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'cancel_create'
                )
            })
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        elif contract_state == 'confirm':
            buttons.append({
                'text': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'confirm_create'
                )
            })
            buttons.append({
                'text': '‚ùå –û—Ç–º–µ–Ω–∞',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'cancel_create'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        elif contract_state in ['view_incoming', 'view_outgoing', 'view_active']:
            contracts = scene_data.get('viewed_contracts', [])
            
            for contract in contracts:
                contract_id = contract.get('id', 0)
                resource = contract.get('resource', '?')
                amount = contract.get('amount_per_turn', 0)
                
                # –ü–æ–ª—É—á–∞–µ–º emoji —Ä–µ—Å—É—Ä—Å–∞
                resources_config = ALL_CONFIGS.get('resources')
                resource_emoji = "üì¶"
                if resources_config and hasattr(resources_config, 'resources'):
                    resource_obj = resources_config.resources.get(resource)
                    if resource_obj:
                        resource_emoji = resource_obj.emoji
                
                buttons.append({
                    'text': f"{resource_emoji} {resource} - {amount}/—Ö–æ–¥",
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'view_contract',
                        str(contract_id)
                    ),
                    'next_line': True
                })
            
            buttons.append({
                'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back_to_main'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        elif contract_state == 'contract_details':
            contract = scene_data.get('current_contract', {})
            company_id = scene_data.get('company_id')
            contract_id = contract.get('id', 0)
            
            is_supplier = contract.get('supplier_company_id') == company_id
            is_customer = contract.get('customer_company_id') == company_id
            accepted = contract.get('accepted', False)
            delivered_this_turn = contract.get('delivered_this_turn', False)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö (–º—ã –∑–∞–∫–∞–∑—á–∏–∫–∏)
            if is_customer and not accepted:
                buttons.append({
                    'text': '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'accept_contract',
                        str(contract_id)
                    )
                })
                buttons.append({
                    'text': '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'decline_contract',
                        str(contract_id)
                    ),
                    'next_line': True
                })
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö (–º—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏)
            elif is_supplier and not accepted:
                buttons.append({
                    'text': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'decline_contract',
                        str(contract_id)
                    )
                })
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö (–º—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏)
            elif is_supplier and accepted and not delivered_this_turn:
                buttons.append({
                    'text': 'üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'execute_contract',
                        str(contract_id)
                    )
                })
            
            buttons.append({
                'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back_from_details'
                ),
                'next_line': True
            })
        
        return buttons
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    
    @Page.on_callback('start_create')
    async def start_create_handler(self, callback: CallbackQuery, args: list):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        await self.scene.update_key('scene', 'contract_state', 'select_role')
        await self.scene.update_message()
    
    @Page.on_callback('set_role')
    async def set_role_handler(self, callback: CallbackQuery, args: list):
        """–í—ã–±–æ—Ä —Ä–æ–ª–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ"""
        if len(args) < 2:
            return
        
        role = args[1]  # 'customer' or 'supplier'
        await self.scene.update_key('scene', 'contract_role', role)
        await self.scene.update_key('scene', 'contract_state', 'select_partner')
        await self.scene.update_message()
    
    @Page.on_callback('select_partner')
    async def select_partner_handler(self, callback: CallbackQuery, args: list):
        """–í—ã–±–æ—Ä –ø–∞—Ä—Ç–Ω—ë—Ä–∞"""
        if len(args) < 3:
            return
        
        partner_id = int(args[1])
        partner_name = args[2]
        
        await self.scene.update_key('scene', 'contract_partner_id', partner_id)
        await self.scene.update_key('scene', 'contract_partner_name', partner_name)
        await self.scene.update_key('scene', 'contract_state', 'select_resource')
        await self.scene.update_message()
    
    @Page.on_callback('select_resource')
    async def select_resource_handler(self, callback: CallbackQuery, args: list):
        """–í—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞"""
        if len(args) < 2:
            return
        
        resource_key = args[1]
        await self.scene.update_key('scene', 'contract_resource', resource_key)
        await self.scene.update_key('scene', 'contract_state', 'input_amount')
        await self.scene.update_key('scene', 'error_message', '')
        await self.scene.update_message()
    
    @Page.on_callback('view_incoming')
    async def view_incoming_handler(self, callback: CallbackQuery, args: list):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ö–æ–¥—è—â–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
        await self.scene.update_key('scene', 'contract_state', 'view_incoming')
        await self.scene.update_message()
    
    @Page.on_callback('view_outgoing')
    async def view_outgoing_handler(self, callback: CallbackQuery, args: list):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
        await self.scene.update_key('scene', 'contract_state', 'view_outgoing')
        await self.scene.update_message()
    
    @Page.on_callback('view_active')
    async def view_active_handler(self, callback: CallbackQuery, args: list):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
        await self.scene.update_key('scene', 'contract_state', 'view_active')
        await self.scene.update_message()
    
    @Page.on_callback('view_contract')
    async def view_contract_handler(self, callback: CallbackQuery, args: list):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        if len(args) < 2:
            return
        
        contract_id = int(args[1])
        await self.scene.update_key('scene', 'viewing_contract_id', contract_id)
        await self.scene.update_key('scene', 'previous_state', self.scene.get_key('scene', 'contract_state'))
        await self.scene.update_key('scene', 'contract_state', 'contract_details')
        await self.scene.update_message()
    
    @Page.on_callback('accept_contract')
    async def accept_contract_handler(self, callback: CallbackQuery, args: list):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        if len(args) < 2:
            return
        
        contract_id = int(args[1])
        scene_data = self.scene.get_data('scene')
        user_id = self.scene.user_id
        
        result = await accept_contract(contract_id=contract_id, who_accepter=user_id)
        
        if result is not None and result.get('error'):
            await callback.answer(f"‚ùå {result.get('error')}", show_alert=True)
        else:
            await self.scene.update_key('scene', 'success_message', '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–∏–Ω—è—Ç!')
            await self.scene.update_key('scene', 'contract_state', 'main')
            await self.scene.update_message()
    
    @Page.on_callback('decline_contract')
    async def decline_contract_handler(self, callback: CallbackQuery, args: list):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        if len(args) < 2:
            return
        
        contract_id = int(args[1])
        user_id = self.scene.user_id
        
        result = await decline_contract(contract_id=contract_id, who_decliner=user_id)
        
        if result is not None and result.get('error'):
            await callback.answer(f"‚ùå {result.get('error')}", show_alert=True)
        else:
            await self.scene.update_key('scene', 'success_message', '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω')
            await self.scene.update_key('scene', 'contract_state', 'main')
            await self.scene.update_message()
    
    @Page.on_callback('execute_contract')
    async def execute_contract_handler(self, callback: CallbackQuery, args: list):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É"""
        if len(args) < 2:
            return
        
        contract_id = int(args[1])
        
        result = await execute_contract(contract_id=contract_id)
        
        if result is not None and result.get('error'):
            await callback.answer(f"‚ùå {result.get('error')}", show_alert=True)
        else:
            await callback.answer("‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
            await self.scene.update_key('scene', 'contract_state', 'contract_details')
            await self.scene.update_message()
    
    @Page.on_callback('confirm_create')
    async def confirm_create_handler(self, callback: CallbackQuery, args: list):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        session_id = scene_data.get('session_id')
        
        role = scene_data.get('contract_role', '')
        partner_id = scene_data.get('contract_partner_id', 0)
        resource = scene_data.get('contract_resource', '')
        amount = scene_data.get('contract_amount', 0)
        duration = scene_data.get('contract_duration', 0)
        payment = scene_data.get('contract_payment', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º supplier –∏ customer
        if role == 'supplier':
            supplier_id = company_id
            customer_id = partner_id
        else:
            supplier_id = partner_id
            customer_id = company_id
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        result = await create_contract(
            supplier_company_id=supplier_id,
            customer_company_id=customer_id,
            session_id=session_id,
            resource=resource,
            amount_per_turn=amount,
            duration_turns=duration,
            payment_amount=payment,
            who_creator=company_id
        )
        
        if result is not None and result.get('error'):
            await callback.answer(f"‚ùå {result.get('error')}", show_alert=True)
        else:
            await self.scene.update_key('scene', 'success_message', '–ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞–Ω!')
            await self.scene.update_key('scene', 'contract_state', 'main')
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for key in ['contract_role', 'contract_partner_id', 'contract_partner_name', 
                       'contract_resource', 'contract_amount', 'contract_duration', 'contract_payment']:
                await self.scene.update_key('scene', key, None)
            await self.scene.update_message()
    
    @Page.on_callback('cancel_create')
    async def cancel_create_handler(self, callback: CallbackQuery, args: list):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        await self.scene.update_key('scene', 'contract_state', 'main')
        await self.scene.update_message()
    
    @Page.on_callback('back_to_main')
    async def back_to_main_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"""
        await self.scene.update_key('scene', 'contract_state', 'main')
        await self.scene.update_message()
    
    @Page.on_callback('back_to_role')
    async def back_to_role_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏"""
        await self.scene.update_key('scene', 'contract_state', 'select_role')
        await self.scene.update_message()
    
    @Page.on_callback('back_to_partner')
    async def back_to_partner_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä—Ç–Ω—ë—Ä–∞"""
        await self.scene.update_key('scene', 'contract_state', 'select_partner')
        await self.scene.update_message()
    
    @Page.on_callback('back_from_details')
    async def back_from_details_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        previous_state = self.scene.get_key('scene', 'previous_state') or 'main'
        await self.scene.update_key('scene', 'contract_state', previous_state)
        await self.scene.update_message()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞
    
    @Page.on_text('int')
    async def on_int_input(self, message: Message, value: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        scene_data = self.scene.get_data('scene')
        contract_state = scene_data.get('contract_state', '')
        
        # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if contract_state == 'input_amount':
            if value < 1:
                await self.scene.update_key('scene', 'error_message', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
            else:
                await self.scene.update_key('scene', 'contract_amount', value)
                await self.scene.update_key('scene', 'contract_state', 'input_duration')
                await self.scene.update_key('scene', 'error_message', '')
            await self.scene.update_message()
        
        # –í–≤–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        elif contract_state == 'input_duration':
            if value < 1:
                await self.scene.update_key('scene', 'error_message', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
            elif value > 10:
                await self.scene.update_key('scene', 'error_message', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10 —Ö–æ–¥–æ–≤')
            else:
                await self.scene.update_key('scene', 'contract_duration', value)
                await self.scene.update_key('scene', 'contract_state', 'input_payment')
                await self.scene.update_key('scene', 'error_message', '')
            await self.scene.update_message()
        
        # –í–≤–æ–¥ –æ–ø–ª–∞—Ç—ã
        elif contract_state == 'input_payment':
            if value < 1:
                await self.scene.update_key('scene', 'error_message', '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
            else:
                await self.scene.update_key('scene', 'contract_payment', value)
                await self.scene.update_key('scene', 'contract_state', 'confirm')
                await self.scene.update_key('scene', 'error_message', '')
            await self.scene.update_message()
