from oms import Page
from aiogram.types import CallbackQuery, Message
from modules.ws_client import get_exchanges, get_exchange, buy_exchange_offer, get_company, create_exchange_offer
from oms.utils import callback_generator
from global_modules.load_config import ALL_CONFIGS, Resources
from .filters.item_filter import ItemFilter
from oneuser_page import OneUserPage

RESOURCES: Resources = ALL_CONFIGS["resources"]


class ExchangePage(OneUserPage):
    
    __page_name__ = "exchange-page"
    
    def __after_init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        super().__after_init__()
        # –°–æ–∑–¥–∞—ë–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.item_filter = ItemFilter(
            scene_name='scene-manager',  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ __post_init__
            callback_prefix='filter_resource',
            items_per_page=5
        )
    
    def __post_init__(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ —Å—Ü–µ–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞"""
        super().__post_init__()
        self.item_filter.scene_name = self.scene.__scene_name__
    
    async def content_worker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        session_id = scene_data.get('session')
        
        if not company_id or not session_id:
            return "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        exchange_state = scene_data.get('exchange_state', 'list')
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        if exchange_state == 'list':
            return await self._list_screen(scene_data, session_id, company_id)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
        elif exchange_state == 'filter':
            return await self._filter_screen(scene_data)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
        elif exchange_state == 'details':
            return await self._details_screen(scene_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≤—ã–±–æ—Ä —Ç–∏–ø–∞
        elif exchange_state == 'create_select_type':
            return await self._create_select_type_screen(scene_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        elif exchange_state == 'create_select_sell_resource':
            return await self._create_select_sell_resource_screen(scene_data, company_id)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞ —Å–¥–µ–ª–∫—É
        elif exchange_state == 'create_input_amount':
            return await self._create_input_amount_screen(scene_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
        elif exchange_state == 'create_input_count':
            return await self._create_input_count_screen(scene_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≤–≤–æ–¥ —Ü–µ–Ω—ã (–¥–ª—è money)
        elif exchange_state == 'create_input_price':
            return await self._create_input_price_screen(scene_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≤—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –±–∞—Ä—Ç–µ—Ä–∞
        elif exchange_state == 'create_select_barter_resource':
            return await self._create_select_barter_resource_screen(scene_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –±–∞—Ä—Ç–µ—Ä–∞
        elif exchange_state == 'create_input_barter_amount':
            return await self._create_input_barter_amount_screen(scene_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        elif exchange_state == 'create_confirm':
            return await self._create_confirm_screen(scene_data)
        
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    
    async def _list_screen(self, scene_data: dict, session_id: str, company_id: int):
        """–û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        success_message = scene_data.get('success_message', '')
        current_page = scene_data.get('list_page', 0)
        filter_resource = scene_data.get('filter_resource', None)
        
        text = "üìà *–ë–∏—Ä–∂–∞*\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if success_message:
            text += f"‚úÖ {success_message}\n\n"
            scene_data['success_message'] = ''
            await self.scene.set_data('scene', scene_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if filter_resource:
            resource = RESOURCES.get_resource(filter_resource)
            if resource:
                text += f"üîç –§–∏–ª—å—Ç—Ä: {resource.emoji} {resource.label}\n\n"
            exchanges = await get_exchanges(
                session_id=session_id,
                sell_resource=filter_resource
            )
        else:
            text += "üìã –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n\n"
            exchanges = await get_exchanges(session_id=session_id)
        
        if isinstance(exchanges, str):
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {exchanges}"
        
        if not exchanges or len(exchanges) == 0:
            text += "_–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π_\n\n"
            if filter_resource:
                text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Å—É—Ä—Å"
            return text
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        items_per_page = 5
        total_pages = max(1, (len(exchanges) + items_per_page - 1) // items_per_page)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        current_page = current_page % total_pages
        scene_data['list_page'] = current_page
        scene_data['total_pages'] = total_pages
        await self.scene.set_data('scene', scene_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = current_page * items_per_page
        end_idx = start_idx + items_per_page
        page_exchanges = exchanges[start_idx:end_idx]
        
        text += f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(exchanges)}\n"
        text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page + 1}/{total_pages}\n\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        for i, exchange in enumerate(page_exchanges, 1):
            sell_res = RESOURCES.get_resource(exchange.get('sell_resource', ''))
            if not sell_res:
                continue
            
            sell_amount = exchange.get('sell_amount_per_trade', 0)
            total_stock = exchange.get('total_stock', 0)
            offer_type = exchange.get('offer_type', 'money')
            
            text += f"*{i}.* {sell_res.emoji} {sell_res.label} x{sell_amount}\n"
            text += f"   –í—Å–µ–≥–æ –≤ –Ω–∞–ª–∏—á–∏–∏: {total_stock}\n"
            
            if offer_type == 'money':
                price = exchange.get('price', 0)
                text += f"   üí∞ –¶–µ–Ω–∞: {price:,}".replace(",", " ") + "\n"
            elif offer_type == 'barter':
                barter_res = RESOURCES.get_resource(exchange.get('barter_resource', ''))
                barter_amount = exchange.get('barter_amount', 0)
                if barter_res:
                    text += f"   ‚áÑ –ó–∞: {barter_res.emoji} {barter_res.label} x{barter_amount}\n"
            
            text += "\n"
        
        return text
    
    async def _filter_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º"""
        text = "üîç *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏*\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º:"
        return text
    
    async def _details_screen(self, scene_data: dict):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"""
        exchange_id = scene_data.get('selected_exchange_id')
        
        if not exchange_id:
            return "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        cache_key = f'exchange_details_{exchange_id}'
        cached_data = scene_data.get(cache_key)
        
        if cached_data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            exchange = cached_data.get('exchange')
            seller_name = cached_data.get('seller_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è')
        else:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
            exchange = await get_exchange(id=exchange_id)
            
            if isinstance(exchange, str):
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {exchange}"
            
            if not exchange:
                return "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏-–ø—Ä–æ–¥–∞–≤—Ü–µ
            seller_company_id = exchange.get('company_id')
            seller_company = await get_company(id=seller_company_id)
            seller_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
            if isinstance(seller_company, dict):
                seller_name = seller_company.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è')
            
            # –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            scene_data[cache_key] = {
                'exchange': exchange,
                'seller_name': seller_name
            }
            await self.scene.set_data('scene', scene_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        text = "üìã *–î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
        text += f"üè¢ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* {seller_name}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
        sell_res = RESOURCES.get_resource(exchange.get('sell_resource', ''))
        if sell_res:
            sell_amount = exchange.get('sell_amount_per_trade', 0)
            total_stock = exchange.get('total_stock', 0)
            
            text += f"*–¢–æ–≤–∞—Ä:* {sell_res.emoji} {sell_res.label}\n"
            text += f"*–ó–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É:* {sell_amount} —à—Ç.\n"
            text += f"*–í—Å–µ–≥–æ –≤ –Ω–∞–ª–∏—á–∏–∏:* {total_stock} —à—Ç.\n"
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            available_trades = total_stock // sell_amount if sell_amount > 0 else 0
            text += f"*–î–æ—Å—Ç—É–ø–Ω–æ —Å–¥–µ–ª–æ–∫:* {available_trades}\n\n"
        
        # –£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏
        offer_type = exchange.get('offer_type', 'money')
        
        if offer_type == 'money':
            price = exchange.get('price', 0)
            text += f"üí∞ *–¢–∏–ø:* –ó–∞ –º–æ–Ω–µ—Ç—ã\n"
            text += f"üí∞ *–¶–µ–Ω–∞ –∑–∞ —Å–¥–µ–ª–∫—É:* {price:,}".replace(",", " ") + "\n"
        elif offer_type == 'barter':
            barter_res = RESOURCES.get_resource(exchange.get('barter_resource', ''))
            barter_amount = exchange.get('barter_amount', 0)
            if barter_res:
                text += f"‚áÑ *–¢–∏–ø:* –ë–∞—Ä—Ç–µ—Ä\n"
                text += f"‚áÑ *–¢—Ä–µ–±—É–µ—Ç—Å—è:* {barter_res.emoji} {barter_res.label} x{barter_amount}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        created_at = exchange.get('created_at', 0)
        if created_at:
            text += f"\n‚è∞ *–°–æ–∑–¥–∞–Ω–æ –Ω–∞ —Ö–æ–¥—É:* {created_at}\n"
        
        return text
    
    async def _create_select_type_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        text = "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n\n"
        text += "üí∞ *–ó–∞ –¥–µ–Ω—å–≥–∏* - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞–ø–ª–∞—Ç–∏—Ç –º–æ–Ω–µ—Ç–∞–º–∏\n"
        text += "‚áÑ *–ë–∞—Ä—Ç–µ—Ä* - –æ–±–º–µ–Ω —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ç–æ–≤–∞—Ä\n"
        return text
    
    async def _create_select_sell_resource_screen(self, scene_data: dict, company_id: int):
        """–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
        text = "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*\n\n"
        
        offer_type = scene_data.get('create_offer_type', 'money')
        type_text = "üí∞ –ó–∞ –¥–µ–Ω—å–≥–∏" if offer_type == 'money' else "‚áÑ –ë–∞—Ä—Ç–µ—Ä"
        text += f"–¢–∏–ø: {type_text}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–æ —Å–∫–ª–∞–¥–∞:"
        return text
    
    async def _create_input_amount_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞ —Å–¥–µ–ª–∫—É"""
        text = "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*\n\n"
        
        sell_resource = scene_data.get('create_sell_resource')
        if sell_resource:
            resource = RESOURCES.get_resource(sell_resource)
            if resource:
                text += f"–¢–æ–≤–∞—Ä: {resource.emoji} {resource.label}\n\n"
        
        text += "üí¨ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É*\n\n"
        text += "–ü—Ä–∏–º–µ—Ä: `10` - –∑–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å—Å—è 10 –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞"
        return text
    
    async def _create_input_count_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫"""
        text = "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*\n\n"
        
        sell_resource = scene_data.get('create_sell_resource')
        sell_amount = scene_data.get('create_sell_amount', 0)
        
        if sell_resource:
            resource = RESOURCES.get_resource(sell_resource)
            if resource:
                text += f"–¢–æ–≤–∞—Ä: {resource.emoji} {resource.label} x{sell_amount} –∑–∞ —Å–¥–µ–ª–∫—É\n\n"
        
        text += "üí¨ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫*\n\n"
        text += f"–ü—Ä–∏–º–µ—Ä: `5` - –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ 5 —Å–¥–µ–ª–æ–∫ –ø–æ {sell_amount} –µ–¥–∏–Ω–∏—Ü\n"
        text += f"–í—Å–µ–≥–æ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {sell_amount} √ó 5 = {sell_amount * 5} –µ–¥–∏–Ω–∏—Ü"
        return text
    
    async def _create_input_price_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã"""
        text = "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*\n\n"
        
        sell_resource = scene_data.get('create_sell_resource')
        sell_amount = scene_data.get('create_sell_amount', 0)
        count_offers = scene_data.get('create_count_offers', 1)
        
        if sell_resource:
            resource = RESOURCES.get_resource(sell_resource)
            if resource:
                text += f"–¢–æ–≤–∞—Ä: {resource.emoji} {resource.label}\n"
                text += f"–ó–∞ —Å–¥–µ–ª–∫—É: {sell_amount} —à—Ç.\n"
                text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {count_offers}\n\n"
        
        text += "üí¨ *–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É*\n\n"
        text += "–ü—Ä–∏–º–µ—Ä: `1000` - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞–ø–ª–∞—Ç–∏—Ç 1000 –º–æ–Ω–µ—Ç –∑–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É"
        return text
    
    async def _create_select_barter_resource_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –±–∞—Ä—Ç–µ—Ä–∞"""
        text = "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*\n\n"
        
        sell_resource = scene_data.get('create_sell_resource')
        sell_amount = scene_data.get('create_sell_amount', 0)
        count_offers = scene_data.get('create_count_offers', 1)
        
        if sell_resource:
            resource = RESOURCES.get_resource(sell_resource)
            if resource:
                text += f"–ü—Ä–æ–¥–∞—ë—Ç–µ: {resource.emoji} {resource.label} x{sell_amount}\n"
                text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {count_offers}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ –æ–±–º–µ–Ω:"
        return text
    
    async def _create_input_barter_amount_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –±–∞—Ä—Ç–µ—Ä–∞"""
        text = "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*\n\n"
        
        sell_resource = scene_data.get('create_sell_resource')
        sell_amount = scene_data.get('create_sell_amount', 0)
        barter_resource = scene_data.get('create_barter_resource')
        
        if sell_resource:
            sell_res = RESOURCES.get_resource(sell_resource)
            if sell_res:
                text += f"–ü—Ä–æ–¥–∞—ë—Ç–µ: {sell_res.emoji} {sell_res.label} x{sell_amount}\n"
        
        if barter_resource:
            barter_res = RESOURCES.get_resource(barter_resource)
            if barter_res:
                text += f"–í –æ–±–º–µ–Ω –Ω–∞: {barter_res.emoji} {barter_res.label}\n\n"
        
        text += "üí¨ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –æ–±–º–µ–Ω–∞*\n\n"
        text += "–ü—Ä–∏–º–µ—Ä: `5` - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–¥–∞—Å—Ç 5 –µ–¥–∏–Ω–∏—Ü —Ä–µ—Å—É—Ä—Å–∞ –∑–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É"
        return text
    
    async def _create_confirm_screen(self, scene_data: dict):
        """–≠–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        text = "‚ûï *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*\n\n"
        
        sell_resource = scene_data.get('create_sell_resource')
        sell_amount = scene_data.get('create_sell_amount', 0)
        count_offers = scene_data.get('create_count_offers', 1)
        offer_type = scene_data.get('create_offer_type', 'money')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤–∞–µ–º–æ–º —Ç–æ–≤–∞—Ä–µ
        if sell_resource:
            resource = RESOURCES.get_resource(sell_resource)
            if resource:
                text += f"*–ü—Ä–æ–¥–∞—ë—Ç–µ:*\n"
                text += f"‚îî {resource.emoji} {resource.label} x{sell_amount} –∑–∞ —Å–¥–µ–ª–∫—É\n"
                text += f"‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {count_offers}\n"
                text += f"‚îî –í—Å–µ–≥–æ: {sell_amount * count_offers} –µ–¥–∏–Ω–∏—Ü\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª–æ–≤–∏—è—Ö
        if offer_type == 'money':
            price = scene_data.get('create_price', 0)
            text += f"*–£—Å–ª–æ–≤–∏—è:*\n"
            text += f"‚îî üí∞ –ó–∞ –¥–µ–Ω—å–≥–∏: {price:,}".replace(",", " ") + " –º–æ–Ω–µ—Ç –∑–∞ —Å–¥–µ–ª–∫—É\n"
            text += f"‚îî –í—Å–µ–≥–æ –ø–æ–ª—É—á–∏—Ç–µ: {price * count_offers:,}".replace(",", " ") + " –º–æ–Ω–µ—Ç\n"
        elif offer_type == 'barter':
            barter_resource = scene_data.get('create_barter_resource')
            barter_amount = scene_data.get('create_barter_amount', 0)
            if barter_resource:
                barter_res = RESOURCES.get_resource(barter_resource)
                if barter_res:
                    text += f"*–£—Å–ª–æ–≤–∏—è:*\n"
                    text += f"‚îî ‚áÑ –ë–∞—Ä—Ç–µ—Ä: {barter_res.emoji} {barter_res.label} x{barter_amount} –∑–∞ —Å–¥–µ–ª–∫—É\n"
                    text += f"‚îî –í—Å–µ–≥–æ –ø–æ–ª—É—á–∏—Ç–µ: {barter_amount * count_offers} –µ–¥–∏–Ω–∏—Ü\n"
        
        text += "\n‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è*"
        return text
    
    async def buttons_worker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        session_id = scene_data.get('session_id')
        exchange_state = scene_data.get('exchange_state', 'list')
        
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        if exchange_state == 'list':
            filter_resource = scene_data.get('filter_resource', None)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
            if filter_resource:
                exchanges = await get_exchanges(
                    session_id=session_id,
                    sell_resource=filter_resource
                )
            else:
                exchanges = await get_exchanges(session_id=session_id)
            
            if isinstance(exchanges, list) and len(exchanges) > 0:
                # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
                items_per_page = 5
                current_page = scene_data.get('list_page', 0)
                total_pages = scene_data.get('total_pages', 1)
                
                start_idx = current_page * items_per_page
                end_idx = start_idx + items_per_page
                page_exchanges = exchanges[start_idx:end_idx]
                
                # –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                for exchange in page_exchanges:
                    sell_res = RESOURCES.get_resource(exchange.get('sell_resource', ''))
                    if not sell_res:
                        continue
                    
                    sell_amount = exchange.get('sell_amount_per_trade', 0)
                    offer_type = exchange.get('offer_type', 'money')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                    if offer_type == 'money':
                        price = exchange.get('price', 0)
                        btn_text = f"{sell_res.emoji} {sell_res.label} x{sell_amount} ‚Üí {price:,}üí∞".replace(",", " ")
                    else:  # barter
                        barter_res = RESOURCES.get_resource(exchange.get('barter_resource', ''))
                        barter_amount = exchange.get('barter_amount', 0)
                        if barter_res:
                            btn_text = f"{sell_res.emoji} {sell_res.label} x{sell_amount} ‚áÑ {barter_res.emoji} x{barter_amount}"
                        else:
                            btn_text = f"{sell_res.emoji} {sell_res.label} x{sell_amount}"
                    
                    buttons.append({
                        'text': btn_text,
                        'callback_data': callback_generator(
                            self.scene.__scene_name__,
                            'view_exchange',
                            str(exchange.get('id'))
                        )
                    })
                
                # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π)
                if total_pages > 1:
                    nav_row = []
                    
                    prev_page = (current_page - 1) % total_pages
                    nav_row.append({
                        'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                        'callback_data': callback_generator(
                            self.scene.__scene_name__,
                            'list_page',
                            str(prev_page)
                        )
                    })
                    
                    # –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
                    nav_row.append({
                        'text': 'üîç –§–∏–ª—å—Ç—Ä',
                        'callback_data': callback_generator(
                            self.scene.__scene_name__,
                            'open_filter'
                        )
                    })
                    
                    next_page = (current_page + 1) % total_pages
                    nav_row.append({
                        'text': '–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è',
                        'callback_data': callback_generator(
                            self.scene.__scene_name__,
                            'list_page',
                            str(next_page)
                        )
                    })
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                    for i, btn in enumerate(nav_row):
                        btn['next_line'] = i == 0
                        buttons.append(btn)
                else:
                    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–¥–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞
                    buttons.append({
                        'text': 'üîç –§–∏–ª—å—Ç—Ä',
                        'callback_data': callback_generator(
                            self.scene.__scene_name__,
                            'open_filter'
                        ),
                        'next_line': True
                    })
            else:
                # –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä
                buttons.append({
                    'text': 'üîç –§–∏–ª—å—Ç—Ä',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'open_filter'
                    )
                })
            
            # –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ)
            buttons.append({
                'text': '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'create_offer'
                ),
                'next_line': True
            })
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            buttons.append({
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back_to_menu'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        elif exchange_state == 'filter':
            filter_page = scene_data.get('filter_page', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
            filter_buttons = self.item_filter.get_buttons(
                current_page=filter_page,
                add_reset_button=True,
                reset_callback='reset_filter'
            )
            buttons.extend(filter_buttons)
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
            buttons.append({
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back_to_list'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        elif exchange_state == 'details':
            exchange_id = scene_data.get('selected_exchange_id')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            cache_key = f'exchange_details_{exchange_id}'
            cached_data = scene_data.get(cache_key)
            
            if cached_data:
                exchange = cached_data.get('exchange')
            else:
                # –ï—Å–ª–∏ –∫–µ—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
                exchange = await get_exchange(id=exchange_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
            if isinstance(exchange, dict):
                seller_id = exchange.get('company_id')
                
                if seller_id != company_id:
                    # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
                    buttons.append({
                        'text': 'üí∞ –ö—É–ø–∏—Ç—å',
                        'callback_data': callback_generator(
                            self.scene.__scene_name__,
                            'buy_exchange',
                            str(exchange_id)
                        )
                    })
                else:
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    buttons.append({
                        'text': '‚ö†Ô∏è –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                        'callback_data': callback_generator(
                            self.scene.__scene_name__,
                            'own_offer'
                        )
                    })
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
            buttons.append({
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'back_to_list'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        elif exchange_state == 'create_select_type':
            buttons.append({
                'text': 'üí∞ –ó–∞ –¥–µ–Ω—å–≥–∏',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'create_type',
                    'money'
                ),
                'ignore_row': True
            })
            
            buttons.append({
                'text': '‚áÑ –ë–∞—Ä—Ç–µ—Ä',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'create_type',
                    'barter'
                ),
                'ignore_row': True
            })
            
            buttons.append({
                'text': '‚Ü™Ô∏è –û—Ç–º–µ–Ω–∞',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'cancel_create'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        elif exchange_state == 'create_select_sell_resource':
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∫–æ–º–ø–∞–Ω–∏–∏
            company_data = await get_company(id=company_id)
            
            # –í API –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'warehouses', –∞ –Ω–µ 'inventory'
            if isinstance(company_data, dict) and 'warehouses' in company_data:
                inv_items = company_data['warehouses']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
                has_items = False
                for resource_key, amount in inv_items.items():
                    if amount > 0:
                        resource = RESOURCES.get_resource(resource_key)
                        if resource:
                            has_items = True
                            buttons.append({
                                'text': f'{resource.emoji} {resource.label} ({amount})',
                                'callback_data': callback_generator(
                                    self.scene.__scene_name__,
                                    'create_sell_res',
                                    resource_key
                                ),
                                'ignore_row': True
                            })
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                if not has_items:
                    buttons.append({
                        'text': '‚ö†Ô∏è –°–∫–ª–∞–¥ –ø—É—Å—Ç',
                        'callback_data': callback_generator(
                            self.scene.__scene_name__,
                            'inventory_empty'
                        ),
                        'ignore_row': True
                    })
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                buttons.append({
                    'text': '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–ª–∞–¥',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'inventory_error'
                    ),
                    'ignore_row': True
                })
            
            buttons.append({
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'cancel_create'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞ —Å–¥–µ–ª–∫—É
        elif exchange_state == 'create_input_amount':
            buttons.append({
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'create_back_to_sell_select'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
        elif exchange_state == 'create_input_count':
            buttons.append({
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'create_back_to_amount'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
        elif exchange_state == 'create_input_price':
            buttons.append({
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'create_back_to_count'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –±–∞—Ä—Ç–µ—Ä–∞
        elif exchange_state == 'create_select_barter_resource':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
            for resource_key, resource in RESOURCES.resources.items():
                buttons.append({
                    'text': f'{resource.emoji} {resource.label}',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'create_barter_res',
                        resource_key
                    ),
                    'ignore_row': True
                })
            
            buttons.append({
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'create_back_to_count'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –±–∞—Ä—Ç–µ—Ä–∞
        elif exchange_state == 'create_input_barter_amount':
            buttons.append({
                'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'create_back_to_barter_select'
                ),
                'next_line': True
            })
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        elif exchange_state == 'create_confirm':
            buttons.append({
                'text': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'create_confirm_final'
                ),
                'ignore_row': True
            })
            
            buttons.append({
                'text': '‚Ü™Ô∏è –û—Ç–º–µ–Ω–∞',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'cancel_create'
                ),
                'next_line': True
            })
        
        self.row_width = 1
        return buttons
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    
    @Page.on_callback('view_exchange')
    async def view_exchange_handler(self, callback: CallbackQuery, args: list):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)
            return
        
        exchange_id = int(args[1])
        scene_data = self.scene.get_data('scene')
        
        scene_data['exchange_state'] = 'details'
        scene_data['selected_exchange_id'] = exchange_id
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
    
    @Page.on_callback('list_page')
    async def list_page_handler(self, callback: CallbackQuery, args: list):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return
        
        page = int(args[1])
        scene_data = self.scene.get_data('scene')
        
        scene_data['list_page'] = page
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
    
    @Page.on_callback('open_filter')
    async def open_filter_handler(self, callback: CallbackQuery, args: list):
        """–û—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞"""
        scene_data = self.scene.get_data('scene')
        
        scene_data['exchange_state'] = 'filter'
        scene_data['filter_page'] = 0
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer("üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    
    @Page.on_callback('filter_page')
    async def filter_page_handler(self, callback: CallbackQuery, args: list):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∏–ª—å—Ç—Ä–∞"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return
        
        page = int(args[1])
        scene_data = self.scene.get_data('scene')
        
        scene_data['filter_page'] = page
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
    
    @Page.on_callback('filter_resource')
    async def filter_resource_handler(self, callback: CallbackQuery, args: list):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ä–µ—Å—É—Ä—Å—É"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–µ—Å—É—Ä—Å", show_alert=True)
            return
        
        resource_id = args[1]
        scene_data = self.scene.get_data('scene')
        session_id = scene_data.get('session_id')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
        if not self.item_filter.resource_exists(resource_id):
            await callback.answer("‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º —Ä–µ—Å—É—Ä—Å–æ–º
        exchanges = await get_exchanges(
            session_id=session_id,
            sell_resource=resource_id
        )
        
        if isinstance(exchanges, str) or not exchanges or len(exchanges) == 0:
            resource_name = self.item_filter.get_resource_name(resource_id)
            await callback.answer(
                f"‚ùå –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å —Ä–µ—Å—É—Ä—Å–æ–º {resource_name}",
                show_alert=True
            )
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        scene_data['filter_resource'] = resource_id
        scene_data['exchange_state'] = 'list'
        scene_data['list_page'] = 0
        await self.scene.set_data('scene', scene_data)
        
        resource_name = self.item_filter.get_resource_name(resource_id)
        await self.scene.update_message()
        await callback.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä: {resource_name}")
    
    @Page.on_callback('reset_filter')
    async def reset_filter_handler(self, callback: CallbackQuery, args: list):
        """–°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞"""
        scene_data = self.scene.get_data('scene')
        
        scene_data['filter_resource'] = None
        scene_data['exchange_state'] = 'list'
        scene_data['list_page'] = 0
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer("üîÑ –§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω")
    
    @Page.on_callback('back_to_list')
    async def back_to_list_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        scene_data = self.scene.get_data('scene')
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        exchange_id = scene_data.get('selected_exchange_id')
        if exchange_id:
            cache_key = f'exchange_details_{exchange_id}'
            if cache_key in scene_data:
                del scene_data[cache_key]
        
        scene_data['exchange_state'] = 'list'
        scene_data['selected_exchange_id'] = None
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
    
    @Page.on_callback('buy_exchange')
    async def buy_exchange_handler(self, callback: CallbackQuery, args: list):
        """–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)
            return
        
        exchange_id = int(args[1])
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 1 —Å–¥–µ–ª–∫–∞)
        result = await buy_exchange_offer(
            offer_id=exchange_id,
            buyer_company_id=company_id,
            quantity=1
        )
        
        if isinstance(result, str):
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result}", show_alert=True)
            return
        
        if isinstance(result, dict) and 'error' in result:
            await callback.answer(f"‚ùå {result['error']}", show_alert=True)
            return
        
        # –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
        scene_data['exchange_state'] = 'list'
        scene_data['selected_exchange_id'] = None
        scene_data['success_message'] = '–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
    
    @Page.on_callback('create_offer')
    async def create_offer_handler(self, callback: CallbackQuery, args: list):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        scene_data = self.scene.get_data('scene')
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        scene_data['exchange_state'] = 'create_select_type'
        scene_data['create_offer_type'] = None
        scene_data['create_sell_resource'] = None
        scene_data['create_sell_amount'] = None
        scene_data['create_count_offers'] = None
        scene_data['create_price'] = None
        scene_data['create_barter_resource'] = None
        scene_data['create_barter_amount'] = None
        
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
        await callback.answer("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    
    @Page.on_callback('own_offer')
    async def own_offer_handler(self, callback: CallbackQuery, args: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        await callback.answer(
            "‚ÑπÔ∏è –≠—Ç–æ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –µ–≥–æ.",
            show_alert=False
        )
    
    @Page.on_callback('create_type')
    async def create_type_handler(self, callback: CallbackQuery, args: list):
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return
        
        offer_type = args[1]
        scene_data = self.scene.get_data('scene')
        
        scene_data['create_offer_type'] = offer_type
        scene_data['exchange_state'] = 'create_select_sell_resource'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        type_text = "üí∞ –ó–∞ –¥–µ–Ω—å–≥–∏" if offer_type == 'money' else "‚áÑ –ë–∞—Ä—Ç–µ—Ä"
        await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ: {type_text}")
    
    @Page.on_callback('create_sell_res')
    async def create_sell_res_handler(self, callback: CallbackQuery, args: list):
        """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return
        
        resource_id = args[1]
        scene_data = self.scene.get_data('scene')
        
        resource = RESOURCES.get_resource(resource_id)
        if not resource:
            await callback.answer("‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        scene_data['create_sell_resource'] = resource_id
        scene_data['exchange_state'] = 'create_input_amount'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ: {resource.emoji} {resource.label}")
    
    @Page.on_text('int')
    async def handle_text_input(self, message: Message, value: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –≤–≤–æ–¥ —á–∏—Å–µ–ª"""
        scene_data = self.scene.get_data('scene')
        exchange_state = scene_data.get('exchange_state', 'list')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
        if value <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞ —Å–¥–µ–ª–∫—É
        if exchange_state == 'create_input_amount':
            scene_data['create_sell_amount'] = value
            scene_data['exchange_state'] = 'create_input_count'
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
        
        # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
        elif exchange_state == 'create_input_count':
            scene_data['create_count_offers'] = value
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            offer_type = scene_data.get('create_offer_type', 'money')
            if offer_type == 'money':
                scene_data['exchange_state'] = 'create_input_price'
            else:
                scene_data['exchange_state'] = 'create_select_barter_resource'
            
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
        
        # –í–≤–æ–¥ —Ü–µ–Ω—ã
        elif exchange_state == 'create_input_price':
            scene_data['create_price'] = value
            scene_data['exchange_state'] = 'create_confirm'
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
        
        # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –±–∞—Ä—Ç–µ—Ä–∞
        elif exchange_state == 'create_input_barter_amount':
            scene_data['create_barter_amount'] = value
            scene_data['exchange_state'] = 'create_confirm'
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
        else:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
            await message.answer("‚ùå –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
    
    @Page.on_callback('create_barter_res')
    async def create_barter_res_handler(self, callback: CallbackQuery, args: list):
        """–í—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –±–∞—Ä—Ç–µ—Ä–∞"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return
        
        resource_id = args[1]
        scene_data = self.scene.get_data('scene')
        
        resource = RESOURCES.get_resource(resource_id)
        if not resource:
            await callback.answer("‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        scene_data['create_barter_resource'] = resource_id
        scene_data['exchange_state'] = 'create_input_barter_amount'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ: {resource.emoji} {resource.label}")
    
    @Page.on_callback('create_confirm_final')
    async def create_confirm_final_handler(self, callback: CallbackQuery, args: list):
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        session_id = scene_data.get('session')
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        sell_resource = scene_data.get('create_sell_resource')
        sell_amount = scene_data.get('create_sell_amount')
        count_offers = scene_data.get('create_count_offers')
        offer_type = scene_data.get('create_offer_type')
        price = scene_data.get('create_price')
        barter_resource = scene_data.get('create_barter_resource')
        barter_amount = scene_data.get('create_barter_amount')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not all([sell_resource, sell_amount, count_offers, offer_type]):
            await callback.answer("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", show_alert=True)
            return
        
        if offer_type == 'money' and not price:
            await callback.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞", show_alert=True)
            return
        
        if offer_type == 'barter' and (not barter_resource or not barter_amount):
            await callback.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —É—Å–ª–æ–≤–∏—è –±–∞—Ä—Ç–µ—Ä–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        result = await create_exchange_offer(
            company_id=company_id,
            session_id=session_id,
            sell_resource=sell_resource,
            sell_amount_per_trade=sell_amount,
            count_offers=count_offers,
            offer_type=offer_type,
            price=price if offer_type == 'money' else None,
            barter_resource=barter_resource if offer_type == 'barter' else None,
            barter_amount=barter_amount if offer_type == 'barter' else None
        )
        
        if isinstance(result, str):
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result}", show_alert=True)
            return
        
        if isinstance(result, dict) and 'error' in result:
            await callback.answer(f"‚ùå {result['error']}", show_alert=True)
            return
        
        # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        scene_data['exchange_state'] = 'list'
        scene_data['list_page'] = 0
        scene_data['success_message'] = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!'
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        scene_data['create_offer_type'] = None
        scene_data['create_sell_resource'] = None
        scene_data['create_sell_amount'] = None
        scene_data['create_count_offers'] = None
        scene_data['create_price'] = None
        scene_data['create_barter_resource'] = None
        scene_data['create_barter_amount'] = None
        
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
        await callback.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", show_alert=True)
    
    @Page.on_callback('cancel_create')
    async def cancel_create_handler(self, callback: CallbackQuery, args: list):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        scene_data = self.scene.get_data('scene')
        
        scene_data['exchange_state'] = 'list'
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        scene_data['create_offer_type'] = None
        scene_data['create_sell_resource'] = None
        scene_data['create_sell_amount'] = None
        scene_data['create_count_offers'] = None
        scene_data['create_price'] = None
        scene_data['create_barter_resource'] = None
        scene_data['create_barter_amount'] = None
        
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
        await callback.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    @Page.on_callback('create_back_to_sell_select')
    async def create_back_to_sell_select_handler(self, callback: CallbackQuery, args: list):
        """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞"""
        scene_data = self.scene.get_data('scene')
        scene_data['exchange_state'] = 'create_select_sell_resource'
        scene_data['create_sell_resource'] = None
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
    
    @Page.on_callback('create_back_to_amount')
    async def create_back_to_amount_handler(self, callback: CallbackQuery, args: list):
        """–ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞ —Å–¥–µ–ª–∫—É"""
        scene_data = self.scene.get_data('scene')
        scene_data['exchange_state'] = 'create_input_amount'
        scene_data['create_sell_amount'] = None
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
    
    @Page.on_callback('create_back_to_count')
    async def create_back_to_count_handler(self, callback: CallbackQuery, args: list):
        """–ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫"""
        scene_data = self.scene.get_data('scene')
        scene_data['exchange_state'] = 'create_input_count'
        scene_data['create_count_offers'] = None
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
    
    @Page.on_callback('create_back_to_barter_select')
    async def create_back_to_barter_select_handler(self, callback: CallbackQuery, args: list):
        """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –±–∞—Ä—Ç–µ—Ä–∞"""
        scene_data = self.scene.get_data('scene')
        scene_data['exchange_state'] = 'create_select_barter_resource'
        scene_data['create_barter_resource'] = None
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
    
    @Page.on_callback('inventory_empty')
    async def inventory_empty_handler(self, callback: CallbackQuery, args: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        await callback.answer(
            "‚ùå –ù–∞ –≤–∞—à–µ–º —Å–∫–ª–∞–¥–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏",
            show_alert=True
        )
    
    @Page.on_callback('inventory_error')
    async def inventory_error_handler(self, callback: CallbackQuery, args: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        await callback.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–ª–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            show_alert=True
        )
        await self.scene.update_message()
    
    @Page.on_callback('page_info')
    async def page_info_handler(self, callback: CallbackQuery, args: list):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)"""
        pass
    
    @Page.on_callback('back_to_menu')
    async def back_to_menu_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        scene_data = self.scene.get_data('scene')
        scene_data['exchange_state'] = 'list'
        scene_data['list_page'] = 0
        scene_data['filter_page'] = 0
        scene_data['filter_resource'] = None
        scene_data['selected_exchange_id'] = None
        scene_data['success_message'] = ''
        await self.scene.set_data('scene', scene_data)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await self.scene.update_page('main-page')
        await callback.answer("‚Ü™Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
