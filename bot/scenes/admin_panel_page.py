from oms import Page
from aiogram.types import CallbackQuery, Message
from oms.utils import callback_generator
from modules.ws_client import (
    get_sessions, get_session, create_session, delete_session, update_session_stage,
    get_companies, get_company, notforgame_update_company_name,
    get_users, get_user, update_user, delete_user
)
from global_modules.logs import Logger
import math

bot_logger = Logger.get_logger("bot")


class AdminPanelPage(Page):
    
    __page_name__ = "admin-panel-page"
    
    async def data_preparate(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        scene_data = self.scene.get_data('scene')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'admin_state' not in scene_data:
            scene_data['admin_state'] = 'main'  # main, sessions, companies, users
            scene_data['admin_substate'] = None  # create_session, delete_session, change_stage –∏ —Ç.–¥.
            scene_data['admin_page'] = 0  # –î–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            scene_data['admin_temp_data'] = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self.scene.set_data('scene', scene_data)
    
    async def content_worker(self):
        """–ö–æ–Ω—Ç–µ–Ω—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        scene_data = self.scene.get_data('scene')
        admin_state = scene_data.get('admin_state', 'main')
        admin_substate = scene_data.get('admin_substate')
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if admin_state == 'main':
            return await self._main_menu()
        
        # === –°–ï–°–°–ò–ò ===
        elif admin_state == 'sessions':
            if admin_substate is None:
                return await self._sessions_menu_content()
            elif admin_substate == 'input_create':
                return await self._session_input_create()
            elif admin_substate == 'list_delete':
                return await self._session_list_delete()
            elif admin_substate == 'confirm_delete':
                return await self._session_confirm_delete()
            elif admin_substate == 'list_change_stage':
                return await self._session_list_change_stage()
            elif admin_substate == 'select_stage':
                return await self._session_select_stage()
        
        # === –ö–û–ú–ü–ê–ù–ò–ò ===
        elif admin_state == 'companies':
            if admin_substate is None:
                return await self._companies_menu_content()
            elif admin_substate == 'list':
                return await self._companies_list()
            elif admin_substate == 'input_info':
                return await self._company_input_info()
            elif admin_substate == 'show_info':
                return await self._company_show_info()
            elif admin_substate == 'input_rename_id':
                return await self._company_input_rename_id()
            elif admin_substate == 'input_rename_name':
                return await self._company_input_rename_name()
        
        # === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
        elif admin_state == 'users':
            if admin_substate is None:
                return await self._users_menu_content()
            elif admin_substate == 'list':
                return await self._users_list()
            elif admin_substate == 'input_rename_id':
                return await self._user_input_rename_id()
            elif admin_substate == 'input_rename_name':
                return await self._user_input_rename_name()
            elif admin_substate == 'input_delete_id':
                return await self._user_input_delete_id()
            elif admin_substate == 'confirm_delete':
                return await self._user_confirm_delete()
        
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    
    # ============================================
    # –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
    # ============================================
    
    async def _main_menu(self):
        return """üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:"""
    
    async def buttons_worker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        scene_data = self.scene.get_data('scene')
        admin_state = scene_data.get('admin_state', 'main')
        admin_substate = scene_data.get('admin_substate')
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if admin_state == 'main':
            return await self._main_menu_buttons()
        
        # –°–µ—Å—Å–∏–∏
        elif admin_state == 'sessions':
            if admin_substate is None:
                return await self._sessions_menu_buttons()
            elif admin_substate == 'input_create':
                return await self._session_create_input_buttons()
            elif admin_substate == 'list_delete':
                return await self._session_delete_buttons()
            elif admin_substate == 'confirm_delete':
                return await self._session_confirm_buttons()
            elif admin_substate == 'list_change_stage':
                return await self._session_change_stage_list_buttons()
            elif admin_substate == 'select_stage':
                return await self._session_select_stage_buttons()
        
        # –ö–æ–º–ø–∞–Ω–∏–∏
        elif admin_state == 'companies':
            if admin_substate is None:
                return await self._companies_menu_buttons()
            elif admin_substate == 'list':
                return await self._companies_list_buttons()
            elif admin_substate == 'show_info':
                return await self._company_info_back_button()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        elif admin_state == 'users':
            if admin_substate is None:
                return await self._users_menu_buttons()
            elif admin_substate == 'list':
                return await self._users_list_buttons()
            elif admin_substate == 'confirm_delete':
                return await self._user_confirm_delete_buttons()
        
        return []
    
    async def _main_menu_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        buttons = [
            {'text': 'üéÆ –°–µ—Å—Å–∏–∏', 'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'sessions')},
            {'text': 'üè¢ –ö–æ–º–ø–∞–Ω–∏–∏', 'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'companies')},
            {'text': 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'users')},
            {'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': callback_generator(self.scene.__scene_name__, 'admin_back')},
        ]
        self.row_width = 1
        return buttons
    
    # ============================================
    # –°–ï–°–°–ò–ò - –ú–ï–ù–Æ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    # ============================================
    
    async def _sessions_menu_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Å–µ—Å—Å–∏–π"""
        buttons = [
            {'text': '‚ûï –°–æ–∑–¥–∞—Ç—å', 'callback_data': callback_generator(self.scene.__scene_name__, 'session_create')},
            {'text': 'üóë –£–¥–∞–ª–∏—Ç—å', 'callback_data': callback_generator(self.scene.__scene_name__, 'session_delete')},
            {'text': 'üîÑ –°–º–µ–Ω–∏—Ç—å —ç—Ç–∞–ø', 'callback_data': callback_generator(self.scene.__scene_name__, 'session_change_stage')},
            {'text': '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'main')},
        ]
        self.row_width = 2
        return buttons
    
    async def _sessions_menu_content(self):
        """–ö–æ–Ω—Ç–µ–Ω—Ç –º–µ–Ω—é —Å–µ—Å—Å–∏–π"""
        scene_data = self.scene.get_data('scene')
        last_message = scene_data.get('admin_temp_data', {}).get('last_message', '')
        
        text = "üéÆ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏*\n\n"
        
        if last_message:
            text += f"{last_message}\n\n"
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
            scene_data['admin_temp_data']['last_message'] = ''
            await self.scene.set_data('scene', scene_data)
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        return text
    
    async def _session_input_create(self):
        return """üéÆ *–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
    
    async def _session_create_input_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ ID —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏"""
        buttons = [
            {'text': 'üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', 'callback_data': callback_generator(self.scene.__scene_name__, 'session_create_auto')},
            {'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'sessions')},
        ]
        self.row_width = 1
        return buttons
    
    async def _session_list_delete(self):
        sessions = await get_sessions()
        if not sessions or len(sessions) == 0:
            return "üìã *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*"
        
        text = "üóë *–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏*\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        
        for session in sessions:
            sid = session.get('id', 'N/A')
            stage = session.get('stage', 'N/A')
            step = session.get('step', 0)
            text += f"‚Ä¢ `{sid}` | –≠—Ç–∞–ø: {stage} | –•–æ–¥: {step}\n"
        
        return text
    
    async def _session_confirm_delete(self):
        scene_data = self.scene.get_data('scene')
        session_id = scene_data.get('admin_temp_data', {}).get('delete_session_id')
        return f"""‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é `{session_id}`?

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"""
    
    async def _session_list_change_stage(self):
        sessions = await get_sessions()
        if not sessions or len(sessions) == 0:
            return "üìã *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π*"
        
        text = "üîÑ *–°–º–µ–Ω–∞ —ç—Ç–∞–ø–∞ —Å–µ—Å—Å–∏–∏*\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é:\n\n"
        
        for session in sessions:
            sid = session.get('id', 'N/A')
            stage = session.get('stage', 'N/A')
            step = session.get('step', 0)
            text += f"‚Ä¢ `{sid}`\n  –≠—Ç–∞–ø: *{stage}* | –•–æ–¥: {step}\n\n"
        
        return text
    
    async def _session_select_stage(self):
        scene_data = self.scene.get_data('scene')
        session_id = scene_data.get('admin_temp_data', {}).get('change_stage_session_id')
        add_schedule = scene_data.get('admin_temp_data', {}).get('add_schedule', True)
        
        schedule_icon = "‚úÖ" if add_schedule else "‚ùå"
        
        return f"""üîÑ *–°–º–µ–Ω–∞ —ç—Ç–∞–ø–∞ —Å–µ—Å—Å–∏–∏*

–°–µ—Å—Å–∏—è: `{session_id}`
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä: {schedule_icon}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —ç—Ç–∞–ø:"""
    
    async def _session_delete_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        sessions = await get_sessions()
        buttons = []
        
        if sessions and len(sessions) > 0:
            for session in sessions:
                sid = session.get('id', 'N/A')
                stage = session.get('stage', 'N/A')
                buttons.append({
                    'text': f"{sid[:8]}... | {stage}",
                    'callback_data': callback_generator(self.scene.__scene_name__, 'session_delete_confirm', sid)
                })
        
        buttons.append({
            'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'sessions')
        })
        
        self.row_width = 1
        return buttons
    
    async def _session_confirm_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        scene_data = self.scene.get_data('scene')
        session_id = scene_data.get('admin_temp_data', {}).get('delete_session_id')
        
        buttons = [
            {'text': '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'callback_data': callback_generator(self.scene.__scene_name__, 'session_delete_yes', session_id)},
            {'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'sessions')},
        ]
        self.row_width = 2
        return buttons
    
    async def _session_change_stage_list_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π –¥–ª—è —Å–º–µ–Ω—ã —ç—Ç–∞–ø–∞"""
        sessions = await get_sessions()
        buttons = []
        
        if sessions and len(sessions) > 0:
            for session in sessions:
                sid = session.get('id', 'N/A')
                stage = session.get('stage', 'N/A')
                buttons.append({
                    'text': f"{sid[:8]}... | {stage}",
                    'callback_data': callback_generator(self.scene.__scene_name__, 'session_select_for_stage', sid)
                })
        
        buttons.append({
            'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'sessions')
        })
        
        self.row_width = 1
        return buttons
    
    async def _session_select_stage_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–ø–∞"""
        scene_data = self.scene.get_data('scene')
        add_schedule = scene_data.get('admin_temp_data', {}).get('add_schedule', True)
        schedule_icon = "‚úÖ" if add_schedule else "‚ùå"
        
        stages = [
            ('FreeUserConnect', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'),
            ('CellSelect', '–í—ã–±–æ—Ä –∫–ª–µ—Ç–æ–∫'),
            ('Game', '–ò–≥—Ä–∞'),
            ('End', '–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã')
        ]
        
        buttons = []
        for stage_key, stage_name in stages:
            buttons.append({
                'text': stage_name,
                'callback_data': callback_generator(self.scene.__scene_name__, 'session_set_stage', stage_key)
            })
        
        buttons.append({
            'text': f'{schedule_icon} –ú–µ–Ω—è—Ç—å —ç—Ç–∞–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏',
            'callback_data': callback_generator(self.scene.__scene_name__, 'session_toggle_schedule')
        })
        buttons.append({
            'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(self.scene.__scene_name__, 'session_change_stage')
        })
        
        self.row_width = 2
        return buttons
    
    # ============================================
    # –ö–û–ú–ü–ê–ù–ò–ò - –ö–û–ù–¢–ï–ù–¢ –ò –ö–ù–û–ü–ö–ò
    # ============================================
    
    async def _companies_menu_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        scene_data = self.scene.get_data('scene')
        page = scene_data.get('admin_page', 0)
        
        companies = await get_companies()
        if not companies:
            companies = []
        
        per_page = 30
        total_pages = math.ceil(len(companies) / per_page) if companies else 1
        
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append({
                'text': '‚¨ÖÔ∏è –ü—Ä–µ–¥.',
                'callback_data': callback_generator(self.scene.__scene_name__, 'companies_page', page - 1)
            })
        
        if page < total_pages - 1:
            nav_buttons.append({
                'text': '‚û°Ô∏è –°–ª–µ–¥.',
                'callback_data': callback_generator(self.scene.__scene_name__, 'companies_page', page + 1)
            })
        
        if nav_buttons:
            buttons.extend(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons.extend([
            {'text': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏', 'callback_data': callback_generator(self.scene.__scene_name__, 'company_info')},
            {'text': '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', 'callback_data': callback_generator(self.scene.__scene_name__, 'company_rename')},
            {'text': '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'main')},
        ])
        
        self.row_width = 2
        return buttons
    
    async def _companies_menu_content(self):
        """–ö–æ–Ω—Ç–µ–Ω—Ç –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π —Å–æ —Å–ø–∏—Å–∫–æ–º"""
        scene_data = self.scene.get_data('scene')
        page = scene_data.get('admin_page', 0)
        last_message = scene_data.get('admin_temp_data', {}).get('last_message', '')
        
        text = "üè¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏*\n\n"
        
        if last_message:
            text += f"{last_message}\n\n"
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
            scene_data['admin_temp_data']['last_message'] = ''
            await self.scene.set_data('scene', scene_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
        companies = await get_companies()
        if not companies or len(companies) == 0:
            text += "üìã –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π\n\n"
        else:
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (30 –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
            per_page = 30
            total_pages = math.ceil(len(companies) / per_page)
            start_idx = page * per_page
            end_idx = start_idx + per_page
            page_companies = companies[start_idx:end_idx]
            
            text += f"üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π* (—Å—Ç—Ä. {page + 1}/{total_pages})\n\n"
            
            for company in page_companies:
                cid = company.get('id', 'N/A')
                name = company.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                session = company.get('session_id', 'N/A')
                text += f"‚Ä¢ ID: `{cid}` | {name}\n  –°–µ—Å—Å–∏—è: `{session}`\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        return text
    
    async def _companies_list(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        scene_data = self.scene.get_data('scene')
        page = scene_data.get('admin_page', 0)
        
        companies = await get_companies()
        if not companies or len(companies) == 0:
            return "üìã *–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π*"
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (30 –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        per_page = 30
        total_pages = math.ceil(len(companies) / per_page)
        start_idx = page * per_page
        end_idx = start_idx + per_page
        page_companies = companies[start_idx:end_idx]
        
        text = f"üè¢ *–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})\n\n"
        
        for company in page_companies:
            cid = company.get('id', 'N/A')
            name = company.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            session = company.get('session_id', 'N/A')
            text += f"‚Ä¢ ID: `{cid}` | {name} | –°–µ—Å—Å–∏—è: `{session}`\n"
        
        return text
    
    async def _companies_list_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π"""
        scene_data = self.scene.get_data('scene')
        page = scene_data.get('admin_page', 0)
        
        companies = await get_companies()
        if not companies:
            companies = []
        
        per_page = 30
        total_pages = math.ceil(len(companies) / per_page) if companies else 1
        
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append({
                'text': '‚¨ÖÔ∏è',
                'callback_data': callback_generator(self.scene.__scene_name__, 'companies_page', page - 1)
            })
        
        nav_buttons.append({
            'text': '‚ÑπÔ∏è –ò–Ω—Ñ–æ',
            'callback_data': callback_generator(self.scene.__scene_name__, 'company_info')
        })
        
        if page < total_pages - 1:
            nav_buttons.append({
                'text': '‚û°Ô∏è',
                'callback_data': callback_generator(self.scene.__scene_name__, 'companies_page', page + 1)
            })
        
        buttons.extend(nav_buttons)
        buttons.append({
            'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'companies')
        })
        
        self.row_width = 3
        return buttons
    
    async def _company_input_info(self):
        return """‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    
    async def _company_show_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('admin_temp_data', {}).get('info_company_id')
        
        company = await get_company(id=company_id)
        if not company or 'error' in company:
            return f"‚ùå –ö–æ–º–ø–∞–Ω–∏—è —Å ID `{company_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cid = company.get('id')
        name = company.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        balance = company.get('balance', 0)
        reputation = company.get('reputation', 0)
        session_id = company.get('session_id', 'N/A')
        
        # –ö—Ä–µ–¥–∏—Ç—ã –∏ –≤–∫–ª–∞–¥—ã
        credits = company.get('credits', [])
        deposits = company.get('deposits', [])
        
        # –í–ª–∞–¥–µ–ª–µ—Ü –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        owner_id = company.get('owner', 0)
        users = await get_users(company_id=cid)
        
        # –°–∫–ª–∞–¥
        warehouses = company.get('warehouses', {})
        total_items = sum(warehouses.values())
        
        # –ü–æ–∑–∏—Ü–∏—è
        cell_position = company.get('cell_position', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
        
        # –ù–∞–ª–æ–≥–∏
        tax_debt = company.get('tax_debt', 0)
        overdue_steps = company.get('overdue_steps', 0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"üè¢ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏*\n\n"
        text += f"*–û—Å–Ω–æ–≤–Ω–æ–µ:*\n"
        text += f"‚Ä¢ ID: `{cid}`\n"
        text += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        text += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {balance:,} üí∞\n".replace(",", " ")
        text += f"‚Ä¢ –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation} ‚≠ê\n"
        text += f"‚Ä¢ –°–µ—Å—Å–∏—è: `{session_id}`\n\n"
        
        text += f"*–§–∏–Ω–∞–Ω—Å—ã:*\n"
        text += f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç–æ–≤: {len(credits)}\n"
        text += f"‚Ä¢ –í–∫–ª–∞–¥–æ–≤: {len(deposits)}\n"
        text += f"‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã–π –¥–æ–ª–≥: {tax_debt:,} üí∞\n".replace(",", " ")
        text += f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ö–æ–¥–æ–≤: {overdue_steps}\n\n"
        
        text += f"*–£—á–∞—Å—Ç–Ω–∏–∫–∏:*\n"
        if users and len(users) > 0:
            for user in users:
                uid = user.get('id')
                username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                is_owner = " üëë" if uid == owner_id else ""
                text += f"‚Ä¢ {username} (`{uid}`){is_owner}\n"
        else:
            text += "‚Ä¢ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        text += "\n"
        
        text += f"*–°–∫–ª–∞–¥:*\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {total_items}\n\n"
        
        text += f"*–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:*\n"
        text += f"‚Ä¢ –ö–ª–µ—Ç–∫–∞: {cell_position}\n"
        
        return text
    
    async def _company_info_back_button(self):
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        buttons = [
            {'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'companies')}
        ]
        self.row_width = 1
        return buttons
    
    async def _company_input_rename_id(self):
        return """‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–æ–º–ø–∞–Ω–∏–∏, –∏–º—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å."""
    
    async def _company_input_rename_name(self):
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('admin_temp_data', {}).get('rename_company_id')
        return f"""‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏*

–ö–æ–º–ø–∞–Ω–∏—è ID: `{company_id}`

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏."""
    
    # ============================================
    # –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò - –ö–û–ù–¢–ï–ù–¢ –ò –ö–ù–û–ü–ö–ò
    # ============================================
    
    async def _users_menu_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        scene_data = self.scene.get_data('scene')
        page = scene_data.get('admin_page', 0)
        
        users = await get_users()
        if not users:
            users = []
        
        per_page = 30
        total_pages = math.ceil(len(users) / per_page) if users else 1
        
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append({
                'text': '‚¨ÖÔ∏è –ü—Ä–µ–¥.',
                'callback_data': callback_generator(self.scene.__scene_name__, 'users_page', page - 1)
            })
        
        if page < total_pages - 1:
            nav_buttons.append({
                'text': '‚û°Ô∏è –°–ª–µ–¥.',
                'callback_data': callback_generator(self.scene.__scene_name__, 'users_page', page + 1)
            })
        
        if nav_buttons:
            buttons.extend(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons.extend([
            {'text': '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', 'callback_data': callback_generator(self.scene.__scene_name__, 'user_rename')},
            {'text': 'üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'callback_data': callback_generator(self.scene.__scene_name__, 'user_delete')},
            {'text': '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'main')},
        ])
        
        self.row_width = 2
        return buttons
    
    async def _users_menu_content(self):
        """–ö–æ–Ω—Ç–µ–Ω—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å–ø–∏—Å–∫–æ–º"""
        scene_data = self.scene.get_data('scene')
        page = scene_data.get('admin_page', 0)
        last_message = scene_data.get('admin_temp_data', {}).get('last_message', '')
        
        text = "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
        
        if last_message:
            text += f"{last_message}\n\n"
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
            scene_data['admin_temp_data']['last_message'] = ''
            await self.scene.set_data('scene', scene_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await get_users()
        if not users or len(users) == 0:
            text += "üìã –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        else:
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (30 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
            per_page = 30
            total_pages = math.ceil(len(users) / per_page)
            start_idx = page * per_page
            end_idx = start_idx + per_page
            page_users = users[start_idx:end_idx]
            
            text += f"üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* (—Å—Ç—Ä. {page + 1}/{total_pages})\n\n"
            
            for user in page_users:
                uid = user.get('id', 'N/A')
                username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                company_id = user.get('company_id', '–ù–µ—Ç')
                session = user.get('session_id', 'N/A')
                text += f"‚Ä¢ ID: `{uid}` | {username}\n  –ö–æ–º–ø–∞–Ω–∏—è: {company_id} | –°–µ—Å—Å–∏—è: `{session}`\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        return text
    
    async def _users_list(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        scene_data = self.scene.get_data('scene')
        page = scene_data.get('admin_page', 0)
        
        users = await get_users()
        if not users or len(users) == 0:
            return "üìã *–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*"
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (30 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        per_page = 30
        total_pages = math.ceil(len(users) / per_page)
        start_idx = page * per_page
        end_idx = start_idx + per_page
        page_users = users[start_idx:end_idx]
        
        text = f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})\n\n"
        
        for user in page_users:
            uid = user.get('id', 'N/A')
            username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            company_id = user.get('company_id', '–ù–µ—Ç')
            session = user.get('session_id', 'N/A')
            text += f"‚Ä¢ ID: `{uid}` | {username}\n  –ö–æ–º–ø–∞–Ω–∏—è: {company_id} | –°–µ—Å—Å–∏—è: `{session}`\n\n"
        
        return text
    
    async def _users_list_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        scene_data = self.scene.get_data('scene')
        page = scene_data.get('admin_page', 0)
        
        users = await get_users()
        if not users:
            users = []
        
        per_page = 30
        total_pages = math.ceil(len(users) / per_page) if users else 1
        
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if page > 0:
            buttons.append({
                'text': '‚¨ÖÔ∏è',
                'callback_data': callback_generator(self.scene.__scene_name__, 'users_page', page - 1)
            })
        
        if page < total_pages - 1:
            buttons.append({
                'text': '‚û°Ô∏è',
                'callback_data': callback_generator(self.scene.__scene_name__, 'users_page', page + 1)
            })
        
        buttons.append({
            'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'users')
        })
        
        self.row_width = 2
        return buttons
    
    async def _user_input_rename_id(self):
        return """‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–º—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å."""
    
    async def _user_input_rename_name(self):
        scene_data = self.scene.get_data('scene')
        user_id = scene_data.get('admin_temp_data', {}).get('rename_user_id')
        return f"""‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: `{user_id}`

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    async def _user_input_delete_id(self):
        return """üóë *–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    
    async def _user_confirm_delete(self):
        scene_data = self.scene.get_data('scene')
        user_id = scene_data.get('admin_temp_data', {}).get('delete_user_id')
        user = await get_user(id=user_id)
        
        if not user or 'error' in user:
            return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        company_id = user.get('company_id', '–ù–µ—Ç')
        
        return f"""‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?

‚Ä¢ ID: `{user_id}`
‚Ä¢ –ò–º—è: {username}
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {company_id}

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"""
    
    async def _user_confirm_delete_buttons(self):
        """–ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        scene_data = self.scene.get_data('scene')
        user_id = scene_data.get('admin_temp_data', {}).get('delete_user_id')
        
        buttons = [
            {'text': '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'callback_data': callback_generator(self.scene.__scene_name__, 'user_delete_yes', user_id)},
            {'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': callback_generator(self.scene.__scene_name__, 'goto', 'users')},
        ]
        self.row_width = 2
        return buttons
    
    # ============================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACKS
    # ============================================
    
    @Page.on_callback('goto')
    async def goto_handler(self, callback: CallbackQuery, args: list):
        """–ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏"""
        scene_data = self.scene.get_data('scene')
        target = args[1] if len(args) > 1 else 'main'
        
        scene_data['admin_state'] = target
        scene_data['admin_substate'] = None
        scene_data['admin_page'] = 0
        scene_data['admin_temp_data'] = {}
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('admin_back')
    async def admin_back_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        scene_data = self.scene.get_data('scene')
        previous_page = scene_data.get('previous_page', 'main-page')
        
        await self.scene.update_page(previous_page)
        await callback.answer()
    
    # === –°–ï–°–°–ò–ò CALLBACKS ===
    
    @Page.on_callback('session_create')
    async def session_create_handler(self, callback: CallbackQuery, args: list):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'input_create'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('session_create_auto')
    async def session_create_auto_handler(self, callback: CallbackQuery, args: list):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        result = await create_session()
        
        if result and 'session' in result:
            session_id = result['session']['id']
            await callback.answer(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏", show_alert=True)
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–π
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = None
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
    
    @Page.on_callback('session_delete')
    async def session_delete_handler(self, callback: CallbackQuery, args: list):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'list_delete'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('session_delete_confirm')
    async def session_delete_confirm_handler(self, callback: CallbackQuery, args: list):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        session_id = args[1] if len(args) > 1 else None
        if not session_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–µ—Å—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'confirm_delete'
        scene_data['admin_temp_data']['delete_session_id'] = session_id
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('session_delete_yes')
    async def session_delete_yes_handler(self, callback: CallbackQuery, args: list):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        session_id = args[1] if len(args) > 1 else None
        if not session_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–µ—Å—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        result = await delete_session(session_id=session_id, really=True)
        
        if result is None:
            await callback.answer(f"‚úÖ –°–µ—Å—Å–∏—è {session_id} —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", show_alert=True)
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–π
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = None
        scene_data['admin_temp_data'] = {}
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
    
    @Page.on_callback('session_change_stage')
    async def session_change_stage_handler(self, callback: CallbackQuery, args: list):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –¥–ª—è —Å–º–µ–Ω—ã —ç—Ç–∞–ø–∞"""
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'list_change_stage'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('session_select_for_stage')
    async def session_select_for_stage_handler(self, callback: CallbackQuery, args: list):
        """–í—ã–±—Ä–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —Å–º–µ–Ω—ã —ç—Ç–∞–ø–∞"""
        session_id = args[1] if len(args) > 1 else None
        if not session_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–µ—Å—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'select_stage'
        scene_data['admin_temp_data']['change_stage_session_id'] = session_id
        scene_data['admin_temp_data']['add_schedule'] = True
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('session_toggle_schedule')
    async def session_toggle_schedule_handler(self, callback: CallbackQuery, args: list):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä"""
        scene_data = self.scene.get_data('scene')
        current = scene_data.get('admin_temp_data', {}).get('add_schedule', True)
        scene_data['admin_temp_data']['add_schedule'] = not current
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('session_set_stage')
    async def session_set_stage_handler(self, callback: CallbackQuery, args: list):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç—Ç–∞–ø —Å–µ—Å—Å–∏–∏"""
        stage = args[1] if len(args) > 1 else None
        if not stage:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —ç—Ç–∞–ø –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        scene_data = self.scene.get_data('scene')
        session_id = scene_data.get('admin_temp_data', {}).get('change_stage_session_id')
        add_schedule = scene_data.get('admin_temp_data', {}).get('add_schedule', True)
        
        result = await update_session_stage(
            session_id=session_id,
            stage=stage,
            add_shedule=add_schedule
        )
        
        if result is None or (isinstance(result, dict) and 'error' not in result):
            await callback.answer(f"‚úÖ –≠—Ç–∞–ø –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {stage}", show_alert=True)
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if isinstance(result, dict) else '–û—à–∏–±–∫–∞'
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", show_alert=True)
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–π
        scene_data['admin_substate'] = None
        scene_data['admin_temp_data'] = {}
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
    
    # === –ö–û–ú–ü–ê–ù–ò–ò CALLBACKS ===
    
    @Page.on_callback('companies_list')
    async def companies_list_handler(self, callback: CallbackQuery, args: list):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π"""
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'list'
        scene_data['admin_page'] = 0
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('companies_page')
    async def companies_page_handler(self, callback: CallbackQuery, args: list):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π"""
        page = int(args[1]) if len(args) > 1 else 0
        
        scene_data = self.scene.get_data('scene')
        scene_data['admin_page'] = page
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('company_info')
    async def company_info_handler(self, callback: CallbackQuery, args: list):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å ID –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'input_info'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('company_rename')
    async def company_rename_handler(self, callback: CallbackQuery, args: list):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å ID –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'input_rename_id'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    # === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò CALLBACKS ===
    
    @Page.on_callback('users_list')
    async def users_list_handler(self, callback: CallbackQuery, args: list):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'list'
        scene_data['admin_page'] = 0
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('users_page')
    async def users_page_handler(self, callback: CallbackQuery, args: list):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        page = int(args[1]) if len(args) > 1 else 0
        
        scene_data = self.scene.get_data('scene')
        scene_data['admin_page'] = page
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('user_rename')
    async def user_rename_handler(self, callback: CallbackQuery, args: list):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'input_rename_id'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('user_delete')
    async def user_delete_handler(self, callback: CallbackQuery, args: list):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'input_delete_id'
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('user_delete_confirm')
    async def user_delete_confirm_handler(self, callback: CallbackQuery, args: list):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = int(args[1]) if len(args) > 1 else None
        if not user_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = 'confirm_delete'
        scene_data['admin_temp_data']['confirm_delete_user_id'] = user_id
        await self.scene.set_data('scene', scene_data)
        
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('user_delete_yes')
    async def user_delete_yes_handler(self, callback: CallbackQuery, args: list):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = int(args[1]) if len(args) > 1 else None
        if not user_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        result = await delete_user(user_id=user_id)
        
        if result and 'error' not in result:
            await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω", show_alert=True)
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", show_alert=True)
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        scene_data = self.scene.get_data('scene')
        scene_data['admin_substate'] = None
        scene_data['admin_temp_data'] = {}
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_message()
    
    # ============================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
    # ============================================
    
    @Page.on_text('str')
    async def handle_text_input(self, message: Message, value: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        scene_data = self.scene.get_data('scene')
        admin_state = scene_data.get('admin_state')
        admin_substate = scene_data.get('admin_substate')
        text = value  # –ò—Å–ø–æ–ª—å–∑—É–µ–º value –≤–º–µ—Å—Ç–æ message.text
        
        # === –°–ï–°–°–ò–ò ===
        if admin_state == 'sessions' and admin_substate == 'input_create':
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
            result = await create_session(session_id=text)
            
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–π
            scene_data['admin_substate'] = None
            
            if result and 'session' in result:
                session_id = result['session']['id']
                scene_data['admin_temp_data']['last_message'] = f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}"
            else:
                error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
                scene_data['admin_temp_data']['last_message'] = f"‚ùå –û—à–∏–±–∫–∞: {error_msg}"
            
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
        
        # === –ö–û–ú–ü–ê–ù–ò–ò ===
        elif admin_state == 'companies':
            if admin_substate == 'input_info':
                # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
                try:
                    company_id = int(text)
                    scene_data['admin_temp_data']['info_company_id'] = company_id
                    scene_data['admin_substate'] = 'show_info'
                    await self.scene.set_data('scene', scene_data)
                    await self.scene.update_message()
                except ValueError:
                    scene_data['admin_temp_data']['last_message'] = "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–æ–º–ø–∞–Ω–∏–∏"
                    await self.scene.set_data('scene', scene_data)
                    await self.scene.update_message()
            
            elif admin_substate == 'input_rename_id':
                # –ó–∞–ø—Ä–æ—Å ID –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
                try:
                    company_id = int(text)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
                    company = await get_company(id=company_id)
                    if not company or 'error' in company:
                        scene_data['admin_temp_data']['last_message'] = f"‚ùå –ö–æ–º–ø–∞–Ω–∏—è —Å ID {company_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        await self.scene.set_data('scene', scene_data)
                        await self.scene.update_message()
                        return
                    
                    scene_data['admin_temp_data']['rename_company_id'] = company_id
                    scene_data['admin_substate'] = 'input_rename_name'
                    await self.scene.set_data('scene', scene_data)
                    await self.scene.update_message()
                except ValueError:
                    scene_data['admin_temp_data']['last_message'] = "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–æ–º–ø–∞–Ω–∏–∏"
                    await self.scene.set_data('scene', scene_data)
                    await self.scene.update_message()
            
            elif admin_substate == 'input_rename_name':
                # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è
                company_id = scene_data.get('admin_temp_data', {}).get('rename_company_id')
                result = await notforgame_update_company_name(company_id=company_id, new_name=text)
                
                # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π
                scene_data['admin_substate'] = None
                
                if result and 'error' not in result:
                    scene_data['admin_temp_data'] = {'last_message': f"‚úÖ –ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{text}'"}
                else:
                    error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
                    scene_data['admin_temp_data'] = {'last_message': f"‚ùå –û—à–∏–±–∫–∞: {error_msg}"}
                
                await self.scene.set_data('scene', scene_data)
                await self.scene.update_message()
        
        # === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
        elif admin_state == 'users':
            if admin_substate == 'input_rename_id':
                # –ó–∞–ø—Ä–æ—Å ID –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
                try:
                    user_id = int(text)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = await get_user(id=user_id)
                    if not user or 'error' in user:
                        scene_data['admin_temp_data']['last_message'] = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        await self.scene.set_data('scene', scene_data)
                        await self.scene.update_message()
                        return
                    
                    scene_data['admin_temp_data']['rename_user_id'] = user_id
                    scene_data['admin_substate'] = 'input_rename_name'
                    await self.scene.set_data('scene', scene_data)
                    await self.scene.update_message()
                except ValueError:
                    scene_data['admin_temp_data']['last_message'] = "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    await self.scene.set_data('scene', scene_data)
                    await self.scene.update_message()
            
            elif admin_substate == 'input_rename_name':
                # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è
                user_id = scene_data.get('admin_temp_data', {}).get('rename_user_id')
                result = await update_user(user_id=user_id, username=text)
                
                # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                scene_data['admin_substate'] = None
                
                if result and 'error' not in result:
                    scene_data['admin_temp_data'] = {'last_message': f"‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{text}'"}
                else:
                    error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
                    scene_data['admin_temp_data'] = {'last_message': f"‚ùå –û—à–∏–±–∫–∞: {error_msg}"}
                
                await self.scene.set_data('scene', scene_data)
                await self.scene.update_message()
            
            elif admin_substate == 'input_delete_id':
                # –ó–∞–ø—Ä–æ—Å ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                try:
                    user_id = int(text)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = await get_user(id=user_id)
                    if not user or 'error' in user:
                        scene_data['admin_temp_data']['last_message'] = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        await self.scene.set_data('scene', scene_data)
                        await self.scene.update_message()
                        return
                    
                    scene_data['admin_temp_data']['delete_user_id'] = user_id
                    scene_data['admin_substate'] = 'confirm_delete'
                    await self.scene.set_data('scene', scene_data)
                    await self.scene.update_message()
                except ValueError:
                    scene_data['admin_temp_data']['last_message'] = "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    await self.scene.set_data('scene', scene_data)
                    await self.scene.update_message()
    