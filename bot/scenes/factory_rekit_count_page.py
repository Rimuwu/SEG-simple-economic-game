from oms import Page
from aiogram.types import Message, CallbackQuery
from oms.utils import callback_generator


class FactoryRekitCount(Page):
    __page_name__ = "factory-rekit-count-page"
    
    async def content_worker(self):
        """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
        rekit_groups_data = self.scene.get_data('factory-rekit-groups-page')
        selected_group = rekit_groups_data.get('selected_group', '')
        factory_groups = rekit_groups_data.get('factory_groups', {})
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        factory_ids = factory_groups.get(selected_group, [])
        max_count = len(factory_ids)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await self.update_data('max_count', max_count)
        await self.update_data('factory_ids', factory_ids)
        await self.update_data('selected_group', selected_group)
        
        # –ü–∞—Ä—Å–∏–º –∫–ª—é—á –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        parts = selected_group.split('_')
        if len(parts) == 3:
            resource = parts[0]
            is_auto = parts[1] == 'True'
            is_producing = parts[2] == 'True'
            
            content = f"üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–æ–¥–æ–≤**\n\n"
            
            if resource == '–ü—Ä–æ—Å—Ç–æ–π':
                content += f"–ì—Ä—É–ø–ø–∞: ‚ö™Ô∏è –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ –∑–∞–≤–æ–¥—ã\n"
            elif is_auto:
                content += f"–ì—Ä—É–ø–ø–∞: üîÑ {resource} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n"
            elif is_producing:
                content += f"–ì—Ä—É–ø–ø–∞: ‚è∏Ô∏è {resource} (—Ä–∞–∑–æ–≤–æ)\n"
            else:
                content += f"–ì—Ä—É–ø–ø–∞: ‚èπÔ∏è {resource} (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)\n"
            
            content += f"–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤–æ–¥–æ–≤: **{max_count}** —à—Ç.\n\n"
            content += "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏:"
            
            return content
        
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É"
    
    @Page.on_text('int')
    async def handle_count(self, message: Message, value: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        page_data = self.get_data()
        max_count = page_data.get('max_count', 0)
        
        if value <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        if value > max_count:
            await message.answer(f"‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {max_count} –∑–∞–≤–æ–¥–æ–≤")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await self.update_data('rekit_count', value)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ—Å—É—Ä—Å–∞
        await self.scene.update_page('factory-rekit-resource-page')
    
    @Page.on_text('not_handled')
    async def handle_invalid(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
