from oms import Page
from aiogram.types import Message, CallbackQuery
from oms.utils import callback_generator
from global_modules.logs import Logger
from global_modules.load_config import ALL_CONFIGS, Resources
from oneuser_page import OneUserPage

bot_logger = Logger.get_logger("bot")
RESOURCES: Resources = ALL_CONFIGS["resources"]


class FactoryRekitResource(OneUserPage):
    __page_name__ = "factory-rekit-resource"
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        scene_data = self.scene.get_data('scene')
        group_type = scene_data.get('rekit_group')
        count_str = scene_data.get('rekit_count')
        
        if not group_type or not count_str:
            return "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        if group_type == 'idle':
            group_name = "‚ö™Ô∏è –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ –∑–∞–≤–æ–¥—ã"
        else:
            resource = RESOURCES.get_resource(group_type)
            group_name = f"{resource.emoji} {resource.label}" if resource else group_type
        
        count_display = "–≤—Å–µ" if count_str == "all" else count_str
        
        content = "üîÑ **–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–≤–æ–¥–æ–≤**\n\n"
        content += f"–ì—Ä—É–ø–ø–∞: {group_name}\n"
        content += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: **{count_display}**\n\n"
        content += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:\n"
        content += "‚è≥ _–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–π–º—ë—Ç –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞_"
        
        return content
    
    async def buttons_worker(self):
        """–ö–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–µ, –±–µ–∑ —Å—ã—Ä—å—è)"""
        buttons = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–±–µ–∑ raw=true)
        produced_resources = RESOURCES.get_produced_resources()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ
        for resource_key in produced_resources:
            resource = RESOURCES.get_resource(resource_key)
            if resource:
                buttons.append({
                    'text': f'{resource.emoji} {resource.label}',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'rekit',
                        resource_key
                    ),
                    'next_line': True
                })
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.append({
            'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(
                self.scene.__scene_name__,
                'back'
            ),
            'next_line': True
        })
        
        return buttons
    
    @Page.on_callback('rekit')
    async def select_resource(self, callback: CallbackQuery, args: list):
        """–í—ã–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ—Å—É—Ä—Å –Ω–µ —É–∫–∞–∑–∞–Ω", show_alert=True)
            return
        
        new_resource = args[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å
        scene_data = self.scene.get_data('scene')
        scene_data['rekit_resource'] = new_resource
        await self.scene.set_data('scene', scene_data)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        await self.scene.update_page('factory-rekit-produce')
        await callback.answer()
    
    @Page.on_callback('back')
    async def back_to_count(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        await self.scene.update_page('factory-rekit-count')
        await callback.answer()
