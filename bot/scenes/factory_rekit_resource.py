from oms import Page
from aiogram.types import Message, CallbackQuery
from modules.ws_client import company_complete_free_factories
from oms.utils import callback_generator
from global_modules.logs import Logger

bot_logger = Logger.get_logger("bot")


class FactoryRekitResource(Page):
    __page_name__ = "factory-rekit-resource"
    
        # –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —Å —ç–º–æ–¥–∑–∏
    RESOURCES = {
        "oil_products": {"name": "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã", "emoji": "‚õΩ"},
        "nails": {"name": "–ì–≤–æ–∑–¥–∏", "emoji": "üî©"},
        "boards": {"name": "–î–æ—Å–∫–∏", "emoji": "ü™µ"},
        "fabric": {"name": "–¢–∫–∞–Ω—å", "emoji": "üßµ"},
        "medical_equipment": {"name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "emoji": "üíâ"},
        "machine": {"name": "–°—Ç–∞–Ω–æ–∫", "emoji": "‚öôÔ∏è"},
        "furniture": {"name": "–ú–µ–±–µ–ª—å", "emoji": "ü™ë"},
        "tent": {"name": "–ü–∞–ª–∞—Ç–∫–∞", "emoji": "‚õ∫"},
        "barrel": {"name": "–ë–æ—á–∫–∞", "emoji": "üõ¢Ô∏è"},
        "tarpaulin": {"name": "–ë—Ä–µ–∑–µ–Ω—Ç", "emoji": "üé™"},
        "insulation_material": {"name": "–ò–∑–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", "emoji": "üß±"},
        "sail": {"name": "–ü–∞—Ä—É—Å", "emoji": "‚õµ"},
        "generator": {"name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "emoji": "‚ö°"},
        "body_armor": {"name": "–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç", "emoji": "ü¶∫"},
        "refrigerator": {"name": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", "emoji": "üßä"},
        "yacht": {"name": "–ü–∞—Ä—É—Å–Ω–∞—è —è—Ö—Ç–∞", "emoji": "üõ•Ô∏è"}
    }
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        scene_data = self.scene.get_data('scene')
        group_type = scene_data.get('rekit_group')
        count_str = scene_data.get('rekit_count')
        
        if not group_type or not count_str:
            return "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        if group_type == 'idle':
            group_name = "‚ö™Ô∏è –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ –∑–∞–≤–æ–¥—ã"
        else:
            resource_info = self.RESOURCES.get(group_type, {"name": group_type, "emoji": "üì¶"})
            group_name = f"{resource_info['emoji']} {resource_info['name']}"
        
        count_display = "–≤—Å–µ" if count_str == "all" else count_str
        
        content = "üîÑ **–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–≤–æ–¥–æ–≤**\n\n"
        content += f"–ì—Ä—É–ø–ø–∞: {group_name}\n"
        content += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: **{count_display}**\n\n"
        content += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏:"
        
        return content
    
    async def buttons_worker(self):
        """–ö–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏"""
        buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        for resource_key, resource_info in self.RESOURCES.items():
            buttons.append({
                'text': f'{resource_info["emoji"]} {resource_info["name"]}',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'rekit',
                    resource_key
                )
            })
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.append({
            'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(
                self.scene.__scene_name__,
                'back'
            )
        })
        
        self.row_width = 2
        return buttons
    
    @Page.on_callback('rekit')
    async def do_rekit(self, callback: CallbackQuery, args: list):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ—Å—É—Ä—Å –Ω–µ —É–∫–∞–∑–∞–Ω", show_alert=True)
            return
        
        new_resource = args[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ scene
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        group_type = scene_data.get('rekit_group')
        count_str = scene_data.get('rekit_count')
        
        if not company_id or not group_type or not count_str:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º find_resource (–æ—Ç–∫—É–¥–∞ –±–µ—Ä—ë–º –∑–∞–≤–æ–¥—ã)
        find_resource = None if group_type == 'idle' else group_type
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        count = None if count_str == 'all' else int(count_str)
        
        bot_logger.info(f"–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: company_id={company_id}, find_resource={find_resource}, new_resource={new_resource}, count={count}")
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º API
            response = await company_complete_free_factories(
                company_id=company_id,
                find_resource=find_resource,
                new_resource=new_resource,
                count=count,
                produce_status=False  # –†–∞–∑–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            )
            
            bot_logger.info(f"API response: {response}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if response and isinstance(response, dict) and "error" in response:
                await callback.answer(f"‚ùå {response['error']}", show_alert=True)
            else:
                # –£—Å–ø–µ—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                resource_info = self.RESOURCES.get(new_resource, {"name": new_resource, "emoji": "üì¶"})
                count_display = "–≤—Å–µ" if count_str == "all" else count_str
                
                await callback.answer(
                    f"‚úÖ –ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–æ {count_display} –∑–∞–≤–æ–¥–æ–≤ –Ω–∞ {resource_info['emoji']} {resource_info['name']}!",
                    show_alert=True
                )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                scene_data.pop('rekit_group', None)
                scene_data.pop('rekit_count', None)
                await self.scene.set_data('scene', scene_data)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞–≤–æ–¥–æ–≤
                await self.scene.update_page('factory-menu')
                
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏: {e}")
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    @Page.on_callback('back')
    async def back_to_count(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        await self.scene.update_page('factory-rekit-count')
        await callback.answer()
