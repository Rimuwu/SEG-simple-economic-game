from oms import Page
from aiogram.types import CallbackQuery
from oms.utils import callback_generator
from modules.ws_client import get_factories
from .oneuser_page import OneUserPage

class FactorySelectMode(OneUserPage):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
    
    __page_name__ = "factory-select-mode"
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∑–∞–≤–æ–¥–æ–≤"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–æ–¥—ã –∫–æ–º–ø–∞–Ω–∏–∏
        factories = await get_factories(company_id)
        
        if not factories or not isinstance(factories, list):
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–æ–¥–æ–≤"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–æ–¥—ã –ø–æ —Ä–µ–∂–∏–º–∞–º
        idle_count = sum(1 for f in factories if f.get('complectation') is None)
        auto_count = sum(1 for f in factories if f.get('is_auto') is True and f.get('complectation') is not None)
        manual_count = sum(1 for f in factories if f.get('is_auto') is False and f.get('complectation') is not None)
        
        content = "üè≠ **–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–≤–æ–¥–æ–≤**\n\n"
        content += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏:\n\n"
        content += f"‚ö™Ô∏è **–ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ:** {idle_count} —à—Ç.\n"
        content += f"ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ:** {auto_count} —à—Ç.\n"
        content += f"üë§ **–ù–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ:** {manual_count} —à—Ç.\n"
        
        return content
    
    async def buttons_worker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        buttons = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–æ–¥—ã –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞
        factories = await get_factories(company_id)
        
        if factories and isinstance(factories, list):
            # –°—á–∏—Ç–∞–µ–º –∑–∞–≤–æ–¥—ã –ø–æ —Ä–µ–∂–∏–º–∞–º
            idle_count = sum(1 for f in factories if f.get('complectation') is None)
            auto_count = sum(1 for f in factories if f.get('is_auto') is True and f.get('complectation') is not None)
            manual_count = sum(1 for f in factories if f.get('is_auto') is False and f.get('complectation') is not None)
            
            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ"
            if idle_count > 0:
                buttons.append({
                    'text': f'‚ö™Ô∏è –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ ({idle_count})',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_mode',
                        'idle'
                    ),
                    'ignore_row': True
                })
            
            # –ö–Ω–æ–ø–∫–∞ "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ"
            if auto_count > 0:
                buttons.append({
                    'text': f'ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ ({auto_count})',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_mode',
                        'auto'
                    ),
                    'ignore_row': True
                })
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ"
            if manual_count > 0:
                buttons.append({
                    'text': f'üë§ –ù–µ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ ({manual_count})',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_mode',
                        'manual'
                    ),
                    'ignore_row': True
                })
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.append({
            'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(
                self.scene.__scene_name__,
                'back_to_menu'
            ),
            'next_line': True
        })
        
        self.row_width = 1
        return buttons
    
    @Page.on_callback('select_mode')
    async def select_mode_handler(self, callback: CallbackQuery, args: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            return
        
        factory_mode = args[1]
        scene_data = self.scene.get_data('scene')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        scene_data['factory_mode'] = factory_mode
        scene_data['factory_action'] = 'rekit'
        await self.scene.set_data('scene', scene_data)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤
        await self.scene.update_page('factory-rekit-groups')
    
    @Page.on_callback('back_to_menu')
    async def back_to_menu_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–≤–æ–¥–æ–≤"""
        await self.scene.update_page('factory-menu')
