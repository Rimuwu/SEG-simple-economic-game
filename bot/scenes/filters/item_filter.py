"""
–ú–æ–¥—É–ª—å —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ callback
"""
from typing import Optional, Callable
from oms.utils import callback_generator
from global_modules.load_config import ALL_CONFIGS, Resources

RESOURCES: Resources = ALL_CONFIGS["resources"]


class ItemFilter:
    """
    –§–∏–ª—å—Ç—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Page:
    
    # –í __after_init__ –∏–ª–∏ __post_init__:
    self.item_filter = ItemFilter(
        scene_name=self.scene.__scene_name__,
        callback_prefix='select_resource',
        items_per_page=5
    )
    
    # –í buttons_worker:
    if filter_mode:
        buttons = self.item_filter.get_buttons(current_page=page_num)
    """
    
    def __init__(self, 
                 scene_name: str,
                 callback_prefix: str = 'filter_item',
                 items_per_page: int = 10,
                 show_raw_only: bool = False,
                 show_produced_only: bool = False):
        """
        Args:
            scene_name: –ò–º—è —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ callback_data
            callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞)
            items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            show_raw_only: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—ã—Ä—å–µ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            show_produced_only: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        """
        self.scene_name = scene_name
        self.callback_prefix = callback_prefix
        self.items_per_page = items_per_page
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
        if show_raw_only:
            self.resources = RESOURCES.get_raw_resources()
        elif show_produced_only:
            self.resources = RESOURCES.get_produced_resources()
        else:
            self.resources = RESOURCES.resources
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ —É—Ä–æ–≤–Ω—é –∏ –∏–º–µ–Ω–∏
        self.sorted_resources = sorted(
            self.resources.items(),
            key=lambda x: (x[1].lvl, x[1].label)
        )
        
        self.total_pages = max(1, (len(self.sorted_resources) + items_per_page - 1) // items_per_page)
    
    def get_page_resources(self, page: int) -> list[tuple[str, any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        start_idx = page * self.items_per_page
        end_idx = start_idx + self.items_per_page
        return self.sorted_resources[start_idx:end_idx]
    
    def get_buttons(self, 
                   current_page: int = 0,
                   add_reset_button: bool = True,
                   reset_callback: str = 'reset_filter') -> list[dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        
        Args:
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (0-indexed)
            add_reset_button: –î–æ–±–∞–≤–∏—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"
            reset_callback: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è InlineKeyboard
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ)
        current_page = current_page % self.total_pages
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ (–∫–∞–∂–¥–∞—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ ignore_row)
        page_resources = self.get_page_resources(current_page)
        for i, (resource_id, resource) in enumerate(page_resources):
            buttons.append({
                'text': f'{resource.emoji} {resource.label}',
                'callback_data': callback_generator(
                    self.scene_name,
                    self.callback_prefix,
                    resource_id
                ),
                'ignore_row': True  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            })
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è (–≤—Å–µ 3 –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
        prev_page = (current_page - 1) % self.total_pages
        next_page = (current_page + 1) % self.total_pages
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–æ—Å–ª–µ —Ä–µ—Å—É—Ä—Å–æ–≤)
        buttons.append({
            'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(
                self.scene_name,
                'filter_page',
                str(prev_page)
            )
        })
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É)
        buttons.append({
            'text': f'üìÑ {current_page + 1}/{self.total_pages}',
            'callback_data': callback_generator(
                self.scene_name,
                'page_info',
                str(current_page)
            )
        })
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä—ë–¥" (–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É)
        buttons.append({
            'text': '–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è',
            'callback_data': callback_generator(
                self.scene_name,
                'filter_page',
                str(next_page)
            )
        })
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        if add_reset_button:
            buttons.append({
                'text': 'üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë',
                'callback_data': callback_generator(
                    self.scene_name,
                    reset_callback
                ),
                'next_line': True
            })
        
        return buttons
    
    def get_resource_name(self, resource_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ ID"""
        resource = RESOURCES.get_resource(resource_id)
        return f"{resource.emoji} {resource.label}" if resource else None
    
    def resource_exists(self, resource_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞"""
        return resource_id in self.resources
