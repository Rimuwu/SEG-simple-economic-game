from aiogram.types import CallbackQuery  # type: ignore
from modules.ws_client import get_company, company_pay_taxes
from oms.utils import callback_generator
from .utils.oneuser_page import OneUserPage


Page = OneUserPage

class BankPage(Page):
    __for_blocked_pages__ = ["bank-credit-page", "bank-deposit-page"]
    __page_name__ = "bank-menu"
    
    async def content_worker(self):
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        if not company_id:
            return "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        company_data = await get_company(id=company_id)
        
        if isinstance(company_data, str):
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {company_data}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        balance = company_data.get('balance', 0)
        reputation = company_data.get('reputation', 0)
        business_type = company_data.get('business_type', 'small')
        tax_debt = company_data.get('tax_debt', 0)
        tax_rate = company_data.get('tax_rate', 0)
        credits = company_data.get('credits', [])
        deposits = company_data.get('deposits', [])
        overdue_steps = company_data.get('overdue_steps', 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
        business_type_text = "–ú–∞–ª—ã–π" if business_type == "small" else "–ë–æ–ª—å—à–æ–π"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ç—ã—Å—è—á
        balance_formatted = f"{balance:,}".replace(",", " ")
        tax_debt_formatted = f"{tax_debt:,}".replace(",", " ")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–∞
        tax_percent = f"{tax_rate * 100:.1f}%"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"""üè¶ *–ë–∞–Ω–∫*

*–ë–∞–ª–∞–Ω—Å –∫–æ–º–ø–∞–Ω–∏–∏:* {balance_formatted} üí∞
*–†–µ–ø—É—Ç–∞—Ü–∏—è:* {reputation} ‚≠ê
*–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞:* {business_type_text}
*–°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞:* {tax_debt_formatted} üí∞
*–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–∞:* {tax_percent}"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
        
        if overdue_steps > 0:
            text += f"\n‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –Ω–∞–ª–æ–≥–∞–º:* {overdue_steps} —Ö–æ–¥(–æ–≤)"
        if credits and len(credits) > 0:
            text += f"\n\nüí≥ *–ö—Ä–µ–¥–∏—Ç—ã:* {len(credits)}."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª–∞–¥–∞—Ö
        if deposits and len(deposits) > 0:
            text += f"\nüíµ *–í–∫–ª–∞–¥—ã:* {len(deposits)}"
        
        return text
    
    async def buttons_worker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–∞–Ω–∫–∞"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        self.row_width = 2
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–æ–≥–æ–≤
        company_data = await get_company(id=company_id)
        tax_debt = 0
        if isinstance(company_data, dict):
            tax_debt = company_data.get('tax_debt', 0)
        
        buttons = [
            {
                'text': 'üí≥ –ö—Ä–µ–¥–∏—Ç',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'credit'
                )
            },
            {
                'text': 'üíµ –í–∫–ª–∞–¥',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'deposit'
                )
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å
        if tax_debt > 0:
            buttons.append({
                'text': f'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ ({tax_debt} üí∞)',
                'callback_data': callback_generator(
                    self.scene.__scene_name__,
                    'pay_taxes'
                )
            })
        
        self.row_width = 2
        return buttons
    
    @Page.on_callback('credit')
    async def show_credit_page(self, callback: CallbackQuery, args: list):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫—Ä–µ–¥–∏—Ç–æ–≤"""
        await self.scene.update_page('bank-credit-page')
        await callback.answer()
    
    @Page.on_callback('deposit')
    async def show_deposit_page(self, callback: CallbackQuery, args: list):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∫–ª–∞–¥–æ–≤"""
        await self.scene.update_page('bank-deposit-page')
        await callback.answer()
    
    @Page.on_callback('pay_taxes')
    async def pay_taxes_handler(self, callback: CallbackQuery, args: list):
        """–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        if not company_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–ª–≥
        company_data = await get_company(id=company_id)
        if isinstance(company_data, str):
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {company_data}", show_alert=True)
            return
        
        tax_debt = company_data.get('tax_debt', 0)
        balance = company_data.get('balance', 0)
        
        if tax_debt <= 0:
            await callback.answer("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", show_alert=True)
            return
        
        if balance < tax_debt:
            await callback.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {tax_debt} üí∞\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} üí∞",
                show_alert=True
            )
            return
        
        # –û–ø–ª–∞—á–∏–≤–∞–µ–º –Ω–∞–ª–æ–≥–∏
        result = await company_pay_taxes(company_id=company_id, amount=tax_debt)
        
        if isinstance(result, str):
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result}", show_alert=True)
        else:
            await callback.answer(f"‚úÖ –ù–∞–ª–æ–≥–∏ –æ–ø–ª–∞—á–µ–Ω—ã: {tax_debt} üí∞", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await self.scene.update_message()
