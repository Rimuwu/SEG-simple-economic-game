from oms import Page
from aiogram.types import CallbackQuery, Message
from modules.ws_client import get_company, company_take_deposit, company_withdraw_deposit, get_session
from oms.utils import callback_generator
from global_modules.bank import get_deposit_conditions, calc_deposit, CAPITAL, check_max_deposit_steps
from global_modules.logs import Logger

bot_logger = Logger.get_logger("bot")


class BankDepositPage(Page):
    
    __page_name__ = "bank-deposit-page"
    
    async def content_worker(self):
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        session_id = scene_data.get('session')
        
        if not company_id:
            return "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        company_data = await get_company(id=company_id)
        session_data = await get_session(session_id=session_id)
        
        if isinstance(company_data, str):
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {company_data}"
        
        reputation = company_data.get('reputation', 0)
        deposits = company_data.get('deposits', [])
        balance = company_data.get('balance', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        deposit_state = scene_data.get('deposit_state', 'main')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
        if deposit_state == 'main':
            return await self._main_screen(deposits, reputation, balance, session_data)
        
        # –≠–∫—Ä–∞–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞
        elif deposit_state == 'view_deposit':
            return await self._view_deposit_screen(scene_data, deposits, session_data)
        
        # –≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤–∫–ª–∞–¥–∞
        elif deposit_state == 'input_amount':
            return await self._input_amount_screen(scene_data, balance, reputation)
        
        # –≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –≤–∫–ª–∞–¥–∞
        elif deposit_state == 'input_period':
            return await self._input_period_screen(scene_data, session_data, reputation)
        
        # –≠–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞
        elif deposit_state == 'confirm':
            return await self._confirm_screen(scene_data, reputation)
        
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    
    async def _main_screen(self, deposits, reputation, balance, session_data):
        """–û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∫–ª–∞–¥–∞—Ö"""
        scene_data = self.scene.get_data('scene')
        success_message = scene_data.get('success_message', '')
        
        current_step = session_data.get('step', 0)
        max_step = session_data.get('max_steps', 15)
        
        text = "üè¶ *–í–∫–ª–∞–¥—ã*\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if success_message:
            text += f"‚úÖ {success_message}\n\n"
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
            scene_data['success_message'] = ''
            await self.scene.set_data('scene', scene_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –≤–∫–ª–∞–¥–∞
        try:
            conditions = get_deposit_conditions(reputation)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª–æ–≤–∏—è—Ö
            percent = conditions.percent * 100
            
            text += f"*–í–∞—à–∏ —É—Å–ª–æ–≤–∏—è:*\n"
            text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:,} üí∞\n".replace(",", " ")
            text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {percent}% –≤ —Ö–æ–¥\n"
            text += f"‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n"
            text += f"‚è± –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫: 3 —Ö–æ–¥–∞\n\n"
        except ValueError:
            text += "‚ùå *–í–∫–ª–∞–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã*\n"
            text += f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∞: 11\n"
            text += f"–í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {reputation} ‚≠ê\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –≤–∫–ª–∞–¥
        can_make_deposit = (max_step - current_step) >= 3
        if not can_make_deposit:
            text += "‚ö†Ô∏è *–ù–æ–≤—ã–µ –≤–∫–ª–∞–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã*\n"
            text += f"–î–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 3 —Ö–æ–¥–æ–≤\n"
            text += f"(–¢–µ–∫—É—â–∏–π —Ö–æ–¥: {current_step}, –¥–æ –∫–æ–Ω—Ü–∞: {max_step - current_step})\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤
        if deposits and len(deposits) > 0:
            text += f"*–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥—ã:* {len(deposits)} —à—Ç.\n"
            text += "_–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∫–ª–∞–¥–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏_\n"
        else:
            text += "_–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤_\n"
        
        return text
    
    async def _view_deposit_screen(self, scene_data, deposits, session_data):
        """–≠–∫—Ä–∞–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞"""
        deposit_index = scene_data.get('viewing_deposit_index', 0)
        current_step = session_data.get('step', 0)
        
        if deposit_index < 0 or deposit_index >= len(deposits):
            return "‚ùå –û—à–∏–±–∫–∞: –≤–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        deposit = deposits[deposit_index]
        can_withdraw_from = deposit.get("can_withdraw_from", 0)
        current_balance = deposit.get("current_balance", 0)
        initial_sum = deposit.get("initial_sum", 0)
        total_earned = deposit.get("total_earned", 0)
        income_per_turn = deposit.get("income_per_turn", 0)
        steps_total = deposit.get("steps_total", 0)
        steps_now = deposit.get("steps_now", 0)
        
        can_withdraw_in = can_withdraw_from - current_step
        steps_left = steps_total - steps_now
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∫–ª–∞–¥–∞
        if can_withdraw_in <= 0:
            status_icon = "üîì"
            status_text = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–Ω—è—Ç–∏—è"
        else:
            status_icon = "üîí"
            status_text = f"‚è≥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –µ—â–µ {can_withdraw_in} —Ö–æ–¥(–æ–≤)"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        if initial_sum > 0:
            profit_percent = (total_earned / initial_sum) * 100
        else:
            profit_percent = 0
        
        text = f"""{status_icon} *–í–∫–ª–∞–¥ #{deposit_index + 1}*

*–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
üíµ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {initial_sum:,} üí∞
üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:,} üí∞
üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earned:,} üí∞ (+{profit_percent:.1f}%)
üí∏ –î–æ—Ö–æ–¥ –∑–∞ —Ö–æ–¥: {income_per_turn:,} üí∞

*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–æ–∫–∞—Ö:*
‚è± –û–±—â–∏–π —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞: {steps_total} —Ö–æ–¥(–æ–≤)
‚è≥ –ü—Ä–æ—à–ª–æ —Ö–æ–¥–æ–≤: {steps_now} / {steps_total}
üîÑ –û—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤: {steps_left}

*–°—Ç–∞—Ç—É—Å:*
{status_text}

_–í–∫–ª–∞–¥ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ 3 —Ö–æ–¥–∞ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–±—â–µ–≥–æ —Å—Ä–æ–∫–∞_""".replace(",", " ")
        
        return text
    
    async def _input_amount_screen(self, scene_data, balance, reputation):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤–∫–ª–∞–¥–∞"""
        error = scene_data.get('error_message', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        min_deposit = CAPITAL.bank.contribution.min
        max_deposit = CAPITAL.bank.contribution.max
        
        text = f"""üí∞ *–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∞*

*–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∫–ª–∞–¥–∞*

–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:,} üí∞
–ú–∏–Ω–∏–º—É–º: {min_deposit:,} üí∞
–ú–∞–∫—Å–∏–º—É–º: {max_deposit:,} üí∞

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –Ω–∞ –≤–∫–ª–∞–¥:""".replace(",", " ")
        
        if error:
            text += f"\n\n‚ùå {error}"
        
        return text
    
    async def _input_period_screen(self, scene_data, session_data, reputation):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –≤–∫–ª–∞–¥–∞"""
        deposit_amount = scene_data.get('deposit_amount', 0)
        error = scene_data.get('error_message', '')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ–¥ –∏ –º–∞–∫—Å–∏–º—É–º
        current_step = session_data.get('step', 0)
        max_step = session_data.get('max_steps', 15)
        max_period = max_step - current_step
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É
        conditions = get_deposit_conditions(reputation)
        percent = conditions.percent * 100
        
        text = f"""‚è± *–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∞*

‚úÖ –°—É–º–º–∞ –≤–∫–ª–∞–¥–∞: {deposit_amount:,} üí∞
üìà –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {percent}% –≤ —Ö–æ–¥

*–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞*

–ú–∏–Ω–∏–º—É–º: 3 —Ö–æ–¥–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
–ú–∞–∫—Å–∏–º—É–º: {max_period} —Ö–æ–¥(–æ–≤)
(–¢–µ–∫—É—â–∏–π —Ö–æ–¥: {current_step}, –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã: {max_period})

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤:""".replace(",", " ")
        
        if error:
            text += f"\n\n‚ùå {error}"
        
        return text
    
    async def _confirm_screen(self, scene_data, reputation):
        """–≠–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞"""
        deposit_amount = scene_data.get('deposit_amount', 0)
        deposit_period = scene_data.get('deposit_period', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –≤–∫–ª–∞–¥–∞
        conditions = get_deposit_conditions(reputation)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∫–ª–∞–¥–∞
        income_per_turn, total_income = calc_deposit(
            S=deposit_amount,
            r_percent=conditions.percent,
            T=deposit_period
        )
        
        percent = conditions.percent * 100
        final_sum = deposit_amount + total_income
        
        text = f"""üè¶ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∞*

*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∫–ª–∞–¥–∞:*
üíµ –°—É–º–º–∞ –≤–∫–ª–∞–¥–∞: {deposit_amount:,} üí∞
‚è± –°—Ä–æ–∫: {deposit_period} —Ö–æ–¥(–æ–≤)

*–£—Å–ª–æ–≤–∏—è:*
üìà –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {percent}% –≤ —Ö–æ–¥
üîí –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫: 3 —Ö–æ–¥–∞
(–ó–∞–±—Ä–∞—Ç—å –≤–∫–ª–∞–¥ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 3 —Ö–æ–¥–∞)

*–î–æ—Ö–æ–¥:*
üìà –î–æ—Ö–æ–¥ –∑–∞ —Ö–æ–¥: {income_per_turn:,} üí∞
‚úÖ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income:,} üí∞
üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {final_sum:,} üí∞

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∞:""".replace(",", " ")
        
        return text
    
    async def buttons_worker(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        session_id = scene_data.get('session')
        deposit_state = scene_data.get('deposit_state', 'main')
        
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        if deposit_state == 'main':
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–µ—Å—Å–∏–∏
            company_data = await get_company(id=company_id)
            session_data = await get_session(session_id=session_id)
            
            if isinstance(company_data, dict) and isinstance(session_data, dict):
                reputation = company_data.get('reputation', 0)
                deposits = company_data.get('deposits', [])
                current_step = session_data.get('step', 0)
                max_step = session_data.get('max_steps', 15)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –≤–∫–ª–∞–¥
                can_make_deposit = (max_step - current_step) >= 3
                
                if can_make_deposit:
                    try:
                        get_deposit_conditions(reputation)
                        buttons.append({
                            'text': 'üí∞ –û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥',
                            'callback_data': callback_generator(
                                self.scene.__scene_name__,
                                'open_deposit'
                            )
                        })
                    except ValueError:
                        pass
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–≤ - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
                if deposits and len(deposits) > 0:
                    bot_logger.info(f"Processing {len(deposits)} deposits. Current step: {current_step}")
                    for i, deposit in enumerate(deposits):
                        can_withdraw_from = deposit.get("can_withdraw_from", 0)
                        current_balance = deposit.get("current_balance", 0)
                        
                        bot_logger.info(f"Deposit #{i+1}: can_withdraw_from={can_withdraw_from}, current_step={current_step}, can_withdraw={current_step >= can_withdraw_from}")
                        
                        # –ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ö–æ–¥ >= can_withdraw_from
                        if current_step >= can_withdraw_from:
                            buttons.append({
                                'text': f'üîì –í–∫–ª–∞–¥ #{i+1} ({current_balance:,} üí∞)'.replace(",", " "),
                                'callback_data': callback_generator(
                                    self.scene.__scene_name__,
                                    'view_deposit',
                                    str(i)
                                )
                            })
                        else:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–±—Ä–∞—Ç—å
                            can_withdraw_in = can_withdraw_from - current_step
                            buttons.append({
                                'text': f'üîí –í–∫–ª–∞–¥ #{i+1} (—á–µ—Ä–µ–∑ {can_withdraw_in} —Ö–æ–¥(–æ–≤))'.replace(",", " "),
                                'callback_data': callback_generator(
                                    self.scene.__scene_name__,
                                    'view_deposit',
                                    str(i)
                                )
                            })
                        
                buttons.append({
                    'text': f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'back_to_bank'
                    )
                })
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∫–ª–∞–¥–∞
        elif deposit_state == 'view_deposit':
            company_data = await get_company(id=company_id)
            session_data = await get_session(session_id=session_id)
            
            if isinstance(company_data, dict) and isinstance(session_data, dict):
                deposits = company_data.get('deposits', [])
                deposit_index = scene_data.get('viewing_deposit_index', 0)
                current_step = session_data.get('step', 0)
                
                if deposit_index >= 0 and deposit_index < len(deposits):
                    deposit = deposits[deposit_index]
                    can_withdraw_from = deposit.get("can_withdraw_from", 0)
                    current_balance = deposit.get("current_balance", 0)
                    
                    # –ö–Ω–æ–ø–∫–∞ –∑–∞–±—Ä–∞—Ç—å –≤–∫–ª–∞–¥ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                    if current_step >= can_withdraw_from:
                        buttons.append({
                            'text': f'üí∞ –ó–∞–±—Ä–∞—Ç—å –≤–∫–ª–∞–¥ ({current_balance:,} üí∞)'.replace(",", " "),
                            'callback_data': callback_generator(
                                self.scene.__scene_name__,
                                'withdraw_deposit',
                                str(deposit_index)
                            )
                        })
                
                # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤–∫–ª–∞–¥–æ–≤
                buttons.append({
                    'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'back_to_main'
                    )
                })
                
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤ –≤–≤–æ–¥–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        elif deposit_state in ['input_amount', 'input_period']:
            buttons = [
                {
                    'text': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'cancel_deposit'
                    )
                }
            ]
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        elif deposit_state == 'confirm':
            buttons = [
                {
                    'text': '‚úÖ –î–∞, –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'confirm_deposit'
                    )
                },
                {
                    'text': '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'cancel_deposit'
                    )
                }
            ]
        
        self.row_width = 1
        return buttons
    
    @Page.on_callback('open_deposit')
    async def open_deposit_handler(self, callback: CallbackQuery, args: list):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞ - –∑–∞–ø—Ä–æ—Å —Å—É–º–º—ã"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        session_id = scene_data.get('session')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –≤—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
        company_data = await get_company(id=company_id)
        session_data = await get_session(session_id=session_id)
        
        if isinstance(company_data, dict) and isinstance(session_data, dict):
            reputation = company_data.get('reputation', 0)
            current_step = session_data.get('step', 0)
            max_step = session_data.get('max_steps', 15)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
            if (max_step - current_step) < 3:
                await callback.answer(
                    "‚ùå –í–∫–ª–∞–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!\n"
                    "–î–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 3 —Ö–æ–¥–æ–≤.",
                    show_alert=True
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
            try:
                get_deposit_conditions(reputation)
            except ValueError:
                await callback.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞!\n"
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: 11 ‚≠ê",
                    show_alert=True
                )
                return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        scene_data['deposit_state'] = 'input_amount'
        scene_data['error_message'] = ''  # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
        await self.scene.set_data('scene', scene_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await self.scene.update_message()
        await callback.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∫–ª–∞–¥–∞")
    
    @Page.on_callback('view_deposit')
    async def view_deposit_handler(self, callback: CallbackQuery, args: list):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤–∫–ª–∞–¥–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É args
        if args and args[0] == 'view_deposit':
            if len(args) < 2:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∞", show_alert=True)
                return
            deposit_index = int(args[1])
        elif args and len(args) > 0:
            deposit_index = int(args[0])
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∞", show_alert=True)
            return
        
        scene_data = self.scene.get_data('scene')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∫–ª–∞–¥–∞
        scene_data['deposit_state'] = 'view_deposit'
        scene_data['viewing_deposit_index'] = deposit_index
        await self.scene.set_data('scene', scene_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∫–ª–∞–¥–µ
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('back_to_main')
    async def back_to_main_handler(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É –≤–∫–ª–∞–¥–æ–≤"""
        scene_data = self.scene.get_data('scene')
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
        scene_data['deposit_state'] = 'main'
        scene_data['viewing_deposit_index'] = None
        await self.scene.set_data('scene', scene_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.scene.update_message()
        await callback.answer()
    
    @Page.on_callback('withdraw_deposit')
    async def withdraw_deposit_handler(self, callback: CallbackQuery, args: list):
        """–ò–∑—ä—è—Ç–∏–µ –≤–∫–ª–∞–¥–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É args
        if args and args[0] == 'withdraw_deposit':
            if len(args) < 2:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∞", show_alert=True)
                return
            deposit_index = int(args[1])
        elif args and len(args) > 0:
            deposit_index = int(args[0])
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∞", show_alert=True)
            return
        
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        session_id = scene_data.get('session')
        
        if not company_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–µ—Å—Å–∏–∏
        company_data = await get_company(id=company_id)
        session_data = await get_session(session_id=session_id)
        
        if isinstance(company_data, str):
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {company_data}", show_alert=True)
            return
        
        deposits = company_data.get('deposits', [])
        current_step = session_data.get('step', 0)
        
        if deposit_index < 0 or deposit_index >= len(deposits):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        deposit = deposits[deposit_index]
        can_withdraw_from = deposit.get("can_withdraw_from", 0)
        current_balance = deposit.get("current_balance", 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–±—Ä–∞—Ç—å –≤–∫–ª–∞–¥
        if current_step < can_withdraw_from:
            can_withdraw_in = can_withdraw_from - current_step
            await callback.answer(
                f"‚ùå –í–∫–ª–∞–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n"
                f"–ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑: {can_withdraw_in} —Ö–æ–¥(–æ–≤)",
                show_alert=True
            )
            return
        
        # –ò–∑—ã–º–∞–µ–º –≤–∫–ª–∞–¥
        result = await company_withdraw_deposit(
            company_id=str(company_id),
            deposit_index=deposit_index
        )
        
        if isinstance(result, str):
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result}", show_alert=True)
        elif isinstance(result, dict) and 'error' in result:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", show_alert=True)
        else:
            # –£—Å–ø–µ—à–Ω–æ–µ –∏–∑—ä—è—Ç–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
            scene_data['success_message'] = f'–í–∫–ª–∞–¥ –∏–∑—ä—è—Ç! –ü–æ–ª—É—á–µ–Ω–æ: {current_balance:,} üí∞'.replace(",", " ")
            scene_data['deposit_state'] = 'main'
            scene_data['viewing_deposit_index'] = None
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
            await callback.answer(f"‚úÖ –í–∫–ª–∞–¥ –∏–∑—ä—è—Ç: {current_balance:,} üí∞".replace(",", " "), show_alert=True)
    
    @Page.on_callback('confirm_deposit')
    async def confirm_deposit_handler(self, callback: CallbackQuery, args: list):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        deposit_amount = scene_data.get('deposit_amount', 0)
        deposit_period = scene_data.get('deposit_period', 0)
        
        if not company_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥
        result = await company_take_deposit(
            company_id=str(company_id),
            amount=deposit_amount,
            period=deposit_period
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(result, str):
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result}", show_alert=True)
        elif isinstance(result, dict) and 'error' in result:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏–∑ API
            error_msg = result['error']
            if 'reputation' in error_msg.lower():
                await callback.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞!\n"
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: 11 ‚≠ê",
                    show_alert=True
                )
            elif 'balance' in error_msg.lower() or 'insufficient' in error_msg.lower():
                await callback.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!",
                    show_alert=True
                )
            else:
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", show_alert=True)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
            scene_data['deposit_state'] = 'main'
            scene_data['deposit_amount'] = 0
            scene_data['deposit_period'] = 0
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
        else:
            # –£—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∞
            scene_data['deposit_state'] = 'main'
            scene_data['deposit_amount'] = 0
            scene_data['deposit_period'] = 0
            scene_data['success_message'] = f'–í–∫–ª–∞–¥ –æ—Ç–∫—Ä—ã—Ç! –í–Ω–µ—Å–µ–Ω–æ: {deposit_amount:,} üí∞ –Ω–∞ {deposit_period} —Ö–æ–¥(–æ–≤)'.replace(",", " ")
            await self.scene.set_data('scene', scene_data)
            await self.scene.update_message()
            await callback.answer(
                f"‚úÖ –í–∫–ª–∞–¥ –æ—Ç–∫—Ä—ã—Ç!\n"
                f"–°—É–º–º–∞: {deposit_amount:,} üí∞\n"
                f"–°—Ä–æ–∫: {deposit_period} —Ö–æ–¥(–æ–≤)".replace(",", " "),
                show_alert=True
            )
    
    @Page.on_callback('cancel_deposit')
    async def cancel_deposit_handler(self, callback: CallbackQuery, args: list):
        """–û—Ç–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞"""
        scene_data = self.scene.get_data('scene')
        scene_data['deposit_state'] = 'main'
        scene_data['deposit_amount'] = 0
        scene_data['deposit_period'] = 0
        scene_data['error_message'] = ''  # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
        await self.scene.set_data('scene', scene_data)
        
        await callback.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await self.scene.update_message()
    
    
    @Page.on_callback('back_to_bank')
    async def back_to_bank_handler(self, callback: CallbackQuery, args: list):
        scene_data = self.scene.get_data('scene')
        scene_data['deposit_state'] = 'main'
        scene_data['deposit_amount'] = 0
        scene_data['deposit_period'] = 0
        scene_data['error_message'] = ''  # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
        await self.scene.set_data('scene', scene_data)
        await self.scene.update_page('bank-menu')
    
    @Page.on_text('int')
    async def handle_input(self, message: Message, value: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª (—Å—É–º–º–∞ –∏–ª–∏ —Å—Ä–æ–∫)"""
        scene_data = self.scene.get_data('scene')
        deposit_state = scene_data.get('deposit_state', 'main')
        company_id = scene_data.get('company_id')
        session_id = scene_data.get('session')
        
        # –í–≤–æ–¥ —Å—É–º–º—ã –≤–∫–ª–∞–¥–∞
        if deposit_state == 'input_amount':
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É
            scene_data['error_message'] = ''
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            min_deposit = CAPITAL.bank.contribution.min
            max_deposit = CAPITAL.bank.contribution.max
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            company_data = await get_company(id=company_id)
            if isinstance(company_data, str):
                scene_data['error_message'] = f'–û—à–∏–±–∫–∞: {company_data}'
                await self.scene.set_data('scene', scene_data)
                await self.scene.update_message()
                return
            
            balance = company_data.get('balance', 0)
            
            if value < min_deposit:
                scene_data['error_message'] = f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞: {min_deposit:,} üí∞'.replace(",", " ")
                await self.scene.set_data('scene', scene_data)
                await self.scene.update_message()
                return
            
            if value > max_deposit:
                scene_data['error_message'] = f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞: {max_deposit:,} üí∞'.replace(",", " ")
                await self.scene.set_data('scene', scene_data)
                await self.scene.update_message()
                return
            
            if value > balance:
                scene_data['error_message'] = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:,} üí∞'.replace(",", " ")
                await self.scene.set_data('scene', scene_data)
                await self.scene.update_message()
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—Ä–æ–∫–∞
            scene_data['deposit_amount'] = value
            scene_data['deposit_state'] = 'input_period'
            await self.scene.set_data('scene', scene_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            await self.scene.update_message()
        
        # –í–≤–æ–¥ —Å—Ä–æ–∫–∞ –≤–∫–ª–∞–¥–∞
        elif deposit_state == 'input_period':
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É
            scene_data['error_message'] = ''
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞
            session_data = await get_session(session_id=session_id)
            if isinstance(session_data, str):
                scene_data['error_message'] = f'–û—à–∏–±–∫–∞: {session_data}'
                await self.scene.set_data('scene', scene_data)
                await self.scene.update_message()
                return
            
            current_step = session_data.get('step', 0)
            max_step = session_data.get('max_steps', 15)
            max_period = max_step - current_step
            
            if value < 3:
                scene_data['error_message'] = '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞: 3 —Ö–æ–¥–∞'
                await self.scene.set_data('scene', scene_data)
                await self.scene.update_message()
                return
            
            if value > max_period:
                scene_data['error_message'] = f'–°—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {max_period} —Ö–æ–¥(–æ–≤)! (–¢–µ–∫—É—â–∏–π —Ö–æ–¥: {current_step}, –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã: {max_period})'
                await self.scene.set_data('scene', scene_data)
                await self.scene.update_message()
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            scene_data['deposit_period'] = value
            scene_data['deposit_state'] = 'confirm'
            await self.scene.set_data('scene', scene_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await self.scene.update_message()
