from oms import Page
from aiogram.types import Message, CallbackQuery
from modules.ws_client import get_factories
from oms.utils import callback_generator
from global_modules.logs import Logger

bot_logger = Logger.get_logger("bot")


class FactoryRekitGroups(Page):
    __page_name__ = "factory-rekit-groups"
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —Å —ç–º–æ–¥–∑–∏
    RESOURCES = {
        "oil_products": {"name": "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã", "emoji": "‚õΩ"},
        "nails": {"name": "–ì–≤–æ–∑–¥–∏", "emoji": "üî©"},
        "boards": {"name": "–î–æ—Å–∫–∏", "emoji": "ü™µ"},
        "fabric": {"name": "–¢–∫–∞–Ω—å", "emoji": "üßµ"},
        "medical_equipment": {"name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "emoji": "üíâ"},
        "machine": {"name": "–°—Ç–∞–Ω–æ–∫", "emoji": "‚öôÔ∏è"},
        "furniture": {"name": "–ú–µ–±–µ–ª—å", "emoji": "ü™ë"},
        "tent": {"name": "–ü–∞–ª–∞—Ç–∫–∞", "emoji": "‚õ∫"},
        "barrel": {"name": "–ë–æ—á–∫–∞", "emoji": "üõ¢Ô∏è"},
        "tarpaulin": {"name": "–ë—Ä–µ–∑–µ–Ω—Ç", "emoji": "üé™"},
        "insulation_material": {"name": "–ò–∑–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", "emoji": "üß±"},
        "sail": {"name": "–ü–∞—Ä—É—Å", "emoji": "‚õµ"},
        "generator": {"name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "emoji": "‚ö°"},
        "body_armor": {"name": "–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç", "emoji": "ü¶∫"},
        "refrigerator": {"name": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", "emoji": "üßä"},
        "yacht": {"name": "–ü–∞—Ä—É—Å–Ω–∞—è —è—Ö—Ç–∞", "emoji": "üõ•Ô∏è"}
    }
    
    def get_resource_name(self, resource_key: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞"""
        resource_info = self.RESOURCES.get(resource_key, {"name": resource_key, "emoji": "üì¶"})
        return f"{resource_info['emoji']} {resource_info['name']}"
    
    async def content_worker(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"""
        scene_data = self.scene.get_data('scene')
        company_id = scene_data.get('company_id')
        
        if not company_id:
            return "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–æ–¥—ã
            factories_response = await get_factories(company_id=company_id)
            bot_logger.info(f"get_factories response: {factories_response}")
            
            if not factories_response or "factories" not in factories_response:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–æ–¥–æ–≤"
            
            factories = factories_response["factories"]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–≤–æ–¥—ã –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º –∏ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ
            idle_count = 0
            resource_groups = {}
            
            for factory in factories:
                complectation = factory.get('complectation')
                
                if complectation is None:
                    idle_count += 1
                else:
                    if complectation not in resource_groups:
                        resource_groups[complectation] = 0
                    resource_groups[complectation] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö
            await self.update_data('idle_count', idle_count)
            await self.update_data('resource_groups', resource_groups)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            content = "üîÑ **–ü–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–≤–æ–¥–æ–≤**\n\n"
            content += "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏:\n\n"
            
            if idle_count > 0:
                content += f"‚ö™Ô∏è –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ: **{idle_count}** —à—Ç.\n"
            
            if resource_groups:
                for resource_key, count in resource_groups.items():
                    resource_display = self.get_resource_name(resource_key)
                    content += f"{resource_display}: **{count}** —à—Ç.\n"
            
            if idle_count == 0 and not resource_groups:
                content += "‚ùå –ù–µ—Ç –∑–∞–≤–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏"
            
            return content
            
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–æ–¥–æ–≤: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
    
    async def buttons_worker(self):
        """–ö–Ω–æ–ø–∫–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏ –∑–∞–≤–æ–¥–æ–≤"""
        page_data = self.get_data()
        
        if page_data is None:
            buttons = []
        else:
            idle_count = page_data.get('idle_count', 0)
            resource_groups = page_data.get('resource_groups', {})
            
            buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏—Ö –∑–∞–≤–æ–¥–æ–≤
            if idle_count > 0:
                buttons.append({
                    'text': f'‚ö™Ô∏è –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ ({idle_count})',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_group',
                        'idle'
                    )
                })
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø –∑–∞–≤–æ–¥–æ–≤ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
            for resource_key, count in resource_groups.items():
                resource_info = self.RESOURCES.get(resource_key, {"name": resource_key, "emoji": "üì¶"})
                buttons.append({
                    'text': f'{resource_info["emoji"]} {resource_info["name"]} ({count})',
                    'callback_data': callback_generator(
                        self.scene.__scene_name__,
                        'select_group',
                        resource_key
                    )
                })
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.append({
            'text': '‚Ü™Ô∏è –ù–∞–∑–∞–¥',
            'callback_data': callback_generator(
                self.scene.__scene_name__,
                'back'
            )
        })
        
        self.row_width = 1
        return buttons
    
    @Page.on_callback('select_group')
    async def select_group(self, callback: CallbackQuery, args: list):
        """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–≤–æ–¥–æ–≤"""
        if len(args) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞", show_alert=True)
            return
        
        group_type = args[1]  # 'idle' –∏–ª–∏ resource_key
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        scene_data = self.scene.get_data('scene')
        scene_data['rekit_group'] = group_type
        await self.scene.set_data('scene', scene_data)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await self.scene.update_page('factory-rekit-count')
        await callback.answer()
    
    @Page.on_callback('back')
    async def back_to_menu(self, callback: CallbackQuery, args: list):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–≤–æ–¥–æ–≤"""
        await self.scene.update_page('factory-menu')
        await callback.answer()
