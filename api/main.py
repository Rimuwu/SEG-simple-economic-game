from asyncio import sleep
import asyncio
from pprint import pprint
import random
from fastapi import FastAPI, Request
from contextlib import asynccontextmanager

from game.logistics import Logistics
from game.stages import stage_game_updater
from global_modules.api_configurate import get_fastapi_app
from modules.logs import *
from modules.json_database import just_db
from modules.sheduler import scheduler
from game.session import session_manager
from game.exchange import Exchange
from game.citie import Citie
from os import getenv
from global_modules.logs import main_logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
from routers import connect_ws

debug = getenv("DEBUG", "False").lower() == "true"

@asynccontextmanager
async def lifespan(app: FastAPI):

    game_logger.info("====================== GAME is starting up...")
    websocket_logger.info("====================== GAME is starting up...")
    main_logger.info("====================== GAME is starting up...")
    routers_logger.info("====================== GAME is starting up...")

    # Startup
    websocket_logger.info("Creating missing tables on startup...")
    # just_db.drop_all() # –¢–µ—Å—Ç–æ–≤–æ

    just_db.create_table('sessions') # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π
    just_db.create_table('users') # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    just_db.create_table('companies') # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–π
    just_db.create_table('game_history') # –¢–∞–±–ª–∏—Ü–∞ c –∏—Å—Ç–æ—Ä–∏–µ–π —Ö–æ–¥–æ–≤
    just_db.create_table('time_schedule') # –¢–∞–±–ª–∏—Ü–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    just_db.create_table('step_schedule') # –¢–∞–±–ª–∏—Ü–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–æ —à–∞–≥–∞–º
    just_db.create_table('contracts') # –¢–∞–±–ª–∏—Ü–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
    just_db.create_table('cities') # –¢–∞–±–ª–∏—Ü–∞ —Å –≥–æ—Ä–æ–¥–∞–º–∏
    just_db.create_table('exchanges') # –¢–∞–±–ª–∏—Ü–∞ —Å –±–∏—Ä–∂–µ–π
    just_db.create_table('factories') # –¢–∞–±–ª–∏—Ü–∞ —Å –∑–∞–≤–æ–¥–∞–º–∏
    just_db.create_table('item_price') # –¢–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
    just_db.create_table('logistics') # –¢–∞–±–ª–∏—Ü–∞ —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π

    websocket_logger.info("Loading sessions from database...")
    session_manager.load_from_base()

    await sleep(5)
    websocket_logger.info("Starting task scheduler...")

    asyncio.create_task(scheduler.start())
    if debug:
        asyncio.create_task(test1())

    yield

    websocket_logger.info("API is shutting down...")

    websocket_logger.info("Stopping task scheduler...")
    scheduler.stop()
    scheduler.cleanup_shutdown_tasks()

app = get_fastapi_app(
    title="API",
    version="6.6.6",
    description="SEG API",
    debug=False,
    lifespan=lifespan,
    limiter=False,
    middlewares=[],
    routers=[
        connect_ws.router
    ],
    api_logger=websocket_logger
)

@app.get("/")
async def root(request: Request):
    return {"message": f"{app.description} is running! v{app.version}"}

async def test1():
    
    from game.user import User
    from game.session import Session, session_manager, SessionStages
    from game.company import Company
    from game.contract import Contract

    await asyncio.sleep(2)

    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ä—Ç–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º...")

    # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if session_manager.get_session('AFRIKA'):
        session = session_manager.get_session('AFRIKA')
        session.delete()

    session = session_manager.create_session('AFRIKA')
    
    session.update_stage(SessionStages.FreeUserConnect, True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–ø–∞–Ω–∏–π
    print("üë• –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∞...")
    user1: User = User().create(_id=1, username="MetalSupplier", session_id=session.session_id)
    user2: User = User().create(_id=2, username="WoodCustomer", session_id=session.session_id)

    supplier = user1.create_company("MetalCorp")  # –ü–æ—Å—Ç–∞–≤—â–∏–∫ –º–µ—Ç–∞–ª–ª–∞
    supplier.set_owner(1)

    customer = user2.create_company("WoodCorp")   # –ó–∞–∫–∞–∑—á–∏–∫ –º–µ—Ç–∞–ª–ª–∞, –ø–æ—Å—Ç–∞–≤—â–∏–∫ –¥–µ—Ä–µ–≤–∞
    customer.set_owner(2)

    session.update_stage(SessionStages.CellSelect, True)
    for company in [supplier, customer]:
        company.reupdate()
    
    # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ
    supplier.set_position(0, 0)
    customer.set_position(2, 3)
    
    session.update_stage(SessionStages.Game, True)
    for company in [supplier, customer]:
        company.reupdate()
    
    # –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò–ù–í–ï–ù–¢–ê–†–Ø
    print("üßπ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å...")
    supplier.warehouses = {}
    customer.warehouses = {}
    supplier.balance = 0
    customer.balance = 0
    
    supplier.reputation = 100
    customer.reputation = 100
    supplier.save_to_base()
    customer.save_to_base()

    print("üí∞")

    supplier.add_resource("metal", 50)  # –ú–µ—Ç–∞–ª–ª –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏
    customer.add_resource("wood", 50)  # –ú–µ—Ç–∞–ª–ª –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏
    customer.add_balance(5000, 0.0)  # –î–µ–Ω—å–≥–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞

    ex = Exchange().create(
        company_id=supplier.id,
        session_id=session.session_id,
        sell_resource="metal",
        sell_amount_per_trade=10,
        count_offers=5,
        offer_type='barter',
        barter_resource="wood",
        barter_amount=5,
    )
    
    ex.buy(
        customer.id,
        5
    )
    
    session.update_stage(SessionStages.Game, True)
    session.update_stage(SessionStages.Game, True)
    session.update_stage(SessionStages.Game, True)
