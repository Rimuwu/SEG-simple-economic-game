from asyncio import sleep
import asyncio
from pprint import pprint
import random
from fastapi import FastAPI, Request
from contextlib import asynccontextmanager

from game.stages import stage_game_updater
from global_modules.api_configurate import get_fastapi_app
from global_modules.logs import main_logger
from modules.json_database import just_db
from modules.sheduler import scheduler
from game.session import session_manager
from game.exchange import Exchange
from game.citie import Citie

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
from routers import connect_ws

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    main_logger.info("API is starting up...")
    main_logger.info("Creating missing tables on startup...")
    # just_db.drop_all() # –¢–µ—Å—Ç–æ–≤–æ

    just_db.create_table('sessions') # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π
    just_db.create_table('users') # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    just_db.create_table('companies') # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–π
    just_db.create_table('game_history') # –¢–∞–±–ª–∏—Ü–∞ c –∏—Å—Ç–æ—Ä–∏–µ–π —Ö–æ–¥–æ–≤
    just_db.create_table('time_schedule') # –¢–∞–±–ª–∏—Ü–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    just_db.create_table('step_schedule') # –¢–∞–±–ª–∏—Ü–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–æ —à–∞–≥–∞–º
    just_db.create_table('contracts') # –¢–∞–±–ª–∏—Ü–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
    just_db.create_table('cities') # –¢–∞–±–ª–∏—Ü–∞ —Å –≥–æ—Ä–æ–¥–∞–º–∏
    just_db.create_table('exchanges') # –¢–∞–±–ª–∏—Ü–∞ —Å –±–∏—Ä–∂–µ–π
    just_db.create_table('factories') # –¢–∞–±–ª–∏—Ü–∞ —Å –∑–∞–≤–æ–¥–∞–º–∏
    just_db.create_table('item_price') # –¢–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã

    main_logger.info("Loading sessions from database...")
    session_manager.load_from_base()

    await sleep(5)
    main_logger.info("Starting task scheduler...")

    asyncio.create_task(scheduler.start())
    asyncio.create_task(test1())

    yield

    main_logger.info("API is shutting down...")

    main_logger.info("Stopping task scheduler...")
    scheduler.stop()
    scheduler.cleanup_shutdown_tasks()

app = get_fastapi_app(
    title="API",
    version="1.0.0",
    description="SEG API",
    debug=False,
    lifespan=lifespan,
    limiter=False,
    middlewares=[],
    routers=[
        connect_ws.router
    ],
    api_logger=main_logger
)

@app.get("/")
async def root(request: Request):
    return {"message": f"{app.description} is running! v{app.version}"}

async def test1():
    
    from game.user import User
    from game.session import Session, session_manager, SessionStages
    from game.company import Company
    from game.contract import Contract

    await asyncio.sleep(2)

    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ä—Ç–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º...")

    # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if session_manager.get_session('AFRIKA'):
        session = session_manager.get_session('AFRIKA')
        session.delete()

    session = session_manager.create_session('AFRIKA')
    
    session.update_stage(SessionStages.FreeUserConnect, True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–ø–∞–Ω–∏–π
    print("üë• –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∞...")
    user1: User = User().create(_id=1, username="MetalSupplier", session_id=session.session_id)
    user2: User = User().create(_id=2, username="WoodCustomer", session_id=session.session_id)

    supplier = user1.create_company("MetalCorp")  # –ü–æ—Å—Ç–∞–≤—â–∏–∫ –º–µ—Ç–∞–ª–ª–∞
    supplier.set_owner(1)

    customer = user2.create_company("WoodCorp")   # –ó–∞–∫–∞–∑—á–∏–∫ –º–µ—Ç–∞–ª–ª–∞, –ø–æ—Å—Ç–∞–≤—â–∏–∫ –¥–µ—Ä–µ–≤–∞
    customer.set_owner(2)

    session.update_stage(SessionStages.CellSelect, True)
    for company in [supplier, customer]:
        company.reupdate()
    
    # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ
    supplier.set_position(0, 0)
    customer.set_position(2, 3)
    
    session.update_stage(SessionStages.Game, True)
    for company in [supplier, customer]:
        company.reupdate()
    
    # –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò–ù–í–ï–ù–¢–ê–†–Ø
    print("üßπ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å...")
    supplier.warehouses = {}
    customer.warehouses = {}
    supplier.balance = 0
    customer.balance = 0
    supplier.save_to_base()
    customer.save_to_base()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    print("üí∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã...")
    
    # –î–∞—ë–º –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –º–µ—Ç–∞–ª–ª –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–∫–∞–∑—á–∏–∫—É –¥–µ–Ω—å–≥–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    supplier.add_resource("metal", 100)  # –ú–µ—Ç–∞–ª–ª –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏
    customer.add_balance(5000)  # –î–µ–Ω—å–≥–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    
    print(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier.name}: –º–µ—Ç–∞–ª–ª = {supplier.warehouses.get('metal', 0)}, –±–∞–ª–∞–Ω—Å = {supplier.balance}")
    print(f"–ó–∞–∫–∞–∑—á–∏–∫ {customer.name}: –±–∞–ª–∞–Ω—Å = {customer.balance}")

    # –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ö–û–ù–¢–†–ê–ö–¢–ê
    print("\nüìã –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç...")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç: –ø–æ—Å—Ç–∞–≤—â–∏–∫ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª—è—Ç—å 10 –µ–¥–∏–Ω–∏—Ü –º–µ—Ç–∞–ª–ª–∞ –∑–∞ 100 –º–æ–Ω–µ—Ç –∫–∞–∂–¥—ã–π —Ö–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ö–æ–¥–æ–≤
        contract = Contract().create(
            supplier_company_id=supplier.id,
            customer_company_id=customer.id, 
            session_id=session.session_id,
            resource="metal",           # –ü–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–π —Ä–µ—Å—É—Ä—Å
            amount_per_turn=10,        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ —Ö–æ–¥
            duration_turns=3,          # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ö–æ–¥–∞—Ö
            payment_amount=100         # –û–ø–ª–∞—Ç–∞ –∑–∞ —Ö–æ–¥
        )
        
        print(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞–Ω! ID: {contract.id}")
        print(f"   –ü–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è: {contract.amount_per_turn} {contract.resource} –∑–∞ {contract.payment_amount} –º–æ–Ω–µ—Ç/—Ö–æ–¥")
        print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {contract.duration_turns} —Ö–æ–¥–æ–≤")
        print(f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {contract.payment_amount * contract.duration_turns} –º–æ–Ω–µ—Ç")
        
        # –ü–†–ò–ù–Ø–¢–ò–ï –ö–û–ù–¢–†–ê–ö–¢–ê
        print("\nü§ù –ü–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç...")
        contract.accept_contract()
        
        supplier.reupdate()
        customer.reupdate()
        
        print(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier.name}: –±–∞–ª–∞–Ω—Å = {supplier.balance} (+{contract.payment_amount * contract.duration_turns})")
        print(f"–ó–∞–∫–∞–∑—á–∏–∫ {customer.name}: –±–∞–ª–∞–Ω—Å = {customer.balance} (-{contract.payment_amount * contract.duration_turns})")
        
        # –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ù–¢–†–ê–ö–¢–ê –ü–û –•–û–î–ê–ú
        print("\nüöö –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...")
        
        for turn in range(1, contract.duration_turns + 1):
            print(f"\n--- –•–û–î {turn} ---")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ö–æ–¥–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
            session.step += 1
            session.save_to_base()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å—Ç–∞–≤–∫—É
            try:
                contract.reupdate()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                if turn != 2:
                    contract.execute_turn(session.step)
                
                supplier.reupdate()
                customer.reupdate()
                
                print(f"‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                print(f"   –ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier.name}: –º–µ—Ç–∞–ª–ª = {supplier.warehouses.get('metal', 0)} (-{contract.amount_per_turn})")
                print(f"   –ó–∞–∫–∞–∑—á–∏–∫ {customer.name}: –º–µ—Ç–∞–ª–ª = {customer.warehouses.get('metal', 0)} (+{contract.amount_per_turn})")
                print(f"   –û—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤: {contract.remaining_turns}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–∫–∏: {e}")
                break
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        supplier.reupdate()
        customer.reupdate()
        
        print(f"\n–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier.name}:")
        print(f"  - –ú–µ—Ç–∞–ª–ª: {supplier.warehouses.get('metal', 0)}")
        print(f"  - –ë–∞–ª–∞–Ω—Å: {supplier.balance}")
        print(f"  - –†–µ–ø—É—Ç–∞—Ü–∏—è: {supplier.reputation}")
        
        print(f"–ó–∞–∫–∞–∑—á–∏–∫ {customer.name}:")
        print(f"  - –ú–µ—Ç–∞–ª–ª: {customer.warehouses.get('metal', 0)}")
        print(f"  - –ë–∞–ª–∞–Ω—Å: {customer.balance}")
        print(f"  - –†–µ–ø—É—Ç–∞—Ü–∏—è: {customer.reputation}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            contract.reupdate()
            print(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID {contract.id}, –æ—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤: {contract.remaining_turns}")
        except:
            print("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

    