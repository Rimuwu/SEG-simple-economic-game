#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä —Å –º–µ–Ω—é
–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—É—á–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
"""

import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

import asyncio
import sys
import json
from pathlib import Path
from typing import Optional

sys.path.insert(0, str(Path(__file__).parent))

from os import environ

from main import AITrainerApp


class InteractiveTrainer:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞"""
    
    def __init__(self):
        self.app = None
        self.running = True
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.app = AITrainerApp("config.json")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def print_header(self):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("\n" + "="*70)
        print("ü§ñ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–†–ï–ù–ï–† –ù–ï–ô–†–û–°–ï–¢–ò –î–õ–Ø SEG")
        print("="*70 + "\n")
    
    def print_menu(self):
        """–ü–µ—á–∞—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        print("\nüìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:\n")
        print("  1. üöÄ –û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å")
        print("  2. üîÑ –û–±—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–π (Easy, Medium, Hard)")
        print("  3. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å")
        print("  4. üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏")
        print("  5. ‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        print("  6. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å")
        print("  0. ‚ùå –í—ã—Ö–æ–¥")
        print("\n" + "-"*70)
    
    async def train_single_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        print("\nüéì –û–ë–£–ß–ï–ù–ò–ï –û–î–ù–û–ô –ú–û–î–ï–õ–ò\n")
        
        name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ").strip()
        if not name:
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
        print("  1. Easy (100 —ç–ø–∏–∑–æ–¥–æ–≤)")
        print("  2. Medium (500 —ç–ø–∏–∑–æ–¥–æ–≤)")
        print("  3. Hard (1000 —ç–ø–∏–∑–æ–¥–æ–≤)")
        print("  4. Expert (2000 —ç–ø–∏–∑–æ–¥–æ–≤)")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
        difficulty_map = {
            "1": ("easy", 100),
            "2": ("medium", 500),
            "3": ("hard", 1000),
            "4": ("expert", 2000)
        }
        
        if choice not in difficulty_map:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
        
        difficulty, default_episodes = difficulty_map[choice]
        
        episodes_input = input(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ [{default_episodes}]: ").strip()
        episodes = int(episodes_input) if episodes_input else default_episodes
        
        num_agents_input = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ AI –±–æ—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏ [2]: ").strip()
        num_agents = int(num_agents_input) if num_agents_input else 2
        num_agents = max(2, num_agents)  # –ú–∏–Ω–∏–º—É–º 2 –±–æ—Ç–∞
        
        description = input("–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip()
        
        print(f"\n‚è≥ –û–±—É—á–µ–Ω–∏–µ {name} ({difficulty}, {episodes} —ç–ø–∏–∑–æ–¥–æ–≤, {num_agents} –±–æ—Ç–æ–≤)...")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...\n")
        
        result = await self.app.train_model(
            name=name,
            difficulty=difficulty,
            episodes=episodes,
            description=description,
            num_agents=num_agents
        )
        
        if result["success"]:
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ!\n")
            print(f"  üì¶ –ú–æ–¥–µ–ª—å: {result['model_name']} v{result['model_version']}")
            print(f"  üéì –≠–ø–∏–∑–æ–¥–æ–≤: {result['episodes_trained']}")
            print(f"  üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {result['average_reward']:.2f}")
            print(f"  üèÜ –õ—É—á—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {result['best_reward']:.2f}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
    
    async def train_multiple_versions(self):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–µ—Ä—Å–∏–π"""
        print("\nüîÑ –û–ë–£–ß–ï–ù–ò–ï –í–°–ï–• –í–ï–†–°–ò–ô\n")
        
        base_name = input("–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ").strip()
        if not base_name:
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        print("\n–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏:")
        print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n")
        
        versions_config = {}
        
        for difficulty, default_episodes in [("easy", 100), ("medium", 500), ("hard", 1000)]:
            episodes_input = input(f"  {difficulty.upper()} [{default_episodes}]: ").strip()
            episodes = int(episodes_input) if episodes_input else default_episodes
            versions_config[difficulty] = episodes
        
        print(f"\n‚è≥ –û–±—É—á–µ–Ω–∏–µ {base_name} (–≤—Å–µ –≤–µ—Ä—Å–∏–∏)...")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è...\n")
        
        result = await self.app.train_multiple_versions(base_name, versions_config)
        
        print(f"\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n")
        
        for difficulty, version_result in result["versions"].items():
            if version_result.get("success"):
                print(f"  ‚úì {difficulty.upper()}: v{version_result['model_version']}")
                print(f"    –ù–∞–≥—Ä–∞–¥–∞: {version_result['average_reward']:.2f}")
            else:
                print(f"  ‚úó {difficulty.upper()}: {version_result.get('error')}")
    
    async def test_model(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò\n")
        
        name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ").strip()
        if not name:
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        version_input = input("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏: ").strip()
        if not version_input.isdigit():
            print("‚ùå –í–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        version = int(version_input)
        
        num_games_input = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä [5]: ").strip()
        num_games = int(num_games_input) if num_games_input else 5
        
        print(f"\n‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name} v{version}...")
        
        result = await self.app.test_model(name, version, num_games)
        
        if result.get("success"):
            print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n")
            print(f"  üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {len(result['games'])}")
            print(f"  üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {result['average_rank']:.2f}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
    
    def show_models(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏"""
        print("\nüìä –°–ü–ò–°–û–ö –í–°–ï–• –ú–û–î–ï–õ–ï–ô\n")
        
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
        print("  1. –í—Å–µ")
        print("  2. Easy")
        print("  3. Medium")
        print("  4. Hard")
        print("  5. Expert")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
        difficulty_map = {
            "1": None,
            "2": "easy",
            "3": "medium",
            "4": "hard",
            "5": "expert"
        }
        
        if choice not in difficulty_map:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
        
        difficulty = difficulty_map[choice]
        result = self.app.list_models(difficulty)
        
        if result["total_models"] == 0:
            print("\nüì≠ –ú–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"\nüì¶ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {result['total_models']}\n")
            
            for model in result["models"]:
                print(f"  {model['name']} v{model['version']}")
                print(f"    –°–ª–æ–∂–Ω–æ—Å—Ç—å: {model['difficulty']}")
                print(f"    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model['saved_at']}")
                print()
    
    def show_model_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
        print("\n ‚ÑπÔ∏è  –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–û–î–ï–õ–ò\n")
        
        name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ").strip()
        if not name:
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        version_input = input("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏: ").strip()
        if not version_input.isdigit():
            print("‚ùå –í–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        version = int(version_input)
        result = self.app.get_model_info(name, version)
        
        if result["success"]:
            print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {name} v{version}:\n")
            info = result["info"]
            
            if "name" in info:
                print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {info.get('name')}")
                print(f"  –í–µ—Ä—Å–∏—è: {info.get('version')}")
                print(f"  –°–ª–æ–∂–Ω–æ—Å—Ç—å: {info.get('difficulty')}")
                print(f"  –°–æ–∑–¥–∞–Ω–∞: {info.get('created_at')}")
                print(f"  –≠–ø–∏–∑–æ–¥–æ–≤: {info.get('trained_episodes')}")
                print(f"  –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {info.get('average_reward'):.2f}")
                print(f"  –õ—É—á—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {info.get('best_reward'):.2f}")
                if info.get('description'):
                    print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {info.get('description')}")
            else:
                print(json.dumps(info, indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå {result['error']}")
    
    def delete_model(self):
        """–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å"""
        print("\nüóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –ú–û–î–ï–õ–ò\n")
        
        name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ").strip()
        if not name:
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        version_input = input("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏: ").strip()
        if not version_input.isdigit():
            print("‚ùå –í–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        version = int(version_input)
        
        confirm = input(f"\n–£–¥–∞–ª–∏—Ç—å {name} v{version}? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if confirm != "–¥–∞":
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        result = self.app.delete_model(name, version)
        
        if result["success"]:
            print(f"‚úÖ {result['message']}")
        else:
            print(f"‚ùå {result['message']}")
    
    async def run(self):
        """–ì–ª–∞–≤–Ω–æ–π —Ü–∏–∫–ª"""
        print("–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è SEG....\n")
        if not await self.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            return

        self.print_header()
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ\n")
        
        while self.running:
            try:
                self.print_menu()
                choice = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip()
                
                if choice == "1":
                    await self.train_single_model()
                elif choice == "2":
                    await self.train_multiple_versions()
                elif choice == "3":
                    await self.test_model()
                elif choice == "4":
                    self.show_models()
                elif choice == "5":
                    self.show_model_info()
                elif choice == "6":
                    self.delete_model()
                elif choice == "0":
                    print("\nüëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!\n")
                    self.running = False
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
            except KeyboardInterrupt:
                print("\n\nüëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
                self.running = False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    print("–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è SEG....\n")
    trainer = InteractiveTrainer()
    await trainer.run()


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è SEG...\n")
    asyncio.run(main())
