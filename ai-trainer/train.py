#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python train.py [–æ–ø—Ü–∏–∏]

–ü—Ä–∏–º–µ—Ä—ã:
    python train.py --easy --episodes 100
    python train.py --hard --episodes 1000
    python train.py --multi
"""

import asyncio
import sys
import json
import argparse
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent))

from main import AITrainerApp


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∏–≥—Ä—ã SEG",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –û–±—É—á–µ–Ω–∏–µ –ª–µ–≥–∫–æ–≥–æ –±–æ—Ç–∞ (100 —ç–ø–∏–∑–æ–¥–æ–≤)
  python train.py --easy --episodes 100 --name bot_easy

  # –û–±—É—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –±–æ—Ç–∞ (1000 —ç–ø–∏–∑–æ–¥–æ–≤)
  python train.py --hard --episodes 1000 --name bot_hard

  # –û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π (easy, medium, hard)
  python train.py --multi --name bot_complete

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
  python train.py --test --name bot_easy --version 1

  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
  python train.py --list

  # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ easy
  python train.py --list --easy
        """
    )
    
    # –ì—Ä—É–ø–ø–∞ –¥–µ–π—Å—Ç–≤–∏–π
    action_group = parser.add_mutually_exclusive_group()
    action_group.add_argument("--train", action="store_true", default=True,
                             help="–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    action_group.add_argument("--multi", action="store_true",
                             help="–û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π (easy, medium, hard)")
    action_group.add_argument("--test", action="store_true",
                             help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    action_group.add_argument("--list", action="store_true",
                             help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
    action_group.add_argument("--info", action="store_true",
                             help="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
    
    # –ì—Ä—É–ø–ø–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficulty_group = parser.add_mutually_exclusive_group()
    difficulty_group.add_argument("--easy", action="store_const", const="easy", dest="difficulty",
                                 help="–õ–µ–≥–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (100 —ç–ø–∏–∑–æ–¥–æ–≤)")
    difficulty_group.add_argument("--medium", action="store_const", const="medium", dest="difficulty",
                                 help="–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (500 —ç–ø–∏–∑–æ–¥–æ–≤)")
    difficulty_group.add_argument("--hard", action="store_const", const="hard", dest="difficulty",
                                 help="–°–ª–æ–∂–Ω–∞—è (1000 —ç–ø–∏–∑–æ–¥–æ–≤)")
    difficulty_group.add_argument("--expert", action="store_const", const="expert", dest="difficulty",
                                 help="–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è (2000 —ç–ø–∏–∑–æ–¥–æ–≤)")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument("--name", type=str, help="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    parser.add_argument("--version", type=int, help="–í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏ (–¥–ª—è test/info)")
    parser.add_argument("--episodes", type=int, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å)")
    parser.add_argument("--config", type=str, default="config.json", help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--description", type=str, default="", help="–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    
    return parser.parse_args()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        app = AITrainerApp(args.config)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return 1
    
    print("\n" + "="*60)
    print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è SEG")
    print("="*60 + "\n")
    
    try:
        if args.list:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            result = app.list_models(args.difficulty)
            
            if result["total_models"] == 0:
                print("üì≠ –ú–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {result['total_models']}\n")
                
                for model in result["models"]:
                    print(f"  üì¶ {model['name']} v{model['version']}")
                    print(f"     –°–ª–æ–∂–Ω–æ—Å—Ç—å: {model['difficulty']}")
                    print(f"     –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model['saved_at']}")
                    print()
        
        elif args.info:
            if not args.name or args.version is None:
                print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: --name –∏ --version")
                return 1
            
            result = app.get_model_info(args.name, args.version)
            
            if result["success"]:
                info = result["info"]
                print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ {args.name} v{args.version}:\n")
                print(json.dumps(info, indent=2, ensure_ascii=False))
            else:
                print(f"‚ùå {result['error']}")
                return 1
        
        elif args.test:
            if not args.name or args.version is None:
                print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: --name –∏ --version")
                return 1
            
            print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {args.name} v{args.version}...")
            result = await app.test_model(args.name, args.version, num_test_games=5)
            
            if result["success"]:
                print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {result['average_rank']:.2f}")
                print(f"   –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {len(result['games'])}")
            else:
                print(f"‚ùå {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return 1
        
        elif args.multi:
            if not args.name:
                print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä: --name")
                return 1
            
            print(f"üöÄ –û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–∏ {args.name}...\n")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏
            versions_config = {
                "easy": 100,
                "medium": 500,
                "hard": 1000
            }
            
            result = await app.train_multiple_versions(args.name, versions_config)
            
            if all(v.get("success") for v in result["versions"].values()):
                print("\n‚úÖ –í—Å–µ –≤–µ—Ä—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω—ã!\n")
                
                for difficulty, version_result in result["versions"].items():
                    if version_result.get("success"):
                        print(f"  ‚úì {difficulty.upper()}: {version_result['model_version']} "
                             f"(v{version_result['model_version']})")
                        print(f"    –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {version_result['average_reward']:.2f}")
            else:
                print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –Ω–µ –æ–±—É—á–µ–Ω—ã:")
                for difficulty, version_result in result["versions"].items():
                    if not version_result.get("success"):
                        print(f"  ‚úó {difficulty}: {version_result.get('error', 'Unknown error')}")
                return 1
        
        else:  # –û–±—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏
            if not args.name:
                print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä: --name")
                print("–ù–∞–ø—Ä–∏–º–µ—Ä: python train.py --name bot_easy --easy")
                return 1
            
            difficulty = args.difficulty or "easy"
            episodes = args.episodes
            
            print(f"üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {args.name}")
            print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}")
            if episodes:
                print(f"   –≠–ø–∏–∑–æ–¥–æ–≤: {episodes}")
            print()
            
            result = await app.train_model(
                name=args.name,
                difficulty=difficulty,
                episodes=episodes,
                description=args.description or f"Training {difficulty} model"
            )
            
            if result["success"]:
                print(f"\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n")
                print(f"  üì¶ –ú–æ–¥–µ–ª—å: {result['model_name']} v{result['model_version']}")
                print(f"  üéì –≠–ø–∏–∑–æ–¥–æ–≤: {result['episodes_trained']}")
                print(f"  üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {result['average_reward']:.2f}")
                print(f"  üèÜ –õ—É—á—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {result['best_reward']:.2f}")
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {result.get('error', 'Unknown error')}")
                return 1
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    print("\n" + "="*60 + "\n")
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
